
<html><head>
<title>Tennis Abstract: Andrew Whittington Match Results, Splits, and Analysis</title>
<link rel="stylesheet" href="https://www.tennisabstract.com/blue/style.css" type="text/css">
<script type="text/javascript" src="https://www.tennisabstract.com/jquery-1.7.1-min.js"></script>
<script type="text/javascript" src="https://www.tennisabstract.com/jquery.tablesorter.js"></script>
<script type="text/javascript" src="https://www.tennisabstract.com/navbar.js"></script>
<script type="text/javascript" src="https://www.minorleaguesplits.com/tennisabstract/cgi-bin/jsplayers/curr_rank_atp.js"></script>

<script language="JavaScript">
var currentTime = new Date();
var month = currentTime.getMonth() + 1;
var day = currentTime.getDate();
var year = currentTime.getFullYear().toString();
var mm, dd;
if (month < 10) {mm = '0' + month.toString();}
else {mm = month.toString();}
if (day < 10) {dd = '0' + day.toString();}
else {dd = day.toString();}
var today = year + mm + dd;
var one_day=1000*60*60*24;
var nameparam = 'AndrewWhittington';
var prefilters = {};
var opponent="";
var exclude="";
var opp_team="";
var partner="";
var view="";
var keep_loading = 0;
var fullname = 'Andrew Whittington';
var lastname = 'Whittington';
var currentrank = 504;
var peakrank = 160;
var peakfirst = 20170320;
var peaklast = 20170320;
var dob = 19930811;
var ht = '';
var hand = 'R';
var backhand = '2';
var country = 'AUS';
var shortlist = 0;
var careerjs = 0;
var active = 1;
var lastdate = 0;
var twitter = '';
var current_dubs = 450;
var peak_dubs = 76;
var peakfirst_dubs = 20170227;
var liverank = 198;
var chartagg = 0;
var photog = '';
var photog_credit = '';
var photog_link = '';
var itf_id = '100107970';
var atp_id = 'andrew-whittington/w630';
var dc_id = '';
var wiki_id = 'Andrew_Whittington_(tennis)';
var ychoices=["Time Span", "Last 52", "Career", "2019", "2018", "2017", "2016", "2015", "2014", "2013", "2012", "2011", "2010"];
var tchoices=["Event", "All", "Australian Open", "Wimbledon", "An-Ning CH", "Anning CH", "Bangkok CH", "Bastad", "Binghamton CH", "Brisbane", "Burnie CH", "Caloundra CH", "Canberra CH", "Eastbourne", "Gatineau CH", "Gimcheon CH", "Granby CH", "Happy Valley CH", "Ho Chi Minh CH", "Hua Hin CH", "Ilkley CH", "Kaohsiung CH", "Kyoto CH", "Launceston CH", "Lexington CH", "Melbourne CH", "Nanchang CH", "Nanjing CH", "New Delhi CH", "Newport", "Nongbo CH", "Nottingham CH", "Playford CH", "Qingdao CH", "Shanghai CH", "Shenzhen", "Surbiton CH", "Suzhou CH", "Taipei CH", "Tampere CH", "Toyota CH", "Traralgon CH", "West Lakes CH", "Winnetka CH", "Yokohama CH"];
var cchoices=["vs Country", "All", "ARG", "AUS", "AUT", "BEL", "BLR", "BRA", "BUL", "CAN", "CHN", "COL", "CRO", "CYP", "CZE", "DEN", "ECU", "ESP", "EST", "FRA", "GBR", "GER", "GRE", "HKG", "INA", "IND", "ISR", "ITA", "JPN", "KAZ", "KOR", "KUW", "LTU", "MON", "NED", "NZL", "PHI", "ROU", "RSA", "RUS", "SLO", "SRB", "SWE", "THA", "TPE", "TUR", "UKR", "USA", "UZB", "VIE"];
var rchoices=["as Rank", "All"];
var ochoices=["Wishaya Trongcharoenchaikul", "Aaron Addison", "Tsung Hua Yang", "Julien Obry", "Tobias Blomgren", "Matthew Barton", "Thomas Fancutt", "Dennis Bloemke", "Blaz Rola", "Jay Andrijic", "Rhett Purcell", "Lloyd Glasspool", "Jeson Patrombon", "Somdev Devvarman", "Michal Konecny", "Jason Kubler", "Shuichi Sekiguchi", "Anthony Jackie Tang", "Temur Ismailov", "Alejandro Gonzalez", "Marcos Baghdatis", "Mikalai Haliak", "Dennis Novak", "Marvin Barker", "Marcus Daniell", "Byung Kook Kang", "Max Purcell", "Dane Propoggia", "Yusuke Watanuki", "Liang Chi Huang", "Andrea Arnaboldi", "Kimmer Coppejans", "Alexander Pavlioutchenkov", "Ernesto Escobedo", "Mitchell Krueger", "Taylor Harry Fritz", "Andrew Harris", "Hiroyasu Ehara", "Hsien Yin Peng", "Michael Venus", "Thomas Kromann", "Chris Eaton", "Sebastian Rieschick", "Dominik Koepfer", "Darren K Polkinghorne", "Tim Kopinski", "Jose Checa Calvo", "Gengo Kikuchi", "Boris Nicola Bakalov", "Renzo Olivo", "Scott Puodziunas", "Marc Polmans", "Edan Leshem", "Go Soeda", "Brydan Klein", "Fritz Wolmarans", "Dylan Seong Kwan Kim", "Jose Rubin Statham", "Kazuma Kawachi", "Luke Bambridge", "Valery Rudnev", "Dayne Kelly", "Johnny Arcilla", "Bradley Mousley", "James Ward", "Mitchell Pritchard", "Aleksandar Vukic", "David Agung Susanto", "Adam Pavlasek", "Rishab Agarwal", "Ricardo Villacorta Alonso", "Matteo Viola", "Laurent Lokoli", "Jake Wynan", "Brandon Vescio", "Cameron Norrie", "Matt Reid", "Tatsuma Ito", "Chun Hun Wong", "Rigele Te", "Zach Itzstein", "Yuqing Ning", "Uisung Park", "Alessandro Petrone", "Ramkumar Ramanathan", "Blake Ellis", "Ryan Thomas", "Gregoire Barrere", "Abdullah Maqdas", "Quentin Halys", "Adam Feeney", "Ranjeet Virali Murugesan", "Rudy Coco", "Yasutaka Uchiyama", "Felix Auger Aliassime", "Wan Gao", "Dennis Lajola", "Richard Gasquet", "Tommaso Lago", "Hiroki Moriya", "Gavin Van Peperzeel", "Daniel Nolan", "Karen Khachanov", "Harry Bourchier", "Vadim Alekseenko", "Nicola Kuhn", "Tuna Altuna", "Ko Suzuki", "Egor Gerasimov", "Pruchya Isarow", "Tom Burn", "Thiemo De Bakker", "Takuto Niki", "Brandon Walkin", "Yuuya Kibi", "Bowen Ouyang", "Lawrence Bataljin", "Markos Kalovelonis", "Tom Jomby", "James Duckworth", "Jack Schipanski", "Shintaro Imai", "Maverick Banes", "Reilly Opelka", "Vlad Corneliu Pop", "Ivo Karlovic", "Jean Marc Werner", "Bjorn Fratangelo", "Matthew Ebden", "Prajnesh Gunneswaran", "Patrick Davidson", "Nikoloz Basilashvili", "Jesse Delaney", "Filip Peliwo", "Cameron Edward Smith", "Alexander Kudryavtsev", "Tung Lin Wu", "Brendan Moore", "Jc Aragone", "Simon Ede", "Noah Rubin", "Omar Jasika", "Sami Reinwein", "Steven De Waard", "Dovydas Sakinis", "Hugo Di Feo", "Soon Woo Kwon", "Benjamin Mitchell", "Saketh Myneni", "Dekel Bar", "Christopher Rungkat", "Cheng Yu Yu", "Thien Nguyen Hoang", "Chuhan Wang", "Chanchai Sookton Eng", "Bradley Klahn", "Nathan Pasha", "Isaac Frost", "Borna Coric", "Yong Kyu Lim", "Thomas Fabbiano", "Yoshihito Nishioka", "Kenneth Raisma", "Christopher Oconnell", "Alexander Vasilenko", "Roberto Quiroz", "Costin Paval", "Peter Torebko", "Ethan Scobie", "Josh Goodall", "Erik Chvojka", "Matthew Dellavedova", "Luke Saville", "Ze Zhang", "Siu Fai Kelvin Lam", "Sergey Betov", "Lucas Catarina", "Daniel Byrnes", "Robert Phillips Pd13", "Kaito Uesugi", "Michael Laser", "Jacob Grills", "Marcus Willis", "Charalampos Kapogiannis", "Michael Look", "Sora Fukuda", "Kaichi Uchida", "Danai Udomchoke", "Francis Tiafoe", "Hyun Woo Nam", "John Millman", "Luca Vanni", "Ilya Ivashka", "Blake Mott", "Zhe Li", "Dimitar Kuzmanov", "Daniel Nguyen", "Calum Puttergill", "Aleksandr Nedovyesov", "Takashi Saito", "Calvin Hemery", "Mathias Bourgue", "Andrey Golubev", "Alex Bolt", "Jordan Thompson", "Thiago Monteiro", "Di Wu", "Hsin Han Lee", "Jumpei Yamasaki", "Mackenzie Mcdonald", "Can Oztuzun", "Deiton Baughman", "Riccardo Bellotti", "Yannick Hanfmann", "Peter Polansky", "Ti Chen", "Koichi Sano", "Nikola Milojevic", "Jurgen Zopp", "Marcos Giraldi Requena", "Yecong He"];
var tdates=["20100426", "20100802", "20101122", "20110221", "20110228", "20110411", "20110919", "20111003", "20111010", "20111114", "20111121", "20120206", "20120213", "20120220", "20120319", "20120326", "20120430", "20120604", "20120611", "20120618", "20120702", "20120709", "20120716", "20120827", "20120903", "20120910", "20120917", "20121008", "20121022", "20121029", "20130128", "20130218", "20130225", "20130422", "20130429", "20130506", "20130513", "20130527", "20130603", "20130610", "20130708", "20130715", "20130722", "20130729", "20130805", "20130909", "20130916", "20130923", "20131021", "20131028", "20131125", "20131229", "20140113", "20140127", "20140203", "20140217", "20140224", "20140303", "20140324", "20140428", "20140707", "20140714", "20140721", "20140728", "20140818", "20140825", "20140929", "20141006", "20141027", "20141110", "20141117", "20150105", "20150202", "20150209", "20150216", "20150223", "20150323", "20150330", "20150427", "20150706", "20150713", "20150720", "20150803", "20150831", "20150907", "20151026", "20151102", "20160104", "20160111", "20160201", "20160222", "20160229", "20160314", "20160321", "20160418", "20160425", "20160516", "20160523", "20160530", "20160606", "20160613", "20160620", "20160718", "20160725", "20160801", "20160808", "20160919", "20160926", "20161010", "20161017", "20161024", "20170116", "20170130", "20170206", "20170220", "20170227", "20170417", "20170424", "20170605", "20170612", "20170619", "20170703", "20170710", "20170724", "20170731", "20171009", "20171023", "20171030", "20171113", "20171120", "20180101", "20180129", "20180205", "20180219", "20180226", "20180305", "20180326", "20180409", "20180416", "20180423", "20180618", "20180625", "20190128"];
var vranks=["18", "21", "82", "86", "89", "100", "103", "111", "114", "115", "117", "123", "128", "130", "133", "142", "143", "145", "149", "151", "152", "153", "154", "156", "165", "166", "169", "170", "171", "172", "174", "175", "180", "184", "189", "192", "193", "196", "197", "199", "209", "211", "218", "220", "224", "229", "233", "235", "236", "240", "246", "248", "249", "250", "251", "253", "254", "256", "259", "260", "262", "264", "265", "266", "270", "271", "272", "276", "278", "279", "280", "281", "282", "288", "294", "297", "301", "302", "316", "318", "320", "324", "336", "337", "340", "341", "348", "351", "362", "365", "367", "368", "370", "374", "379", "392", "395", "396", "397", "398", "400", "402", "404", "406", "411", "413", "418", "422", "439", "441", "453", "461", "464", "468", "471", "478", "492", "493", "494", "499", "502", "518", "521", "522", "523", "524", "525", "534", "552", "554", "559", "561", "563", "572", "574", "575", "578", "581", "582", "590", "602", "608", "611", "615", "619", "625", "626", "633", "660", "674", "680", "689", "691", "712", "718", "721", "726", "746", "750", "752", "753", "755", "762", "777", "780", "782", "787", "788", "809", "824", "826", "827", "833", "834", "838", "841", "844", "846", "854", "870", "878", "886", "887", "891", "899", "919", "925", "928", "930", "933", "934", "935", "936", "979", "989", "1006", "1007", "1008", "1014", "1021", "1033", "1039", "1045", "1071", "1131", "1147", "1148", "1162", "1165", "1167", "1206", "1213", "1237", "1240", "1252", "1260", "1292", "1308", "1323", "1341", "1361", "1378", "1388", "1394", "1429", "1438", "1473", "1506", "1507", "1537", "1573", "1575", "1638", "1639", "1679", "1719", "1805", "1891"];
var playernews=[];
var upcoming = "";
var matchmx = [["20190128", "Launceston CH", "Hard", "C", "L", "390", "", "WC", "R64", "6-1 7-5", "3", "Nicola Kuhn", "248", "", "", "R", "18.8583162218", "", "ESP", "0", "73", "1", "3", "67", "47", "28", "7", "10", "6", "11", "2", "3", "51", "24", "19", "17", "9", "1", "2", "2", "", "", "", "2019-7203-264", "", "1", "1"],
          ["20180625", "Eastbourne", "Grass", "A", "L", "295", "", "", "Q1", "4-6 6-4 6-2", "3", "Matteo Viola", "272", "8", "", "R", "30.9678302533", "", "ITA", "0", "98", "5", "5", "87", "51", "33", "12", "14", "6", "13", "1", "0", "76", "55", "31", "13", "14", "3", "8", "2", "", "", "", "2018-M016-247", "", "", ""],
          ["20180618", "Ilkley CH", "Grass", "C", "L", "296", "", "", "Q1", "7-5 6-4", "3", "Lloyd Glasspool", "578", "", "WC", "U", "24.5776865161", "", "GBR", "0", "68", "6", "3", "63", "33", "24", "18", "11", "5", "7", "7", "1", "68", "43", "31", "19", "11", "3", "3", "", "", "", "", "2018-9005-237", "", "", ""],
          ["20180423", "Anning CH", "Clay", "C", "L", "271", "", "", "R16", "6-4 6-4", "3", "Prajnesh Gunneswaran", "260", "", "", "L", "28.4435318275", "", "IND", "0", "81", "6", "4", "74", "45", "32", "13", "10", "8", "10", "2", "3", "62", "33", "25", "19", "10", "5", "5", "2", "", "", "", "2018-6572-291", "", "2", "2"],
          ["20180423", "Anning CH", "Clay", "C", "W", "271", "", "", "R32", "6-4 7-6(5)", "3", "Ramkumar Ramanathan", "115", "4", "", "R", "23.4551676934", "", "IND", "0", "87", "3", "9", "66", "34", "30", "17", "11", "1", "2", "2", "2", "70", "46", "31", "14", "11", "4", "6", "2", "", "", "", "2018-6572-281", "", "1", "1"],
          ["20180416", "Nanchang CH", "Clay", "C", "L", "273", "", "", "R32", "7-5 6-3", "3", "Calvin Hemery", "130", "5", "", "R", "23.2142368241", "", "FRA", "0", "82", "2", "4", "61", "35", "26", "12", "10", "3", "6", "6", "5", "76", "52", "40", "12", "11", "8", "9", "2", "", "", "", "2018-7027-282", "", "1", "1"],
          ["20180409", "Taipei CH", "Hard", "C", "L", "268", "", "", "R32", "6-3 7-6(1)", "3", "Tung Lin Wu", "499", "", "WC", "R", "19.909650924", "", "TPE", "0", "82", "13", "5", "73", "41", "33", "12", "11", "5", "7", "4", "1", "54", "40", "33", "11", "10", "0", "0", "2", "", "", "", "2018-2278-275", "", "1", "1"],
          ["20180326", "Australia F4", "Clay", "S", "L", "270", "2", "", "QF", "3-6 6-3 7-6(5)", "3", "Matthew Barton", "1033", "", "", "R", "26.250513347", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2018-M-FU-AUS-04A-2018-028", "", "3", "3"],
          ["20180326", "Australia F4", "Clay", "S", "W", "270", "2", "", "R16", "6-4 6-0", "3", "Rhett Purcell", "1167", "", "", "R", "22.1136208077", "", "GBR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2018-M-FU-AUS-04A-2018-024", "", "2", "2"],
          ["20180326", "Australia F4", "Clay", "S", "W", "270", "2", "", "R32", "6-2 6-3", "3", "Kazuma Kawachi", "1165", "", "", "R", "23.4360027379", "", "JPN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2018-M-FU-AUS-04A-2018-016", "", "1", "1"],
          ["20180305", "Australia F2", "Grass", "S", "L", "266", "2", "", "R16", "7-6(9) 6-4", "3", "Thomas Fancutt", "750", "", "", "R", "23.022587269", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "", "", "", "2018-M-FU-AUS-02A-2018-024", "", "2", "2"],
          ["20180305", "Australia F2", "Grass", "S", "W", "266", "2", "", "R32", "6-1 6-4", "3", "Darren K Polkinghorne", "1378", "", "", "U", "25.0184804928", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-AUS-02A-2018-016", "", "1", "1"],
          ["20180226", "Yokohama CH", "Hard", "C", "L", "249", "", "", "R32", "7-6(8) 6-7(1) 6-4", "3", "Hiroyasu Ehara", "368", "", "Q", "R", "26.6940451745", "", "JPN", "0", "167", "7", "5", "127", "76", "47", "27", "17", "12", "18", "1", "5", "123", "105", "64", "8", "17", "8", "13", "2", "", "", "", "2018-6626-284", "", "1", "1"],
          ["20180219", "Kyoto CH", "Hard", "C", "L", "253", "", "", "R16", "6-4 6-1", "3", "Go Soeda", "156", "3", "", "R", "33.4565366188", "178", "JPN", "0", "77", "7", "3", "54", "35", "23", "6", "9", "4", "8", "2", "1", "66", "43", "32", "10", "8", "7", "7", "2", "", "", "", "2018-0091-291", "", "2", "2"],
          ["20180219", "Kyoto CH", "Hard", "C", "W", "253", "", "", "R32", "6-3 6-3", "3", "Sora Fukuda", "411", "", "WC", "L", "20.3805612594", "", "JPN", "0", "61", "10", "2", "46", "36", "32", "6", "9", "1", "1", "1", "4", "61", "36", "25", "9", "9", "2", "5", "2", "", "", "", "2018-0091-280", "", "1", "1"],
          ["20180205", "Launceston CH", "Hard", "C", "L", "249", "", "", "R16", "1-6 7-6(6) 7-6(4)", "3", "Andrew Harris", "439", "", "WC", "R", "23.9178644764", "", "AUS", "0", "168", "15", "8", "115", "72", "48", "19", "16", "9", "13", "0", "2", "119", "80", "45", "19", "15", "9", "15", "", "", "", "", "2018-7203-288", "", "2", "2"],
          ["20180205", "Launceston CH", "Hard", "C", "W", "249", "", "", "R32", "7-6(3) 6-1", "3", "Lucas Catarina", "365", "", "LL", "R", "21.4455852156", "", "MON", "0", "98", "3", "2", "61", "47", "34", "6", "9", "2", "4", "2", "2", "72", "40", "23", "14", "10", "9", "14", "", "", "", "", "2018-7203-275", "", "1", "1"],
          ["20180129", "Burnie CH", "Hard", "C", "L", "263", "6", "", "QF", "2-6 6-2 6-3", "3", "Yoshihito Nishioka", "170", "2", "", "L", "22.340862423", "", "JPN", "0", "105", "5", "4", "97", "65", "37", "15", "13", "4", "10", "0", "1", "66", "46", "29", "12", "12", "6", "10", "2", "", "", "", "2018-5018-294", "", "3", "3"],
          ["20180129", "Burnie CH", "Hard", "C", "W", "263", "6", "", "R16", "2-6 7-6(7) 6-1", "3", "Luke Saville", "575", "", "Q", "R", "23.9917864476", "", "AUS", "0", "121", "2", "4", "92", "70", "43", "12", "13", "5", "8", "2", "5", "92", "56", "34", "18", "14", "1", "5", "2", "", "", "", "2018-5018-287", "", "2", "2"],
          ["20180129", "Burnie CH", "Hard", "C", "W", "263", "6", "", "R32", "6-7(5) 7-6(4) 6-2", "3", "Brydan Klein", "320", "", "", "R", "28.0793976728", "183", "AUS", "0", "203", "6", "13", "120", "71", "54", "26", "16", "5", "6", "3", "7", "124", "80", "58", "20", "16", "10", "13", "2", "", "", "", "2018-5018-273", "", "1", "1"],
          ["20180101", "Playford CH", "Hard", "C", "L", "226", "", "", "R32", "7-6(5) 6-3", "3", "Jason Kubler", "341", "", "Q", "R", "24.6214921287", "", "AUS", "0", "90", "11", "4", "61", "36", "28", "12", "10", "1", "3", "1", "6", "63", "44", "36", "11", "11", "2", "3", "2", "", "", "", "2018-7841-272", "", "1", "1"],
          ["20171120", "Hua Hin CH", "Hard", "C", "L", "290", "", "", "F", "6-2 6-2", "3", "John Millman", "165", "8", "", "R", "28.43531828", "183", "AUS", "0", "83", "1", "5", "66", "36", "19", "13", "8", "4", "9", "0", "1", "51", "31", "23", "9", "8", "0", "1", "2", "", "", "0", "2017-7387-300", "", "", ""],
          ["20171120", "Hua Hin CH", "Hard", "C", "W", "290", "", "", "SF", "6-3 6-3", "3", "Go Soeda", "166", "6", "", "R", "33.2073922", "178", "JPN", "0", "66", "4", "3", "49", "27", "21", "13", "9", "1", "2", "1", "2", "54", "38", "21", "8", "9", "5", "9", "2", "", "", "1", "2017-7387-299", "", "", ""],
          ["20171120", "Hua Hin CH", "Hard", "C", "W", "290", "", "", "QF", "1-6 6-4 6-3", "3", "Edan Leshem", "281", "", "", "U", "20.67351129", "", "ISR", "0", "103", "11", "2", "72", "47", "31", "15", "13", "1", "4", "3", "3", "79", "43", "34", "14", "13", "0", "3", "", "", "", "1", "2017-7387-296", "", "3", "3"],
          ["20171120", "Hua Hin CH", "Hard", "C", "W", "290", "", "", "R16", "4-6 6-1 1-0 RET", "3", "Nikola Milojevic", "153", "5", "", "U", "22.42299795", "", "SRB", "0", "82", "7", "4", "51", "31", "18", "12", "9", "3", "6", "5", "1", "59", "29", "15", "13", "9", "6", "11", "", "", "", "", "2017-7387-290", "", "2", "2"],
          ["20171120", "Hua Hin CH", "Hard", "C", "W", "290", "", "", "R32", "7-6(3) 6-4", "3", "Alex Bolt", "192", "", "", "L", "24.8733744", "", "AUS", "0", "86", "4", "5", "72", "45", "35", "15", "11", "6", "7", "8", "2", "61", "28", "22", "18", "11", "2", "4", "2", "", "", "0", "2017-7387-279", "", "1", "1"],
          ["20171113", "Toyota CH", "Hard", "C", "L", "309", "", "", "QF", "3-6 6-3 7-5", "3", "Calvin Hemery", "169", "7", "", "R", "22.7926078", "", "FRA", "0", "113", "10", "5", "92", "52", "39", "23", "15", "5", "7", "10", "6", "86", "57", "48", "14", "15", "2", "3", "2", "", "", "0", "2017-4042-297", "", "3", "3"],
          ["20171113", "Toyota CH", "Hard", "C", "W", "309", "", "", "R16", "6-3 6-3", "3", "Shintaro Imai", "392", "", "WC", "U", "24.183436", "", "JPN", "0", "61", "6", "3", "47", "25", "21", "14", "9", "2", "3", "2", "6", "50", "24", "18", "8", "9", "0", "4", "", "", "", "1", "2017-4042-293", "", "2", "2"],
          ["20171113", "Toyota CH", "Hard", "C", "W", "309", "", "", "R32", "6-3 6-4", "3", "Hiroki Moriya", "341", "", "", "R", "27.07734428", "", "JPN", "0", "63", "7", "1", "55", "39", "30", "12", "10", "3", "3", "1", "3", "55", "35", "25", "10", "9", "4", "6", "2", "", "", "1", "2017-4042-284", "", "1", "1"],
          ["20171030", "Canberra CH", "Hard", "C", "L", "312", "", "", "R32", "6-7(5) 6-3 6-2", "3", "Maverick Banes", "270", "", "", "R", "25.55509925", "", "AUS", "0", "125", "11", "7", "90", "53", "36", "15", "14", "2", "8", "4", "3", "88", "63", "45", "12", "15", "3", "6", "2", "", "", "0", "2017-7586-271", "", "1", "1"],
          ["20171023", "Traralgon CH", "Hard", "C", "L", "312", "", "", "R16", "6-2 6-2", "3", "Jason Kubler", "615", "", "Q", "R", "24.42984257", "", "AUS", "0", "78", "2", "3", "54", "27", "16", "9", "8", "3", "8", "2", "3", "50", "29", "20", "14", "8", "1", "2", "2", "", "", "0", "2017-6865-288", "", "2", "2"],
          ["20171023", "Traralgon CH", "Hard", "C", "W", "312", "", "", "R32", "6-0 6-3", "3", "Matthew Dellavedova", "1438", "", "WC", "U", "17.39904175", "", "AUS", "0", "77", "5", "2", "39", "18", "17", "13", "8", "1", "2", "3", "2", "66", "37", "21", "8", "7", "5", "10", "", "", "", "1", "2017-6865-275", "", "1", "1"],
          ["20171009", "Australia F7", "Hard", "S", "L", "319", "", "", "R16", "6-7(6) 6-2 6-3", "3", "Nathan Pasha", "626", "", "", "U", "25.234770705", "", "USA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2017-M-FU-AUS-07A-2017-023", "", "2", "2"],
          ["20171009", "Australia F7", "Hard", "S", "W", "319", "", "", "R32", "6-3 6-2", "3", "Jesse Delaney", "", "", "Q", "U", "18.9021218344", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2017-M-FU-AUS-07A-2017-013", "", "1", "1"],
          ["20170731", "Lexington CH", "Hard", "C", "L", "252", "7", "", "R32", "4-6 7-6(5) 6-2", "3", "Cameron Norrie", "199", "", "SE", "L", "21.93839836", "", "NZL", "0", "134", "13", "8", "92", "47", "37", "24", "15", "2", "5", "4", "6", "121", "76", "52", "25", "15", "11", "13", "2", "", "", "1", "2017-0586-282", "", "1", "1"],
          ["20170724", "Binghamton CH", "Hard", "C", "L", "228", "7", "", "R32", "6-4 5-7 6-2", "3", "Dominik Koepfer", "336", "", "", "U", "23.23613963", "", "GER", "0", "106", "7", "3", "91", "61", "43", "12", "15", "3", "6", "3", "2", "86", "53", "37", "24", "15", "1", "2", "2", "", "", "0", "2017-0670-282", "", "1", "1"],
          ["20170710", "Winnetka CH", "Hard", "C", "L", "211", "", "", "R32", "7-5 3-6 6-3", "3", "Jc Aragone", "660", "", "WC", "R", "22.03422313", "", "USA", "0", "122", "16", "11", "90", "47", "38", "19", "15", "2", "5", "3", "4", "113", "67", "46", "23", "15", "13", "15", "2", "", "", "0", "2017-0228-276", "", "1", "1"],
          ["20170703", "Wimbledon", "Grass", "G", "L", "210", "", "", "R128", "4-6 6-3 7-6(4) 7-6(5)", "5", "Thiago Monteiro", "100", "", "", "L", "23.0910335387", "", "BRA", "0", "186", "15", "8", "138", "78", "64", "33", "21", "7", "9", "8", "1", "152", "103", "82", "25", "22", "6", "8", "2", "", "", "", "2017-540-118", "", "1", "1"],
          ["20170619", "Ilkley CH", "Grass", "C", "L", "198", "", "", "Q1", "4-6 6-1 7-6(2)", "3", "Matthew Ebden", "271", "", "", "R", "29.5633128", "188", "AUS", "0", "103", "11", "1", "87", "53", "36", "17", "14", "0", "2", "6", "7", "97", "61", "47", "19", "15", "0", "1", "2", "", "", "", "2017-9005-241", "", "", ""],
          ["20170612", "Nottingham CH", "Grass", "C", "L", "182", "", "", "R32", "6-4 6-4", "3", "Marc Polmans", "175", "", "", "U", "20.11225188", "", "AUS", "0", "81", "8", "4", "73", "48", "28", "13", "10", "4", "8", "0", "1", "55", "35", "25", "12", "10", "1", "3", "", "20170612-M-Nottingham_CH-R32-Andrew_Whittington-Marc_Polmans.html", "", "0", "2017-7740-276", "", "1", "1"],
          ["20170605", "Surbiton CH", "Grass", "C", "L", "180", "", "LL", "R16", "6-3 6-7(5) 6-3", "3", "Reilly Opelka", "151", "", "", "U", "19.75085558", "", "USA", "0", "107", "8", "1", "89", "55", "40", "21", "14", "1", "3", "18", "5", "92", "60", "46", "22", "16", "1", "1", "", "", "", "1", "2017-7297-291", "", "2", "2"],
          ["20170605", "Surbiton CH", "Grass", "C", "W", "180", "", "LL", "R32", "7-6(4) 4-6 7-5", "3", "Taylor Harry Fritz", "133", "", "", "R", "19.58384668", "", "USA", "0", "133", "10", "3", "109", "75", "58", "16", "17", "8", "11", "3", "7", "116", "76", "56", "19", "17", "10", "13", "2", "", "", "1", "2017-7297-281", "", "1", "1"],
          ["20170605", "Surbiton CH", "Grass", "C", "L", "180", "6", "", "Q3", "6-7(6) 6-3 6-4", "3", "Roberto Quiroz", "236", "", "", "L", "25.26214921", "", "ECU", "0", "110", "10", "7", "94", "59", "45", "18", "15", "5", "7", "6", "2", "99", "70", "54", "18", "16", "0", "0", "2", "", "", "", "2017-7297-254", "", "", ""],
          ["20170605", "Surbiton CH", "Grass", "C", "W", "180", "6", "", "Q2", "7-6(5) 6-4", "3", "Marc Polmans", "189", "", "", "U", "20.07392197", "", "AUS", "0", "98", "8", "5", "78", "46", "36", "14", "11", "4", "6", "3", "3", "77", "54", "34", "12", "11", "5", "8", "", "", "", "", "2017-7297-249", "", "", ""],
          ["20170605", "Surbiton CH", "Grass", "C", "W", "180", "6", "", "Q1", "6-4 7-6(5)", "3", "Luke Bambridge", "633", "", "WC", "R", "22.35181383", "", "GBR", "0", "79", "7", "4", "76", "55", "47", "7", "11", "5", "5", "8", "3", "72", "41", "35", "14", "11", "3", "4", "2", "", "", "", "2017-7297-239", "", "", ""],
          ["20170424", "Anning CH", "Clay", "C", "L", "177", "", "", "R16", "2-6 6-4 6-2", "3", "Di Wu", "233", "", "", "R", "25.60985626", "", "CHN", "0", "102", "7", "3", "83", "51", "35", "15", "13", "8", "11", "4", "1", "79", "44", "32", "21", "13", "2", "4", "2", "", "", "0", "2017-6572-288", "", "2", "2"],
          ["20170424", "Anning CH", "Clay", "C", "W", "177", "", "", "R32", "6-3 2-6 7-5", "3", "Kimmer Coppejans", "171", "", "", "R", "23.20876112", "", "BEL", "0", "126", "18", "13", "107", "61", "47", "21", "15", "11", "14", "4", "5", "88", "49", "37", "17", "14", "6", "9", "2", "", "", "1", "2017-6572-275", "", "1", "1"],
          ["20170417", "Qingdao CH", "Clay", "C", "L", "176", "", "", "R32", "6-0 6-0", "3", "Quentin Halys", "143", "5", "", "R", "20.47364819", "", "FRA", "0", "", "1", "6", "37", "21", "10", "1", "6", "5", "11", "2", "3", "38", "25", "19", "9", "6", "2", "2", "2", "", "", "", "2017-7555-282", "", "1", "1"],
          ["20170227", "Yokohama CH", "Hard", "C", "L", "168", "8", "", "QF", "6-4 6-4", "3", "Soon Woo Kwon", "301", "", "Q", "R", "19.23887748", "", "KOR", "0", "94", "6", "4", "71", "44", "26", "12", "10", "4", "8", "2", "0", "67", "35", "20", "21", "10", "8", "10", "2", "", "", "0", "2017-6626-294", "", "3", "3"],
          ["20170227", "Yokohama CH", "Hard", "C", "W", "168", "8", "", "R16", "6-4 7-6(5)", "3", "Takuto Niki", "395", "", "Q", "U", "29.3798768", "", "JPN", "0", "104", "4", "3", "88", "64", "44", "8", "11", "6", "9", "0", "2", "66", "43", "25", "13", "11", "2", "6", "", "", "", "1", "2017-6626-287", "", "2", "2"],
          ["20170227", "Yokohama CH", "Hard", "C", "W", "168", "8", "", "R32", "6-7(5) 6-4 6-2", "3", "Sora Fukuda", "746", "", "WC", "L", "19.40314853", "", "JPN", "0", "137", "3", "1", "87", "56", "37", "20", "15", "3", "6", "2", "4", "106", "72", "38", "20", "15", "10", "16", "2", "", "", "1", "2017-6626-273", "", "1", "1"],
          ["20170220", "Kyoto CH", "Hard", "C", "L", "163", "5", "", "R32", "6-4 7-6(6)", "3", "Ti Chen", "251", "", "", "R", "33.3853525", "183", "TPE", "0", "88", "19", "4", "70", "39", "34", "12", "11", "2", "4", "3", "1", "75", "48", "31", "17", "11", "4", "5", "2", "", "", "0", "2017-0091-273", "", "1", "1"],
          ["20170206", "Launceston CH", "Hard", "C", "L", "169", "4", "", "QF", "5-7 6-1 6-3", "3", "Noah Rubin", "196", "7", "", "R", "20.96098563", "", "USA", "0", "122", "10", "9", "105", "66", "43", "12", "14", "12", "18", "3", "3", "70", "38", "29", "20", "14", "2", "5", "2", "", "", "0", "2017-7203-295", "", "3", "3"],
          ["20170206", "Launceston CH", "Hard", "C", "W", "169", "4", "", "R16", "6-4 3-6 6-3", "3", "Brydan Klein", "282", "", "", "R", "27.10198494", "183", "AUS", "0", "114", "14", "6", "73", "40", "33", "21", "14", "0", "1", "8", "3", "83", "49", "40", "16", "14", "6", "8", "2", "", "", "0", "2017-7203-288", "", "2", "2"],
          ["20170206", "Launceston CH", "Hard", "C", "W", "169", "4", "", "R32", "1-6 7-6(1) 6-3", "3", "Blaz Rola", "254", "", "", "L", "26.34086242", "", "SLO", "0", "129", "6", "5", "111", "70", "50", "20", "15", "4", "7", "9", "1", "74", "46", "34", "19", "13", "2", "3", "2", "", "", "1", "2017-7203-274", "", "1", "1"],
          ["20170130", "Burnie CH", "Hard", "C", "L", "169", "3", "", "R32", "6-7(5) 6-4 6-4", "3", "Blaz Rola", "260", "", "", "L", "26.32169747", "", "SLO", "0", "164", "2", "8", "119", "70", "47", "24", "16", "8", "12", "4", "3", "119", "86", "55", "18", "16", "7", "9", "2", "", "", "1", "2017-5018-274", "", "1", "1"],
          ["20170116", "Australian Open", "Hard", "G", "L", "194", "", "", "R64", "6-4 6-4 6-4", "5", "Ivo Karlovic", "21", "20", "", "R", "37.8836413415", "208", "CRO", "0", "120", "5", "6", "92", "46", "35", "23", "15", "7", "10", "19", "7", "92", "52", "44", "23", "15", "5", "5", "1", "", "", "", "2017-580-190", "", "2", "2"],
          ["20170116", "Australian Open", "Hard", "G", "W", "194", "", "", "R128", "6-4 4-6 6-2 6-3", "5", "Adam Pavlasek", "86", "", "", "R", "22.2751540041", "", "CZE", "0", "145", "12", "10", "112", "65", "49", "26", "19", "5", "7", "13", "3", "107", "66", "47", "16", "18", "3", "9", "2", "", "", "", "2017-580-153", "", "1", "1"],
          ["20161024", "Suzhou CH", "Hard", "C", "L", "178", "8", "", "R16", "6-4 7-6(8)", "3", "Andrea Arnaboldi", "276", "", "", "L", "28.8268309377", "", "ITA", "0", "102", "8", "3", "65", "38", "31", "15", "11", "1", "2", "3", "2", "78", "43", "31", "23", "11", "4", "4", "1", "", "", "0", "2016-7353-292", "", "2", "2"],
          ["20161024", "Suzhou CH", "Hard", "C", "W", "178", "8", "", "R32", "6-0 6-3", "3", "Rigele Te", "691", "", "WC", "U", "19.0417522245", "", "CHN", "0", "56", "2", "1", "52", "34", "23", "13", "8", "1", "1", "2", "2", "35", "17", "9", "6", "7", "0", "4", "", "", "", "1", "2016-7353-282", "", "1", "1"],
          ["20161017", "Nongbo CH", "Hard", "C", "L", "175", "", "", "R32", "7-6(4) 7-5", "3", "Hiroki Moriya", "189", "", "", "R", "26.0041067762", "", "JPN", "0", "115", "4", "2", "75", "53", "37", "10", "12", "5", "8", "1", "0", "85", "60", "42", "15", "12", "4", "6", "2", "", "", "0", "2016-7343-280", "", "1", "1"],
          ["20161010", "Ho Chi Minh CH", "Hard", "C", "L", "175", "", "", "R32", "6-2 6-4", "3", "Saketh Myneni", "154", "", "", "R", "28.977412731", "", "IND", "0", "88", "4", "8", "73", "45", "29", "9", "9", "9", "13", "9", "1", "63", "37", "27", "14", "9", "3", "4", "2", "", "", "0", "2016-7333-280", "", "1", "1"],
          ["20160926", "Shenzhen", "Hard", "A", "L", "190", "", "Q", "R16", "6-1 6-0", "3", "Richard Gasquet", "18", "3", "", "R", "30.2751540041", "185", "FRA", "0", "51", "3", "4", "39", "21", "10", "5", "6", "2", "7", "5", "1", "38", "30", "26", "4", "7", "1", "1", "1", "", "", "1", "2016-6967-288", "", "2", "2"],
          ["20160926", "Shenzhen", "Hard", "A", "W", "190", "", "Q", "R32", "2-6 7-6(10) 6-2", "3", "Luca Vanni", "172", "", "Q", "R", "31.3127994524", "", "ITA", "0", "140", "9", "6", "85", "51", "41", "17", "14", "2", "5", "10", "3", "98", "63", "45", "17", "14", "6", "9", "2", "", "", "1", "2016-6967-275", "", "1", "1"],
          ["20160926", "Shenzhen", "Hard", "A", "W", "190", "", "", "Q2", "7-6(7) 6-3", "3", "Thomas Fabbiano", "114", "2", "", "R", "27.3374401095", "", "ITA", "0", "101", "12", "0", "72", "45", "38", "14", "10", "6", "6", "5", "4", "78", "51", "33", "15", "11", "2", "4", "2", "", "", "1", "2016-6967-253", "", "", ""],
          ["20160926", "Shenzhen", "Hard", "A", "W", "190", "", "", "Q1", "3-6 7-6(5) 2-0 RET", "3", "Tatsuma Ito", "142", "5", "", "R", "28.3586584531", "180", "JPN", "0", "118", "6", "5", "78", "39", "32", "16", "12", "3", "6", "6", "5", "68", "35", "27", "14", "11", "1", "3", "2", "", "", "", "2016-6967-247", "", "", ""],
          ["20160919", "Kaohsiung CH", "Hard", "C", "L", "193", "", "", "R32", "7-6(4) 6-2", "3", "Yuuya Kibi", "259", "", "Q", "U", "30.160164271", "", "JPN", "0", "92", "3", "2", "66", "39", "28", "14", "10", "3", "5", "1", "4", "78", "51", "37", "16", "10", "3", "3", "", "", "", "0", "2016-6490-272", "", "1", "1"],
          ["20160808", "Gatineau CH", "Hard", "C", "L", "181", "7", "", "R32", "6-7(2) 6-2 7-6(0)", "3", "Filip Peliwo", "468", "", "WC", "R", "22.5215605749", "", "CAN", "0", "160", "5", "8", "116", "67", "43", "18", "16", "8", "14", "2", "8", "115", "74", "53", "16", "16", "8", "12", "2", "", "", "0", "2016-7557-282", "", "1", "1"],
          ["20160801", "Granby CH", "Hard", "C", "L", "188", "", "", "QF", "6-0 7-6(5)", "3", "Francis Tiafoe", "149", "4", "", "R", "18.5297741273", "", "USA", "0", "82", "4", "3", "56", "41", "24", "4", "9", "4", "8", "3", "1", "65", "39", "25", "16", "9", "4", "5", "2", "", "", "0", "2016-0877-295", "", "3", "3"],
          ["20160801", "Granby CH", "Hard", "C", "W", "188", "", "", "R16", "6-7(5) 6-2 6-4", "3", "Peter Polansky", "209", "", "", "R", "28.128678987", "180", "CAN", "0", "142", "8", "8", "92", "58", "47", "16", "15", "2", "3", "11", "1", "111", "75", "52", "16", "15", "11", "15", "2", "", "", "1", "2016-0877-289", "", "2", "2"],
          ["20160801", "Granby CH", "Hard", "C", "W", "188", "", "", "R32", "7-6(6) 6-2", "3", "Alejandro Gonzalez", "156", "5", "", "R", "27.4798083504", "", "COL", "0", "96", "5", "3", "58", "38", "33", "9", "10", "1", "3", "3", "2", "57", "39", "27", "6", "10", "1", "5", "2", "", "", "1", "2016-0877-277", "", "1", "1"],
          ["20160725", "Lexington CH", "Hard", "C", "L", "207", "", "", "SF", "6-1 6-7(1) 6-1", "3", "Ernesto Escobedo", "264", "", "", "R", "20.0574948665", "", "USA", "0", "110", "5", "5", "80", "44", "25", "16", "12", "8", "14", "2", "2", "88", "58", "37", "17", "14", "2", "4", "2", "20160730-M-Lexington_CH-SF-Ernesto_Escobedo-Andrew_Whittington.html", "", "1", "2016-M055-298", "", "", ""],
          ["20160725", "Lexington CH", "Hard", "C", "W", "207", "", "", "QF", "7-5 5-7 6-1", "3", "Daniel Nguyen", "235", "", "", "U", "25.7741273101", "", "USA", "0", "157", "5", "8", "98", "54", "33", "25", "15", "6", "10", "1", "4", "92", "59", "35", "14", "16", "4", "11", "", "", "", "0", "2016-M055-294", "", "3", "3"],
          ["20160725", "Lexington CH", "Hard", "C", "W", "207", "", "", "R16", "7-6(4) 4-6 6-4", "3", "Ramkumar Ramanathan", "196", "", "", "R", "21.711156742", "", "IND", "0", "161", "5", "10", "105", "62", "47", "18", "16", "5", "9", "5", "6", "102", "55", "35", "29", "16", "4", "8", "2", "", "", "1", "2016-M055-287", "", "2", "2"],
          ["20160725", "Lexington CH", "Hard", "C", "W", "207", "", "", "R32", "6-3 6-2", "3", "Bjorn Fratangelo", "115", "5", "", "R", "23.0171115674", "", "USA", "0", "77", "3", "3", "59", "28", "23", "18", "9", "3", "3", "4", "2", "50", "21", "14", "14", "8", "4", "7", "2", "", "", "1", "2016-M055-273", "", "1", "1"],
          ["20160718", "Gimcheon CH", "Hard", "C", "L", "241", "6", "", "F", "3-6 7-6(6) 5-1 RET", "3", "Max Purcell", "762", "", "Q", "U", "18.2915811088", "", "AUS", "0", "148", "5", "7", "103", "55", "41", "23", "14", "10", "12", "4", "2", "86", "51", "39", "21", "13", "5", "6", "", "", "", "", "2016-7011-300", "", "", ""],
          ["20160718", "Gimcheon CH", "Hard", "C", "W", "241", "6", "", "SF", "6-1 7-6(3)", "3", "Zhe Li", "249", "7", "", "R", "29.826146475", "", "CHN", "0", "88", "6", "3", "62", "33", "24", "18", "10", "2", "3", "2", "4", "63", "40", "27", "9", "9", "3", "6", "2", "", "", "1", "2016-7011-299", "", "", ""],
          ["20160718", "Gimcheon CH", "Hard", "C", "W", "241", "6", "", "QF", "4-6 7-6(3) 7-5", "3", "Takuto Niki", "572", "", "", "U", "28.7665982204", "", "JPN", "0", "157", "14", "13", "116", "69", "52", "20", "17", "8", "12", "4", "2", "95", "63", "45", "19", "17", "5", "9", "", "", "", "1", "2016-7011-297", "", "3", "3"],
          ["20160718", "Gimcheon CH", "Hard", "C", "W", "241", "6", "", "R16", "7-6(4) 2-0 RET", "3", "Temur Ismailov", "525", "", "", "R", "21.5085557837", "", "UZB", "0", "104", "0", "4", "58", "32", "20", "16", "7", "3", "5", "1", "3", "57", "29", "16", "16", "7", "5", "8", "2", "", "", "", "2016-7011-292", "", "2", "2"],
          ["20160718", "Gimcheon CH", "Hard", "C", "W", "241", "6", "", "R32", "6-3 6-0", "3", "Uisung Park", "", "", "WC", "R", "15.8056125941", "", "KOR", "0", "68", "4", "3", "55", "33", "27", "8", "8", "3", "4", "0", "2", "38", "19", "11", "5", "7", "3", "8", "2", "", "", "1", "2016-7011-282", "", "1", "1"],
          ["20160620", "Hong Kong F3", "Hard", "S", "W", "260", "1", "", "F", "6-3 6-2", "3", "Jumpei Yamasaki", "936", "", "Q", "R", "18.9678302533", "", "JPN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "1", "2016-M-FU-HKG-03A-2016-031", "", "", ""],
          ["20160620", "Hong Kong F3", "Hard", "S", "W", "260", "1", "", "SF", "6-3 6-4", "3", "Sami Reinwein", "782", "", "", "U", "24.0602327173", "", "GER", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2016-M-FU-HKG-03A-2016-029", "", "", ""],
          ["20160620", "Hong Kong F3", "Hard", "S", "W", "260", "1", "", "QF", "6-4 7-5", "3", "Bowen Ouyang", "625", "5", "", "L", "24.0876112252", "", "CHN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2016-M-FU-HKG-03A-2016-025", "", "3", "3"],
          ["20160620", "Hong Kong F3", "Hard", "S", "W", "260", "1", "", "R16", "6-3 7-6(6)", "3", "Wishaya Trongcharoenchaikul", "1033", "", "Q", "R", "21.2019164956", "", "THA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2016-M-FU-HKG-03A-2016-017", "", "2", "2"],
          ["20160620", "Hong Kong F3", "Hard", "S", "W", "260", "1", "", "R32", "6-2 6-2", "3", "Siu Fai Kelvin Lam", "", "", "WC", "R", "22.4531143053", "", "HKG", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2016-M-FU-HKG-03A-2016-001", "", "1", "1"],
          ["20160613", "Hong Kong F2", "Hard", "S", "W", "282", "1", "", "F", "6-3 6-0", "3", "Daniel Nolan", "878", "", "Q", "U", "19.2553045859", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "0", "2016-M-FU-HKG-02A-2016-031", "", "", ""],
          ["20160613", "Hong Kong F2", "Hard", "S", "W", "282", "1", "", "SF", "6-0 6-3", "3", "Yecong He", "522", "5", "", "U", "22.3244353183", "", "CHN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2016-M-FU-HKG-02A-2016-029", "", "", ""],
          ["20160613", "Hong Kong F2", "Hard", "S", "W", "282", "1", "", "QF", "6-1 6-2", "3", "Chuhan Wang", "582", "7", "", "R", "24.3011635866", "", "CHN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "1", "2016-M-FU-HKG-02A-2016-025", "", "3", "3"],
          ["20160613", "Hong Kong F2", "Hard", "S", "W", "282", "1", "", "R16", "6-3 6-2", "3", "Rishab Agarwal", "933", "", "", "R", "20.5229295003", "", "IND", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2016-M-FU-HKG-02A-2016-017", "", "2", "2"],
          ["20160613", "Hong Kong F2", "Hard", "S", "W", "282", "1", "", "R32", "5-7 6-3 6-2", "3", "Anthony Jackie Tang", "", "", "WC", "U", "17.5468856947", "", "HKG", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2016-M-FU-HKG-02A-2016-001", "", "1", "1"],
          ["20160606", "Hong Kong F1", "Hard", "S", "W", "284", "1", "", "F", "7-5 6-3", "3", "Yecong He", "523", "6", "", "U", "22.3052703628", "", "CHN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2016-M-FU-HKG-01A-2016-031", "", "", ""],
          ["20160606", "Hong Kong F1", "Hard", "S", "W", "284", "1", "", "SF", "4-3 RET", "3", "Liang Chi Huang", "404", "3", "", "R", "24.2464065708", "", "TPE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2016-M-FU-HKG-01A-2016-029", "", "", ""],
          ["20160606", "Hong Kong F1", "Hard", "S", "W", "284", "1", "", "QF", "6-3 6-4", "3", "Christopher Rungkat", "534", "7", "", "R", "26.392881588", "", "INA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2016-M-FU-HKG-01A-2016-025", "", "3", "3"],
          ["20160606", "Hong Kong F1", "Hard", "S", "W", "284", "1", "", "R16", "6-2 6-3", "3", "Chun Hun Wong", "1575", "", "WC", "R", "20.6023271732", "", "HKG", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "1", "2016-M-FU-HKG-01A-2016-017", "", "2", "2"],
          ["20160606", "Hong Kong F1", "Hard", "S", "W", "284", "1", "", "R32", "6-3 7-6(3)", "3", "Jeson Patrombon", "1147", "", "Q", "R", "23.1950718686", "", "PHI", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2016-M-FU-HKG-01A-2016-001", "", "1", "1"],
          ["20160530", "Japan F6", "Clay", "S", "L", "307", "3", "", "R16", "6-3 6-3", "3", "Gengo Kikuchi", "780", "", "", "U", "24.5420944559", "", "JPN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "0", "2016-M-FU-JPN-06A-2016-019", "", "2", "2"],
          ["20160530", "Japan F6", "Clay", "S", "W", "307", "3", "", "R32", "3-6 6-4 6-4", "3", "Kaito Uesugi", "", "", "WC", "U", "20.9746748802", "", "JPN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2016-M-FU-JPN-06A-2016-005", "", "1", "1"],
          ["20160523", "Guam F1", "Hard", "S", "W", "307", "1", "", "F", "7-6(6) 7-6(2)", "3", "Shuichi Sekiguchi", "362", "2", "", "R", "24.8569472964", "", "JPN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "1", "2016-M-FU-GUM-01A-2016-031", "", "", ""],
          ["20160523", "Guam F1", "Hard", "S", "W", "307", "1", "", "SF", "6-2 6-3", "3", "Deiton Baughman", "461", "4", "", "U", "20.0821355236", "", "USA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2016-M-FU-GUM-01A-2016-029", "", "", ""],
          ["20160523", "Guam F1", "Hard", "S", "W", "307", "1", "", "QF", "4-6 6-4 6-4", "3", "Takuto Niki", "518", "5", "", "U", "28.6132785763", "", "JPN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2016-M-FU-GUM-01A-2016-025", "", "3", "3"],
          ["20160523", "Guam F1", "Hard", "S", "W", "307", "1", "", "R16", "6-4 6-2", "3", "Koichi Sano", "1638", "", "Q", "U", "27.6687200548", "", "JPN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "0", "2016-M-FU-GUM-01A-2016-017", "", "2", "2"],
          ["20160523", "Guam F1", "Hard", "S", "W", "307", "1", "", "R32", "6-4 6-4", "3", "Ko Suzuki", "1131", "", "", "L", "24.8049281314", "", "JPN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "0", "2016-M-FU-GUM-01A-2016-001", "", "1", "1"],
          ["20160516", "Bangkok CH", "Hard", "C", "L", "306", "", "", "R32", "6-4 6-0", "3", "Lloyd Glasspool", "341", "", "Q", "U", "22.4887063655", "", "GBR", "0", "65", "4", "7", "50", "24", "13", "9", "8", "5", "10", "8", "2", "54", "39", "27", "7", "8", "2", "3", "", "", "", "", "2016-7498-275", "", "1", "1"],
          ["20160425", "Anning CH", "Clay", "C", "L", "326", "", "", "QF", "6-1 6-4", "3", "Mathias Bourgue", "193", "7", "", "R", "22.2669404517", "", "FRA", "0", "68", "1", "2", "48", "30", "15", "11", "8", "1", "4", "5", "0", "53", "37", "29", "9", "9", "2", "2", "2", "", "", "1", "2016-6572-297", "", "3", "3"],
          ["20160425", "Anning CH", "Clay", "C", "W", "326", "", "", "R16", "7-5 6-2", "3", "Yannick Hanfmann", "552", "", "Q", "U", "24.4490075291", "", "GER", "0", "65", "3", "5", "57", "37", "33", "12", "10", "4", "4", "6", "2", "58", "42", "28", "8", "10", "6", "9", "", "", "", "1", "2016-6572-293", "", "2", "2"],
          ["20160425", "Anning CH", "Clay", "C", "W", "326", "", "", "R32", "7-5 7-6(2)", "3", "Yoshihito Nishioka", "103", "1", "", "L", "20.5776865161", "", "JPN", "0", "103", "12", "5", "77", "44", "35", "21", "12", "4", "5", "1", "2", "69", "41", "31", "17", "12", "4", "6", "2", "", "", "1", "2016-6572-285", "", "1", "1"],
          ["20160418", "Nanjing CH", "Clay", "C", "L", "334", "", "Q", "R32", "6-4 7-6(4)", "3", "Aleksandr Nedovyesov", "209", "", "", "R", "29.1718001369", "", "KAZ", "0", "118", "1", "3", "74", "48", "33", "11", "11", "7", "10", "2", "1", "88", "62", "43", "13", "11", "9", "11", "2", "", "", "0", "2016-7492-272", "", "1", "1"],
          ["20160418", "Nanjing CH", "Clay", "C", "W", "334", "2", "", "Q3", "7-6(4) 6-2", "3", "Kaichi Uchida", "471", "7", "", "R", "21.6536618754", "", "JPN", "0", "79", "10", "2", "67", "49", "35", "9", "10", "4", "6", "2", "1", "60", "40", "23", "10", "10", "1", "5", "2", "", "", "", "2016-7492-268", "", "", ""],
          ["20160418", "Nanjing CH", "Clay", "C", "W", "334", "2", "", "Q2", "6-4 7-6(4)", "3", "Hsien Yin Peng", "", "", "", "U", "26.3216974675", "", "TPE", "0", "102", "4", "0", "59", "45", "35", "11", "11", "0", "0", "2", "5", "91", "53", "38", "17", "11", "9", "10", "", "", "", "", "2016-7492-263", "", "", ""],
          ["20160321", "Australia F4", "Clay", "S", "W", "449", "4", "", "F", "7-5 6-3", "3", "Christopher Oconnell", "502", "6", "", "U", "21.7987679671", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2016-M-FU-AUS-04A-2016-031", "", "", ""],
          ["20160321", "Australia F4", "Clay", "S", "W", "449", "4", "", "SF", "6-7(5) 6-1 6-4", "3", "Dayne Kelly", "398", "5", "", "U", "25.6618754278", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "", "", "1", "2016-M-FU-AUS-04A-2016-030", "", "", ""],
          ["20160321", "Australia F4", "Clay", "S", "W", "449", "4", "", "QF", "6-1 6-4", "3", "Marc Polmans", "809", "", "", "U", "18.8856947296", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2016-M-FU-AUS-04A-2016-027", "", "3", "3"],
          ["20160321", "Australia F4", "Clay", "S", "W", "449", "4", "", "R16", "7-5 7-6(6)", "3", "Steven De Waard", "934", "", "", "R", "24.8788501027", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2016-M-FU-AUS-04A-2016-022", "", "2", "2"],
          ["20160321", "Australia F4", "Clay", "S", "W", "449", "4", "", "R32", "7-6(2) 4-6 6-2", "3", "Mikalai Haliak", "", "", "Q", "R", "17.6016427105", "", "BLR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2016-M-FU-AUS-04A-2016-012", "", "1", "1"],
          ["20160314", "Australia F3", "Clay", "S", "W", "449", "5", "", "F", "6-2 6-3", "3", "Gavin Van Peperzeel", "279", "1", "", "R", "23.9397672827", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "1", "2016-M-FU-AUS-03A-2016-031", "", "", ""],
          ["20160314", "Australia F3", "Clay", "S", "W", "449", "5", "", "SF", "6-3 4-6 6-4", "3", "Christopher Oconnell", "492", "7", "", "U", "21.7604380561", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2016-M-FU-AUS-03A-2016-030", "", "", ""],
          ["20160314", "Australia F3", "Clay", "S", "W", "449", "5", "", "QF", "6-1 6-3", "3", "Aaron Addison", "1323", "", "", "R", "20.3175906913", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "0", "2016-M-FU-AUS-03A-2016-028", "", "3", "3"],
          ["20160314", "Australia F3", "Clay", "S", "W", "449", "5", "", "R16", "6-4 6-4", "3", "Blake Ellis", "1473", "", "WC", "U", "17.1663244353", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2016-M-FU-AUS-03A-2016-023", "", "2", "2"],
          ["20160314", "Australia F3", "Clay", "S", "W", "449", "5", "", "R32", "6-3 6-3", "3", "Tommaso Lago", "1162", "", "", "R", "23.909650924", "", "ITA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2016-M-FU-AUS-03A-2016-013", "", "1", "1"],
          ["20160229", "Australia F2", "Grass", "S", "L", "456", "5", "", "R16", "7-5 6-2", "3", "Steven De Waard", "989", "", "", "R", "24.8213552361", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "1", "2016-M-FU-AUS-02A-2016-023", "", "2", "2"],
          ["20160229", "Australia F2", "Grass", "S", "W", "456", "5", "", "R32", "6-0 6-7(6) 6-4", "3", "Cameron Edward Smith", "", "", "Q", "U", "", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2016-M-FU-AUS-02A-2016-013", "", "1", "1"],
          ["20160222", "Australia F1", "Hard", "S", "L", "458", "6", "", "QF", "6-2 6-3", "3", "Marc Polmans", "891", "", "", "U", "18.8090349076", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2016-M-FU-AUS-01A-2016-028", "", "3", "3"],
          ["20160222", "Australia F1", "Hard", "S", "W", "458", "6", "", "R16", "6-1 6-4", "3", "Zach Itzstein", "1507", "", "Q", "R", "27.4715947981", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2016-M-FU-AUS-01A-2016-023", "", "2", "2"],
          ["20160222", "Australia F1", "Hard", "S", "W", "458", "6", "", "R32", "7-5 6-2", "3", "Brandon Vescio", "", "", "Q", "U", "23.8028747433", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "0", "2016-M-FU-AUS-01A-2016-013", "", "1", "1"],
          ["20160201", "Launceston CH", "Hard", "C", "L", "450", "", "", "R32", "6-7(4) 7-6(5) 6-4", "3", "Max Purcell", "1014", "", "WC", "U", "17.8316221766", "", "AUS", "0", "142", "14", "4", "103", "67", "50", "19", "17", "2", "6", "7", "7", "125", "62", "46", "31", "17", "7", "10", "", "", "", "", "2016-7203-276", "", "1", "1"],
          ["20160111", "Canberra CH", "Hard", "C", "L", "476", "", "", "R16", "3-6 7-6(5) 6-4", "3", "Quentin Halys", "197", "", "", "R", "19.2087611225", "", "FRA", "0", "142", "5", "4", "103", "63", "49", "19", "16", "8", "11", "8", "11", "123", "75", "53", "23", "15", "5", "8", "2", "", "", "0", "2016-7393-290", "", "2", "2"],
          ["20160111", "Canberra CH", "Hard", "C", "W", "476", "", "", "R32", "7-5 6-7(1) 6-2", "3", "Nikoloz Basilashvili", "117", "", "", "R", "23.8822724162", "", "RUS", "0", "137", "11", "6", "110", "62", "49", "20", "16", "5", "7", "4", "9", "103", "50", "31", "30", "16", "6", "11", "2", "", "", "1", "2016-7393-279", "", "1", "1"],
          ["20160104", "Happy Valley CH", "Hard", "C", "L", "592", "", "Q", "SF", "6-0 6-2", "3", "Taylor Harry Fritz", "174", "8", "", "R", "18.1848049281", "", "USA", "0", "53", "4", "2", "42", "19", "12", "5", "7", "3", "8", "7", "3", "43", "21", "17", "13", "7", "0", "0", "2", "", "", "0", "2016-7182-298", "", "", ""],
          ["20160104", "Happy Valley CH", "Hard", "C", "W", "592", "", "Q", "QF", "6-3 6-3", "3", "Dennis Novak", "211", "", "", "R", "22.3518138261", "", "AUT", "0", "70", "2", "2", "62", "41", "30", "10", "9", "2", "2", "4", "3", "55", "38", "27", "5", "9", "3", "6", "2", "", "", "1", "2016-7182-294", "", "3", "3"],
          ["20160104", "Happy Valley CH", "Hard", "C", "W", "592", "", "Q", "R16", "7-5 6-3", "3", "Bradley Mousley", "559", "", "WC", "U", "20.0027378508", "", "AUS", "0", "75", "8", "4", "73", "46", "37", "15", "11", "4", "4", "6", "2", "50", "34", "24", "9", "10", "0", "2", "1", "", "", "1", "2016-7182-286", "", "2", "2"],
          ["20160104", "Happy Valley CH", "Hard", "C", "W", "592", "", "Q", "R32", "6-3 3-6 6-3", "3", "Bjorn Fratangelo", "128", "2", "", "R", "22.4613278576", "", "USA", "0", "94", "5", "4", "86", "57", "44", "14", "14", "4", "6", "2", "4", "65", "38", "29", "13", "13", "1", "4", "2", "", "", "1", "2016-7182-270", "", "1", "1"],
          ["20160104", "Happy Valley CH", "Hard", "C", "W", "592", "8", "", "Q3", "7-6(5) 6-2", "3", "Aleksandar Vukic", "718", "", "", "R", "19.7453798768", "", "AUS", "0", "91", "5", "5", "68", "40", "30", "15", "10", "2", "3", "4", "3", "69", "34", "27", "13", "10", "5", "8", "2", "", "", "", "2016-7182-268", "", "", ""],
          ["20160104", "Happy Valley CH", "Hard", "C", "W", "592", "8", "", "Q2", "7-6(9) 7-5", "3", "Blake Mott", "674", "", "", "U", "19.704312115", "", "AUS", "0", "96", "4", "0", "68", "38", "29", "20", "12", "0", "1", "2", "4", "68", "41", "33", "14", "12", "1", "3", "", "", "", "", "2016-7182-262", "", "", ""],
          ["20151102", "Canberra CH", "Hard", "C", "L", "520", "", "", "R32", "7-6(4) 6-3", "3", "Gavin Van Peperzeel", "278", "", "", "R", "23.5947980835", "", "AUS", "0", "", "7", "8", "102", "74", "48", "11", "11", "7", "10", "3", "0", "67", "45", "31", "14", "10", "1", "2", "2", "", "", "1", "2015-7393-010", "", "1", "1"],
          ["20151026", "Traralgon CH", "Hard", "C", "L", "520", "", "", "R32", "7-6(5) 6-4", "3", "Zhe Li", "265", "6", "", "R", "29.0978781656", "", "CHN", "0", "", "4", "2", "76", "58", "39", "10", "11", "0", "1", "2", "2", "68", "51", "41", "8", "11", "0", "0", "2", "", "", "1", "2015-6865-004", "", "1", "1"],
          ["20150907", "Shanghai CH", "Hard", "C", "L", "484", "", "Q", "R32", "6-2 6-1", "3", "Go Soeda", "111", "2", "", "R", "30.984257358", "178", "JPN", "0", "", "1", "3", "45", "25", "13", "7", "8", "1", "6", "2", "2", "53", "31", "22", "13", "7", "7", "7", "2", "", "", "0", "2015-6313-016", "", "1", "1"],
          ["20150831", "Bangkok CH", "Hard", "C", "L", "484", "", "Q", "R16", "7-5 4-2 RET", "3", "Somdev Devvarman", "152", "2", "", "R", "30.5434633812", "180", "IND", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-5047-024", "", "2", "2"],
          ["20150831", "Bangkok CH", "Hard", "C", "W", "484", "", "Q", "R32", "4-6 7-6(3) 6-2", "3", "Pruchya Isarow", "787", "", "WC", "R", "19.8740588638", "", "THA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "1", "2015-5047-015", "", "1", "1"],
          ["20150803", "USA F24", "Hard", "S", "L", "482", "", "", "QF", "6-4 6-1", "3", "Luke Saville", "220", "1", "", "R", "21.5003422313", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-M-FU-USA-24A-2015-025", "", "3", "3"],
          ["20150803", "USA F24", "Hard", "S", "W", "482", "", "", "R16", "6-3 6-3", "3", "Tom Jomby", "402", "7", "", "R", "24.4544832307", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-M-FU-USA-24A-2015-018", "", "2", "2"],
          ["20150803", "USA F24", "Hard", "S", "W", "482", "", "", "R32", "7-6(5) 6-1", "3", "Tim Kopinski", "", "", "WC", "U", "22.1683778234", "", "USA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2015-M-FU-USA-24A-2015-003", "", "1", "1"],
          ["20150720", "Granby CH", "Hard", "C", "L", "493", "", "Q", "R32", "6-3 6-2", "3", "Felix Auger Aliassime", "1237", "", "Q", "R", "14.945927447", "", "CAN", "0", "", "1", "2", "54", "35", "18", "9", "8", "2", "5", "1", "1", "60", "34", "22", "19", "9", "0", "0", "", "", "", "1", "2015-877-010", "", "1", "1"],
          ["20150713", "Newport Q", "Grass", "Q", "L", "494", "", "", "Q2", "6-1 4-6 7-5", "3", "Luke Saville", "224", "3", "", "R", "21.4428473648", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "0", "2015-37-021", "", "", ""],
          ["20150713", "Newport Q", "Grass", "Q", "W", "494", "", "", "Q1", "6-3 7-5", "3", "Tom Jomby", "406", "", "", "R", "24.3969883641", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-37-010", "", "", ""],
          ["20150706", "Winnetka CH", "Hard", "C", "L", "554", "", "Q", "R16", "3-6 6-1 6-2", "3", "Daniel Nguyen", "229", "", "", "U", "24.7008898015", "", "USA", "0", "", "1", "5", "71", "42", "27", "14", "12", "2", "6", "0", "7", "84", "46", "34", "21", "12", "4", "5", "", "", "", "0", "2015-228-023", "", "2", "2"],
          ["20150706", "Winnetka CH", "Hard", "C", "W", "554", "", "Q", "R32", "7-6(7) 6-2", "3", "Mackenzie Mcdonald", "563", "", "WC", "R", "20.2026009582", "", "USA", "0", "", "3", "5", "72", "50", "36", "7", "10", "4", "6", "1", "5", "72", "38", "25", "12", "10", "5", "9", "2", "", "", "1", "2015-228-013", "", "1", "1"],
          ["20150427", "An-Ning CH", "Clay", "C", "L", "490", "", "", "R16", "7-6(6) 6-4", "3", "James Duckworth", "89", "1", "", "R", "23.2635181383", "183", "AUS", "0", "91", "6", "2", "82", "49", "31", "19", "11", "8", "10", "3", "2", "58", "38", "33", "14", "11", "0", "1", "2", "", "", "1", "2015-6572-017", "", "2", "2"],
          ["20150427", "An-Ning CH", "Clay", "C", "W", "490", "", "", "R32", "6-1 6-4", "3", "Yuqing Ning", "1394", "", "WC", "R", "20.9664613279", "", "CHN", "0", "66", "3", "6", "65", "38", "30", "15", "9", "6", "6", "1", "0", "44", "28", "17", "8", "8", "3", "6", "2", "", "", "1", "2015-6572-002", "", "1", "1"],
          ["20150330", "Australia F5", "Clay", "S", "L", "500", "8", "", "QF", "6-7(7) 6-1 6-4", "3", "Peter Torebko", "250", "3", "", "R", "27.112936345", "", "GER", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-M-FU-AUS-05A-2015-027", "", "3", "3"],
          ["20150330", "Australia F5", "Clay", "S", "W", "500", "8", "", "R16", "5-7 6-3 6-4", "3", "Christopher Oconnell", "524", "", "", "U", "20.8021902806", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2015-M-FU-AUS-05A-2015-021", "", "2", "2"],
          ["20150330", "Australia F5", "Clay", "S", "W", "500", "8", "", "R32", "6-1 6-2", "3", "Chanchai Sookton Eng", "", "", "Q", "U", "18.5735797399", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2015-M-FU-AUS-05A-2015-009", "", "1", "1"],
          ["20150323", "Australia F4", "Clay", "S", "L", "500", "8", "", "R32", "6-4 6-3", "3", "Harry Bourchier", "619", "", "", "R", "19.1594798084", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-M-FU-AUS-04A-2015-009", "", "1", "1"],
          ["20150223", "Kyoto CH", "Hard", "C", "L", "472", "", "", "R32", "6-3 7-6(5)", "3", "Yuuya Kibi", "367", "", "", "U", "28.5886379192", "", "JPN", "0", "84", "5", "2", "64", "39", "28", "15", "10", "0", "2", "7", "2", "74", "42", "36", "15", "11", "2", "3", "", "", "", "1", "2015-91-015", "", "1", "1"],
          ["20150216", "New Delhi CH", "Hard", "C", "L", "477", "", "LL", "R32", "2-6 7-5 7-5", "3", "Egor Gerasimov", "260", "", "", "R", "22.264202601", "", "BLR", "0", "125", "9", "5", "98", "65", "45", "18", "16", "2", "5", "1", "3", "93", "63", "43", "18", "16", "6", "9", "2", "", "", "1", "2015-6961-015", "", "1", "1"],
          ["20150209", "Launceston CH", "Hard", "C", "L", "481", "", "", "R32", "5-7 6-4 6-0", "3", "Luke Saville", "166", "6", "", "R", "21.0212183436", "", "AUS", "0", "166", "6", "3", "111", "63", "36", "17", "14", "5", "14", "6", "3", "96", "51", "31", "20", "14", "9", "15", "2", "", "", "0", "2015-7203-013", "", "1", "1"],
          ["20150202", "Burnie CH", "Hard", "C", "L", "496", "", "Q", "R32", "6-2 6-1", "3", "Brydan Klein", "251", "", "", "R", "25.0896646133", "183", "AUS", "0", "71", "2", "3", "48", "29", "15", "7", "7", "6", "10", "2", "2", "47", "29", "24", "10", "8", "2", "2", "2", "", "", "1", "2015-5018-014", "", "1", "1"],
          ["20150105", "Happy Valley CH", "Hard", "C", "L", "523", "", "Q", "R16", "7-5 6-3", "3", "Marcos Baghdatis", "82", "2", "", "R", "29.5523613963", "183", "CYP", "0", "95", "4", "4", "78", "52", "36", "10", "11", "9", "13", "2", "1", "58", "31", "22", "19", "10", "1", "2", "2", "", "", "0", "2015-7182-024", "", "2", "2"],
          ["20150105", "Happy Valley CH", "Hard", "C", "W", "523", "", "Q", "R32", "6-3 6-4", "3", "Ze Zhang", "184", "", "", "R", "24.5065023956", "", "CHN", "0", "80", "3", "6", "59", "34", "28", "10", "10", "1", "3", "7", "6", "67", "39", "27", "10", "9", "7", "11", "2", "", "", "1", "2015-7182-015", "", "1", "1"],
          ["20141117", "Australia F10", "Hard", "S", "L", "514", "8", "", "R32", "1-6 6-4 5-3 RET", "3", "Brandon Walkin", "1573", "", "", "R", "20.2546201232", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-AUS-10A-2014-004", "", "1", "1"],
          ["20141110", "Australia F9", "Hard", "S", "L", "516", "", "", "F", "6-3 6-3", "3", "Brydan Klein", "294", "3", "", "R", "24.8596851472", "183", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-AUS-09A-2014-031", "", "", ""],
          ["20141110", "Australia F9", "Hard", "S", "W", "516", "", "", "SF", "1-6 6-2 6-1", "3", "Maverick Banes", "370", "6", "", "R", "22.5845311431", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-AUS-09A-2014-030", "", "", ""],
          ["20141110", "Australia F9", "Hard", "S", "W", "516", "", "", "QF", "6-0 3-6 6-3", "3", "Harry Bourchier", "870", "", "", "R", "18.7953456537", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-AUS-09A-2014-028", "", "3", "3"],
          ["20141110", "Australia F9", "Hard", "S", "W", "516", "", "", "R16", "6-1 1-6 6-3", "3", "Chuhan Wang", "392", "8", "", "R", "22.7104722793", "", "CHN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-AUS-09A-2014-023", "", "2", "2"],
          ["20141110", "Australia F9", "Hard", "S", "W", "516", "", "", "R32", "6-4 6-3", "3", "Lawrence Bataljin", "", "", "WC", "R", "18.46954141", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-AUS-09A-2014-014", "", "1", "1"],
          ["20141027", "Traralgon CH", "Hard", "C", "L", "518", "", "WC", "R32", "6-1 6-2", "3", "Jordan Thompson", "278", "", "", "R", "20.5201916496", "", "AUS", "0", "67", "0", "3", "45", "30", "14", "8", "7", "1", "5", "0", "2", "52", "33", "23", "14", "8", "2", "2", "2", "", "", "1", "2014-6865-002", "", "1", "1"],
          ["20141006", "Australia F7", "Hard", "S", "L", "503", "", "", "R16", "6-2 6-3", "3", "Omar Jasika", "841", "", "", "L", "17.3853524983", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-AUS-07A-2014-023", "", "2", "2"],
          ["20141006", "Australia F7", "Hard", "S", "W", "503", "", "", "R32", "6-2 6-0", "3", "Patrick Davidson", "1719", "", "Q", "U", "24.4928131417", "", "USA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-AUS-07A-2014-014", "", "1", "1"],
          ["20140929", "Australia F6", "Hard", "S", "L", "505", "7", "", "R16", "6-2 4-0 RET", "3", "Dayne Kelly", "554", "", "", "U", "24.1861738535", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "", "", "", "2014-M-FU-AUS-06A-2014-018", "", "2", "2"],
          ["20140929", "Australia F6", "Hard", "S", "W", "505", "7", "", "R32", "6-2 6-1", "3", "Ethan Scobie", "", "", "Q", "U", "22.6009582478", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-AUS-06A-2014-004", "", "1", "1"],
          ["20140825", "Chinese Taipei F2", "Hard", "S", "L", "428", "5", "", "QF", "6-2 7-6(6)", "3", "Karen Khachanov", "379", "3", "", "R", "18.2614647502", "", "RUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-TPE-02A-2014-026", "", "3", "3"],
          ["20140825", "Chinese Taipei F2", "Hard", "S", "W", "428", "5", "", "R16", "3-6 6-3 7-5", "3", "Ranjeet Virali Murugesan", "887", "", "", "U", "28.900752909", "", "IND", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-TPE-02A-2014-020", "", "2", "2"],
          ["20140825", "Chinese Taipei F2", "Hard", "S", "W", "428", "5", "", "R32", "6-4 6-2", "3", "David Agung Susanto", "1639", "", "Q", "U", "23.0965092402", "", "INA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-TPE-02A-2014-008", "", "1", "1"],
          ["20140818", "Chinese Taipei F1", "Hard", "S", "L", "424", "7", "", "F", "6-3 6-4", "3", "Liang Chi Huang", "280", "3", "", "R", "22.4449007529", "", "TPE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-TPE-01A-2014-031", "", "", ""],
          ["20140818", "Chinese Taipei F1", "Hard", "S", "W", "424", "7", "", "SF", "6-2 6-1", "3", "Ti Chen", "253", "2", "", "R", "30.8747433265", "183", "TPE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-TPE-01A-2014-030", "", "", ""],
          ["20140818", "Chinese Taipei F1", "Hard", "S", "W", "424", "7", "", "QF", "6-4 6-2", "3", "Cheng Yu Yu", "899", "", "", "U", "19.3785078713", "", "TPE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-TPE-01A-2014-027", "", "3", "3"],
          ["20140818", "Chinese Taipei F1", "Hard", "S", "W", "424", "7", "", "R16", "7-5 6-3", "3", "Takashi Saito", "726", "", "", "R", "19.4825462012", "", "JPN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-TPE-01A-2014-021", "", "2", "2"],
          ["20140818", "Chinese Taipei F1", "Hard", "S", "W", "424", "7", "", "R32", "6-3 6-4", "3", "Hsin Han Lee", "", "", "WC", "R", "26.2477754962", "", "TPE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-TPE-01A-2014-009", "", "1", "1"],
          ["20140728", "Denmark F2", "Clay", "S", "L", "417", "5", "", "R16", "7-5 6-2", "3", "Tobias Blomgren", "846", "", "", "L", "22.0506502396", "", "SWE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-DEN-02A-2014-018", "", "2", "2"],
          ["20140728", "Denmark F2", "Clay", "S", "W", "417", "5", "", "R32", "6-3 7-6(4)", "3", "Thomas Kromann", "", "", "WC", "L", "27.1567419576", "", "DEN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-DEN-02A-2014-004", "", "1", "1"],
          ["20140721", "Estonia F2", "Clay", "S", "L", "419", "1", "WC", "R32", "6-3 7-6(4)", "3", "Dovydas Sakinis", "", "", "Q", "L", "22.0506502396", "", "LTU", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-EST-02A-2014-001", "", "1", "1"],
          ["20140714", "Estonia F1", "Clay", "S", "L", "418", "5", "", "R16", "7-5 7-6(6)", "3", "Alexander Vasilenko", "712", "", "", "R", "19.3785078713", "", "RUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-EST-01A-2014-020", "", "2", "2"],
          ["20140714", "Estonia F1", "Clay", "S", "W", "418", "5", "", "R32", "6-3 6-4", "3", "Kenneth Raisma", "", "", "WC", "L", "16.2792607803", "", "EST", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-EST-01A-2014-008", "", "1", "1"],
          ["20140707", "Bastad Q", "Clay", "Q", "L", "420", "", "", "Q1", "6-4 6-4", "3", "Renzo Olivo", "282", "5", "", "R", "22.3107460643", "", "ARG", "0", "92", "2", "4", "73", "37", "22", "18", "10", "6", "10", "2", "1", "78", "54", "36", "10", "10", "8", "10", "2", "", "", "0", "2014-38-016", "", "", ""],
          ["20140428", "An-Ning CH", "Clay", "C", "L", "396", "", "", "QF", "6-4 6-4", "3", "Jordan Thompson", "324", "", "", "R", "20.0219028063", "", "AUS", "0", "76", "3", "7", "62", "33", "25", "14", "10", "2", "4", "4", "1", "51", "33", "28", "13", "10", "1", "1", "2", "", "", "0", "2014-6572-027", "", "3", "3"],
          ["20140428", "An-Ning CH", "Clay", "C", "W", "396", "", "", "R16", "7-6(1) 6-4", "3", "Alexander Kudryavtsev", "189", "3", "", "R", "28.5037645448", "183", "RUS", "0", "95", "4", "4", "68", "41", "34", "17", "11", "2", "2", "3", "7", "88", "44", "31", "23", "11", "10", "11", "2", "", "", "1", "2014-6572-022", "", "2", "2"],
          ["20140428", "An-Ning CH", "Clay", "C", "W", "396", "", "", "R32", "3-6 6-3 6-3", "3", "Saketh Myneni", "262", "", "", "R", "26.5242984257", "", "IND", "0", "110", "2", "9", "91", "55", "41", "19", "13", "4", "5", "10", "5", "87", "47", "39", "17", "14", "3", "6", "2", "", "", "0", "2014-6572-011", "", "1", "1"],
          ["20140324", "Philippines F1", "Hard", "S", "L", "394", "5", "", "QF", "7-5 6-3", "3", "Shuichi Sekiguchi", "297", "3", "", "R", "22.6721423682", "", "JPN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-PHI-01A-2014-026", "", "3", "3"],
          ["20140324", "Philippines F1", "Hard", "S", "W", "394", "5", "", "R16", "6-4 6-2", "3", "Johnny Arcilla", "", "", "WC", "U", "34.083504449", "", "PHI", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-PHI-01A-2014-020", "", "2", "2"],
          ["20140324", "Philippines F1", "Hard", "S", "W", "394", "5", "", "R32", "6-1 6-4", "3", "Thien Nguyen Hoang", "", "", "Q", "R", "19.0143737166", "", "VIE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-PHI-01A-2014-008", "", "1", "1"],
          ["20140303", "Australia F3", "Grass", "S", "L", "420", "3", "", "QF", "7-6(5) 6-4", "3", "Matthew Barton", "478", "5", "", "R", "22.2067077344", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-AUS-03A-2014-027", "", "3", "3"],
          ["20140303", "Australia F3", "Grass", "S", "W", "420", "3", "", "R16", "7-5 6-3", "3", "Christopher Oconnell", "824", "", "", "U", "19.7481177276", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-AUS-03A-2014-022", "", "2", "2"],
          ["20140303", "Australia F3", "Grass", "S", "W", "420", "3", "", "R32", "6-4 7-5", "3", "Daniel Byrnes", "", "", "Q", "U", "29.5715263518", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-AUS-03A-2014-012", "", "1", "1"],
          ["20140224", "Australia F2", "Hard", "S", "L", "416", "6", "", "QF", "7-6(5) 6-1", "3", "Luke Saville", "397", "4", "", "R", "20.0629705681", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-AUS-02A-2014-026", "", "3", "3"],
          ["20140224", "Australia F2", "Hard", "S", "W", "416", "6", "", "R16", "6-2 3-6 6-4", "3", "Simon Ede", "1206", "", "Q", "R", "21.9520876112", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-AUS-02A-2014-020", "", "2", "2"],
          ["20140224", "Australia F2", "Hard", "S", "W", "416", "6", "", "R32", "6-1 6-3", "3", "Daniel Nolan", "", "", "Q", "U", "16.9555099247", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-AUS-02A-2014-008", "", "1", "1"],
          ["20140217", "Australia F1", "Hard", "S", "L", "411", "6", "", "R32", "6-3 6-4", "3", "Christopher Oconnell", "838", "", "WC", "U", "19.7097878166", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-AUS-01A-2014-008", "", "1", "1"],
          ["20140203", "West Lakes CH", "Hard", "C", "L", "410", "", "", "R32", "6-4 7-6(3)", "3", "Valery Rudnev", "270", "", "", "R", "25.9657768652", "", "RUS", "0", "108", "2", "11", "97", "51", "34", "18", "11", "6", "10", "1", "5", "67", "42", "32", "9", "11", "2", "5", "2", "", "", "", "2014-6714-011", "", "1", "1"],
          ["20140127", "Burnie CH", "Hard", "C", "L", "369", "", "", "R32", "6-4 6-1", "3", "Matt Reid", "233", "5", "", "R", "23.5318275154", "", "AUS", "0", "71", "4", "7", "60", "29", "14", "14", "9", "5", "11", "5", "7", "52", "27", "17", "15", "8", "2", "4", "2", "", "", "0", "2014-5018-009", "", "1", "1"],
          ["20140113", "Australian Open Q", "Hard", "Q", "L", "368", "", "WC", "Q1", "7-5 6-4", "3", "Thiemo De Bakker", "145", "23", "", "R", "25.3169062286", "193", "NED", "0", "94", "3", "4", "76", "42", "33", "14", "11", "3", "5", "6", "0", "66", "43", "34", "14", "11", "2", "2", "2", "", "", "0", "2014-987-052", "", "", ""],
          ["20131229", "Brisbane Q", "Hard", "Q", "L", "372", "", "", "Q1", "6-2 6-7(3) 6-2", "3", "Andrey Golubev", "82", "1", "", "R", "26.4421629021", "185", "KAZ", "0", "130", "5", "6", "103", "62", "38", "20", "14", "13", "18", "6", "2", "104", "73", "48", "17", "14", "7", "8", "1", "", "", "", "2014-10-001", "", "", ""],
          ["20131125", "Cambodia F1", "Hard", "S", "W", "416", "5", "", "F", "7-5 6-0", "3", "Gavin Van Peperzeel", "590", "", "", "R", "21.659137577", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-CAM-01A-2013-031", "", "", ""],
          ["20131125", "Cambodia F1", "Hard", "S", "W", "416", "5", "", "SF", "6-1 4-6 6-4", "3", "Danai Udomchoke", "439", "7", "", "R", "32.2902121834", "173", "THA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "", "", "", "2013-M-FU-CAM-01A-2013-029", "", "", ""],
          ["20131125", "Cambodia F1", "Hard", "S", "W", "416", "5", "", "QF", "6-1 3-6 6-1", "3", "Dylan Seong Kwan Kim", "", "", "Q", "R", "28.5366187543", "", "KOR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-CAM-01A-2013-026", "", "3", "3"],
          ["20131125", "Cambodia F1", "Hard", "S", "W", "416", "5", "", "R16", "6-0 6-2", "3", "Byung Kook Kang", "1148", "", "Q", "U", "34.3490759754", "", "KOR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-CAM-01A-2013-020", "", "2", "2"],
          ["20131125", "Cambodia F1", "Hard", "S", "W", "416", "5", "", "R32", "7-6(3) 6-0", "3", "Hyun Woo Nam", "752", "", "", "R", "28.8761122519", "", "KOR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-CAM-01A-2013-008", "", "1", "1"],
          ["20131028", "Traralgon CH", "Hard", "C", "L", "410", "", "", "R32", "6-4 6-1", "3", "Bradley Klahn", "123", "1", "", "L", "23.189596167", "190", "USA", "0", "55", "2", "3", "45", "28", "17", "10", "8", "5", "8", "1", "1", "47", "34", "28", "9", "9", "0", "0", "2", "", "", "1", "2013-6865-001", "", "1", "1"],
          ["20131021", "Melbourne CH", "Hard", "C", "L", "432", "", "WC", "R16", "5-7 6-4 6-3", "3", "James Ward", "180", "8", "", "R", "26.6967830253", "190", "GBR", "0", "129", "3", "4", "89", "56", "37", "17", "16", "2", "6", "7", "3", "102", "59", "46", "20", "15", "6", "8", "2", "", "", "0", "2013-6863-020", "", "2", "2"],
          ["20131021", "Melbourne CH", "Hard", "C", "W", "432", "", "WC", "R32", "1-6 6-2 6-2", "3", "Adam Feeney", "396", "", "", "R", "28.6242299795", "178", "AUS", "0", "95", "2", "5", "71", "37", "27", "15", "11", "3", "6", "2", "13", "73", "41", "26", "13", "12", "2", "7", "1", "", "", "0", "2013-6863-007", "", "1", "1"],
          ["20130923", "Australia F8", "Hard", "S", "L", "520", "", "", "R32", "3-6 6-4 6-2", "3", "Jordan Thompson", "493", "5", "", "R", "19.4277891855", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-AUS-08A-2013-004", "", "1", "1"],
          ["20130916", "Australia F7", "Hard", "S", "W", "598", "", "", "F", "6-4 6-4", "3", "Alex Bolt", "318", "2", "", "L", "20.6954140999", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-AUS-07A-2013-031", "", "", ""],
          ["20130916", "Australia F7", "Hard", "S", "W", "598", "", "", "SF", "2-6 7-6(3) 6-4", "3", "Maverick Banes", "1006", "", "", "R", "21.4346338125", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-AUS-07A-2013-029", "", "", ""],
          ["20130916", "Australia F7", "Hard", "S", "W", "598", "", "", "QF", "7-5 7-6(5)", "3", "Blake Mott", "930", "", "", "U", "17.4045174538", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-AUS-07A-2013-025", "", "3", "3"],
          ["20130916", "Australia F7", "Hard", "S", "W", "598", "", "", "R16", "6-3 6-2", "3", "Jacob Grills", "844", "", "", "U", "18.2477754962", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-AUS-07A-2013-017", "", "2", "2"],
          ["20130916", "Australia F7", "Hard", "S", "W", "598", "", "", "R32", "6-3 6-2", "3", "Calum Puttergill", "", "", "WC", "U", "19.9014373717", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-AUS-07A-2013-002", "", "1", "1"],
          ["20130909", "Australia F6", "Hard", "S", "L", "595", "6", "", "F", "7-6(6) 6-4", "3", "Adam Feeney", "318", "2", "", "R", "28.5092402464", "178", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "", "", "", "2013-M-FU-AUS-06A-2013-031", "", "", ""],
          ["20130909", "Australia F6", "Hard", "S", "W", "595", "6", "", "SF", "4-6 6-2 6-2", "3", "Luke Saville", "453", "3", "", "R", "19.6030116359", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-AUS-06A-2013-029", "", "", ""],
          ["20130909", "Australia F6", "Hard", "S", "W", "595", "6", "", "QF", "1-6 6-3 7-5", "3", "Alex Bolt", "316", "1", "", "L", "20.6762491444", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-AUS-06A-2013-025", "", "3", "3"],
          ["20130909", "Australia F6", "Hard", "S", "W", "595", "6", "", "R16", "6-1 1-6 6-4", "3", "Maverick Banes", "1007", "", "", "R", "21.4154688569", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-AUS-06A-2013-018", "", "2", "2"],
          ["20130909", "Australia F6", "Hard", "S", "W", "595", "6", "", "R32", "6-3 7-5", "3", "Jay Andrijic", "1308", "", "", "R", "17.9356605065", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-AUS-06A-2013-004", "", "1", "1"],
          ["20130805", "Turkey F31", "Hard", "S", "L", "574", "5", "", "QF", "6-3 6-3", "3", "Dane Propoggia", "348", "4", "", "R", "23.2826830938", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-TUR-31A-2013-027", "", "3", "3"],
          ["20130805", "Turkey F31", "Hard", "S", "W", "574", "5", "", "R16", "7-5 7-6(3)", "3", "Borna Coric", "753", "", "", "R", "16.7227926078", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-TUR-31A-2013-021", "", "2", "2"],
          ["20130805", "Turkey F31", "Hard", "S", "W", "574", "5", "", "R32", "4-6 6-3 6-3", "3", "Markos Kalovelonis", "834", "", "", "R", "19.2169746749", "", "GRE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-TUR-31A-2013-009", "", "1", "1"],
          ["20130729", "Turkey F30", "Hard", "S", "L", "569", "4", "", "R16", "3-6 6-3 5-1 RET", "3", "Tuna Altuna", "1240", "", "", "R", "24.4928131417", "", "TUR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-TUR-30A-2013-022", "", "2", "2"],
          ["20130729", "Turkey F30", "Hard", "S", "W", "569", "4", "", "R32", "6-3 6-4", "3", "Can Oztuzun", "", "", "WC", "U", "16.1861738535", "", "TUR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-TUR-30A-2013-012", "", "1", "1"],
          ["20130722", "Tampere CH", "Clay", "C", "L", "585", "", "Q", "R32", "6-3 6-7(4) 6-1", "3", "Peter Torebko", "418", "", "", "R", "25.4455852156", "", "GER", "0", "116", "3", "7", "91", "50", "23", "19", "15", "4", "13", "2", "8", "81", "49", "36", "11", "13", "3", "7", "2", "", "", "0", "2013-221-015", "", "1", "1"],
          ["20130715", "Estonia F1", "Clay", "S", "L", "560", "", "", "R32", "6-4 6-2", "3", "Jurgen Zopp", "240", "1", "", "R", "25.2950034223", "190", "EST", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-EST-01A-2013-001", "", "1", "1"],
          ["20130708", "Turkey F27", "Hard", "S", "L", "565", "2", "", "R16", "6-4 6-4", "3", "Costin Paval", "1341", "", "", "L", "22.8501026694", "", "ROU", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-TUR-27A-2013-024", "", "2", "2"],
          ["20130708", "Turkey F27", "Hard", "S", "W", "565", "2", "", "R32", "7-5 7-5", "3", "Ilya Ivashka", "1388", "", "", "R", "19.3675564682", "", "BLR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-TUR-27A-2013-016", "", "1", "1"],
          ["20130610", "Spain F17", "Hard", "S", "L", "567", "6", "", "R16", "3-6 7-6(6) 6-1", "3", "Ricardo Villacorta Alonso", "834", "", "", "R", "28.128678987", "", "ESP", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-ESP-17A-2013-023", "", "2", "2"],
          ["20130610", "Spain F17", "Hard", "S", "W", "567", "6", "", "R32", "6-3 6-4", "3", "Marcos Giraldi Requena", "919", "", "SE", "R", "19.537303217", "", "ESP", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-ESP-17A-2013-013", "", "1", "1"],
          ["20130603", "Spain F16", "Hard", "S", "L", "567", "4", "", "SF", "6-2 6-2", "3", "Jose Checa Calvo", "276", "2", "", "L", "28.1505817933", "", "ESP", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-ESP-16A-2013-030", "", "", ""],
          ["20130603", "Spain F16", "Hard", "S", "W", "567", "4", "", "QF", "7-5 6-0", "3", "Alessandro Petrone", "611", "5", "", "R", "22.4257357974", "", "ITA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-ESP-16A-2013-027", "", "3", "3"],
          ["20130603", "Spain F16", "Hard", "S", "W", "567", "4", "", "R16", "6-1 6-4", "3", "Vadim Alekseenko", "854", "", "", "R", "30.0232717317", "", "UKR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-ESP-16A-2013-022", "", "2", "2"],
          ["20130603", "Spain F16", "Hard", "S", "W", "567", "4", "", "R32", "1-6 6-4 6-4", "3", "Jean Marc Werner", "833", "", "", "R", "22.932238193", "", "GER", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-ESP-16A-2013-012", "", "1", "1"],
          ["20130527", "Russia F8", "Clay", "S", "L", "567", "", "", "R16", "6-3 0-6 6-2", "3", "Sergey Betov", "464", "8", "", "R", "25.6153319644", "", "BLR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-RUS-08A-2013-023", "", "2", "2"],
          ["20130527", "Russia F8", "Clay", "S", "W", "567", "", "", "R32", "6-7(2) 7-6(6) 6-2", "3", "Alexander Pavlioutchenkov", "1039", "", "Q", "R", "27.4798083504", "", "RUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-RUS-08A-2013-014", "", "1", "1"],
          ["20130513", "Greece F7", "Hard", "S", "L", "569", "6", "", "R32", "6-4 6-1", "3", "Hugo Di Feo", "1252", "", "", "U", "18.0698151951", "", "CAN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-GRE-07A-2013-004", "", "1", "1"],
          ["20130506", "Greece F6", "Hard", "S", "L", "626", "5", "", "R16", "6-4 7-6(4)", "3", "Boris Nicola Bakalov", "1429", "", "", "L", "32.4490075291", "", "BUL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-GRE-06A-2013-018", "", "2", "2"],
          ["20130506", "Greece F6", "Hard", "S", "W", "626", "5", "", "R32", "6-3 6-2", "3", "Charalampos Kapogiannis", "1506", "", "WC", "R", "23.3100616016", "", "GRE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-GRE-06A-2013-004", "", "1", "1"],
          ["20130429", "Greece F5", "Hard", "S", "L", "631", "8", "", "F", "6-1 6-2", "3", "Dimitar Kuzmanov", "578", "5", "", "R", "19.7535934292", "", "BUL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-GRE-05A-2013-031", "", "", ""],
          ["20130429", "Greece F5", "Hard", "S", "W", "631", "8", "", "SF", "7-6(2) 6-3", "3", "Markos Kalovelonis", "", "", "WC", "R", "18.9486652977", "", "GRE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-GRE-05A-2013-029", "", "", ""],
          ["20130429", "Greece F5", "Hard", "S", "W", "631", "8", "", "QF", "6-0 6-3", "3", "Laurent Lokoli", "979", "", "", "R", "18.5297741273", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-GRE-05A-2013-025", "", "3", "3"],
          ["20130429", "Greece F5", "Hard", "S", "W", "631", "8", "", "R16", "4-6 6-3 6-4", "3", "Charalampos Kapogiannis", "1891", "", "WC", "R", "23.2908966461", "", "GRE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-GRE-05A-2013-018", "", "2", "2"],
          ["20130429", "Greece F5", "Hard", "S", "W", "631", "8", "", "R32", "6-3 6-2", "3", "Michael Laser", "1006", "", "", "R", "22.9185489391", "", "USA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-GRE-05A-2013-004", "", "1", "1"],
          ["20130422", "Greece F4", "Hard", "S", "L", "630", "", "", "QF", "6-3 6-1", "3", "Kimmer Coppejans", "608", "", "", "R", "19.2032854209", "", "BEL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-GRE-04A-2013-026", "", "3", "3"],
          ["20130422", "Greece F4", "Hard", "S", "W", "630", "", "", "R16", "6-3 3-6 6-4", "3", "Marcus Willis", "561", "7", "", "L", "22.5352498289", "", "GBR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-GRE-04A-2013-020", "", "2", "2"],
          ["20130422", "Greece F4", "Hard", "S", "W", "630", "", "", "R32", "6-7(4) 6-4 6-2", "3", "Gregoire Barrere", "1260", "", "Q", "R", "19.1786447639", "183", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-GRE-04A-2013-007", "", "1", "1"],
          ["20130225", "USA F6", "Hard", "S", "L", "646", "", "Q", "R32", "6-1 6-1", "3", "Mitchell Krueger", "777", "", "Q", "R", "19.1211498973", "", "USA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-USA-06A-2013-006", "", "1", "1"],
          ["20130218", "USA F5", "Hard", "S", "L", "653", "", "Q", "R16", "3-6 6-1 7-6(7)", "3", "Fritz Wolmarans", "337", "5", "", "R", "26.9541409993", "", "RSA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-USA-05A-2013-020", "", "2", "2"],
          ["20130218", "USA F5", "Hard", "S", "W", "653", "", "Q", "R32", "6-4 6-4", "3", "Yong Kyu Lim", "441", "", "", "U", "21.6728268309", "", "KOR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-USA-05A-2013-007", "", "1", "1"],
          ["20130128", "Burnie CH", "Hard", "C", "L", "787", "", "WC", "QF", "6-7(5) 7-5 6-1", "3", "Jose Rubin Statham", "340", "", "", "R", "25.7631759069", "183", "NZL", "0", "149", "5", "7", "116", "67", "45", "22", "15", "12", "16", "1", "1", "99", "60", "46", "24", "16", "7", "8", "2", "", "", "0", "2013-5018-025", "", "3", "3"],
          ["20130128", "Burnie CH", "Hard", "C", "W", "787", "", "WC", "R16", "6-3 6-4", "3", "Erik Chvojka", "246", "", "", "L", "26.2587268994", "", "CAN", "0", "73", "5", "3", "58", "36", "27", "9", "10", "0", "2", "1", "6", "52", "36", "22", "6", "9", "3", "7", "2", "", "", "1", "2013-5018-017", "", "2", "2"],
          ["20130128", "Burnie CH", "Hard", "C", "W", "787", "", "WC", "R32", "6-3 6-4", "3", "Jay Andrijic", "1679", "", "WC", "R", "17.3223819302", "", "AUS", "0", "57", "6", "2", "51", "34", "30", "10", "10", "0", "0", "2", "1", "49", "27", "20", "13", "9", "1", "3", "2", "", "", "1", "2013-5018-002", "", "1", "1"],
          ["20121029", "Australia F12", "Hard", "S", "L", "784", "", "", "R16", "6-2 3-6 6-2", "3", "Adam Feeney", "320", "3", "", "R", "27.6468172485", "178", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "", "", "", "2012-M-FU-AUS-12A-2012-019", "", "2", "2"],
          ["20121029", "Australia F12", "Hard", "S", "W", "784", "", "", "R32", "6-3 7-5", "3", "Robert Phillips Pd13", "", "", "Q", "U", "29.8836413415", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-AUS-12A-2012-006", "", "1", "1"],
          ["20121022", "Australia F11", "Hard", "S", "L", "784", "", "", "R32", "6-4 6-3", "3", "Jack Schipanski", "928", "", "", "R", "18.5188227242", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUS-11A-2012-003", "", "1", "1"],
          ["20121008", "Australia F10", "Hard", "S", "L", "759", "", "", "R16", "6-4 6-2", "3", "Luke Saville", "400", "4", "", "R", "18.6830937714", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUS-10A-2012-022", "", "2", "2"],
          ["20121008", "Australia F10", "Hard", "S", "W", "759", "", "", "R32", "6-2 6-3", "3", "Ryan Thomas", "1213", "", "Q", "U", "26.7022587269", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-AUS-10A-2012-011", "", "1", "1"],
          ["20120917", "Australia F8", "Hard", "S", "L", "750", "", "", "R32", "6-2 7-6(3)", "3", "Benjamin Mitchell", "288", "1", "", "R", "19.7973990418", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUS-08A-2012-001", "", "1", "1"],
          ["20120910", "Australia F7", "Hard", "S", "L", "762", "", "", "R32", "6-7(4) 6-2 6-4", "3", "Yusuke Watanuki", "1021", "", "", "R", "22.3107460643", "", "JPN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUS-07A-2012-003", "", "1", "1"],
          ["20120903", "Australia F6", "Hard", "S", "L", "799", "", "", "R32", "1-6 6-3 7-5", "3", "Jacob Grills", "1537", "", "WC", "U", "17.1937029432", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-AUS-06A-2012-007", "", "1", "1"],
          ["20120827", "Australia F5", "Hard", "S", "L", "799", "", "Q", "QF", "6-4 6-3", "3", "Alex Bolt", "721", "", "", "L", "19.6413415469", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUS-05A-2012-026", "", "3", "3"],
          ["20120827", "Australia F5", "Hard", "S", "W", "799", "", "Q", "R16", "6-3 6-2", "3", "Dekel Bar", "1071", "", "", "R", "19.4524298426", "", "ISR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUS-05A-2012-019", "", "2", "2"],
          ["20120827", "Australia F5", "Hard", "S", "W", "799", "", "Q", "R32", "2-6 7-5 6-0", "3", "Matthew Barton", "494", "3", "", "R", "20.6926762491", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUS-05A-2012-005", "", "1", "1"],
          ["20120716", "Great Britain F11", "Grass", "S", "L", "876", "", "", "R16", "7-6(5) 6-2", "3", "Tom Burn", "1045", "", "WC", "R", "26.9623545517", "", "GBR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-GBR-11A-2012-017", "", "2", "2"],
          ["20120716", "Great Britain F11", "Grass", "S", "W", "876", "", "", "R32", "6-0 6-3", "3", "Marvin Barker", "935", "", "", "U", "21.0212183436", "", "NZL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-GBR-11A-2012-002", "", "1", "1"],
          ["20120709", "Great Britain F10", "Grass", "S", "L", "876", "", "", "SF", "6-2 6-2", "3", "Josh Goodall", "218", "1", "", "R", "26.726899384", "188", "GBR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-GBR-10A-2012-029", "", "", ""],
          ["20120709", "Great Britain F10", "Grass", "S", "W", "876", "", "", "QF", "6-4 5-7 6-4", "3", "Michael Look", "368", "3", "", "R", "24.6242299795", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-GBR-10A-2012-026", "", "3", "3"],
          ["20120709", "Great Britain F10", "Grass", "S", "W", "876", "", "", "R16", "3-6 6-2 6-1", "3", "Rudy Coco", "521", "5", "", "U", "28.3011635866", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-GBR-10A-2012-020", "", "2", "2"],
          ["20120709", "Great Britain F10", "Grass", "S", "W", "876", "", "", "R32", "7-6(6) 3-6 6-3", "3", "Marcus Daniell", "755", "", "", "R", "22.6639288159", "190", "NZL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-GBR-10A-2012-007", "", "1", "1"],
          ["20120702", "Great Britain F9", "Grass", "S", "L", "886", "", "", "R32", "7-6(3) 6-4", "3", "Tom Burn", "", "", "Q", "R", "26.9048596851", "", "GBR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-GBR-09A-2012-010", "", "1", "1"],
          ["20120618", "Germany F6", "Clay", "S", "L", "1074", "", "Q", "R32", "7-6(5) 6-1", "3", "Julien Obry", "302", "1", "", "R", "20.7885010267", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-GER-06A-2012-001", "", "1", "1"],
          ["20120611", "Slovenia F3", "Clay", "S", "L", "1076", "", "Q", "SF", "6-4 6-2", "3", "Riccardo Bellotti", "413", "5", "", "R", "20.8514715948", "", "ITA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-SLO-03A-2012-029", "", "", ""],
          ["20120611", "Slovenia F3", "Clay", "S", "W", "1076", "", "Q", "QF", "7-5 6-1", "3", "Michal Konecny", "351", "1", "", "L", "22.6611909651", "", "CZE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-SLO-03A-2012-025", "", "3", "3"],
          ["20120611", "Slovenia F3", "Clay", "S", "W", "1076", "", "Q", "R16", "6-4 6-4", "3", "Alex Bolt", "750", "", "", "L", "19.4305270363", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-SLO-03A-2012-018", "", "2", "2"],
          ["20120611", "Slovenia F3", "Clay", "S", "W", "1076", "", "Q", "R32", "6-2 6-1", "3", "Vlad Corneliu Pop", "", "", "Q", "R", "17.7549623546", "", "ROU", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-SLO-03A-2012-003", "", "1", "1"],
          ["20120604", "Slovenia F2", "Clay", "S", "L", "1090", "", "LL", "R32", "6-4 4-6 6-4", "3", "Dennis Bloemke", "582", "7", "", "R", "22.8473648186", "", "GER", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-SLO-02A-2012-009", "", "1", "1"],
          ["20120430", "Italy F7", "Clay", "S", "L", "1064", "", "Q", "R32", "6-2 6-2", "3", "Filip Peliwo", "581", "", "", "R", "18.2477754962", "", "CAN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-ITA-07A-2012-007", "", "1", "1"],
          ["20120326", "Australia F4", "Clay", "S", "L", "1122", "", "", "R16", "6-7(2) 6-4 6-3", "3", "Maverick Banes", "680", "", "", "R", "19.9397672827", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUS-04A-2012-024", "", "2", "2"],
          ["20120326", "Australia F4", "Clay", "S", "W", "1122", "", "", "R32", "6-1 6-2", "3", "Mitchell Pritchard", "", "", "Q", "U", "16.0821355236", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-AUS-04A-2012-015", "", "1", "1"],
          ["20120319", "Australia F3", "Clay", "S", "L", "1122", "", "", "R32", "7-6(4) 6-1", "3", "Gavin Van Peperzeel", "1008", "", "", "R", "19.9726214921", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUS-03A-2012-010", "", "1", "1"],
          ["20120220", "Australia F2", "Grass", "S", "L", "962", "", "", "R32", "6-1 6-3", "3", "Erik Chvojka", "266", "1", "", "L", "25.3196440794", "", "CAN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUS-02A-2012-001", "", "1", "1"],
          ["20120213", "Australia F1", "Hard", "S", "L", "963", "", "Q", "R32", "7-6(4) 6-3", "3", "Luke Saville", "886", "", "WC", "R", "18.0314852841", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUS-01A-2012-014", "", "1", "1"],
          ["20120206", "Caloundra CH", "Hard", "C", "L", "961", "", "WC", "R32", "3-6 7-6(3) 7-5", "3", "Sebastian Rieschick", "256", "8", "", "R", "25.9739904175", "", "GER", "0", "163", "5", "10", "111", "67", "49", "19", "17", "8", "12", "6", "8", "103", "55", "43", "20", "16", "9", "13", "2", "", "", "", "2012-2153-013", "", "1", "1"],
          ["20111121", "Australia F13", "Hard", "S", "L", "993", "", "", "R16", "6-4 6-0", "3", "Michael Venus", "422", "5", "", "R", "24.0985626283", "", "NZL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2011-M-FU-AUS-13A-2011-020", "", "2", "2"],
          ["20111121", "Australia F13", "Hard", "S", "W", "993", "", "", "R32", "6-0 6-4", "3", "Jake Wynan", "", "", "Q", "U", "17.5989048597", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2011-M-FU-AUS-13A-2011-007", "", "1", "1"],
          ["20111114", "Australia F12", "Hard", "S", "L", "988", "", "", "R32", "6-4 6-4", "3", "Scott Puodziunas", "1292", "", "Q", "U", "22.0123203285", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2011-M-FU-AUS-12A-2011-010", "", "1", "1"],
          ["20111010", "Australia F9", "Hard", "S", "L", "1161", "", "", "QF", "6-3 6-3", "3", "Brydan Klein", "374", "4", "", "R", "21.7741273101", "183", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-AUS-09A-2011-027", "", "3", "3"],
          ["20111010", "Australia F9", "Hard", "S", "W", "1161", "", "", "R16", "6-1 2-2 RET", "3", "Isaac Frost", "492", "6", "", "R", "22.7570157426", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-AUS-09A-2011-021", "", "2", "2"],
          ["20111010", "Australia F9", "Hard", "S", "W", "1161", "", "", "R32", "7-5 6-4", "3", "Wan Gao", "925", "", "", "U", "24.128678987", "", "CHN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2011-M-FU-AUS-09A-2011-010", "", "1", "1"],
          ["20111003", "Australia F8", "Hard", "S", "L", "1173", "", "", "R32", "6-4 6-0", "3", "Gavin Van Peperzeel", "1805", "", "Q", "R", "19.5126625599", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-AUS-08A-2011-015", "", "1", "1"],
          ["20110919", "USA F24", "Hard", "S", "L", "1258", "", "Q", "R16", "6-3 6-1", "3", "Dennis Lajola", "933", "", "Q", "R", "22.598220397", "", "USA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-USA-24A-2011-019", "", "2", "2"],
          ["20110919", "USA F24", "Hard", "S", "W", "1258", "", "Q", "R32", "6-3 2-6 6-2", "3", "Chris Eaton", "351", "4", "", "R", "23.8110882957", "", "GBR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2011-M-FU-USA-24A-2011-005", "", "1", "1"],
          ["20110411", "Thailand F3", "Hard", "S", "L", "1216", "", "Q", "R32", "6-1 7-6(3)", "3", "Yasutaka Uchiyama", "602", "", "", "R", "18.6803559206", "", "JPN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-THA-03A-2011-006", "", "1", "1"],
          ["20110228", "Australia F2", "Grass", "S", "L", "", "", "WC", "R32", "6-3 6-3", "3", "Liang Chi Huang", "827", "8", "", "R", "18.9760438056", "", "TPE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-AUS-02A-2011-008", "", "1", "1"],
          ["20110221", "Australia F1", "Grass", "S", "L", "", "", "WC", "QF", "6-3 6-2", "3", "Michael Look", "574", "8", "", "R", "23.2443531828", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-AUS-01A-2011-025", "", "3", "3"],
          ["20110221", "Australia F1", "Grass", "S", "W", "", "", "WC", "R16", "7-5 2-6 6-3", "3", "Tsung Hua Yang", "301", "1", "", "R", "19.9014373717", "", "TPE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-AUS-01A-2011-017", "", "2", "2"],
          ["20110221", "Australia F1", "Grass", "S", "W", "", "", "WC", "R32", "6-1 4-6 6-4", "3", "Liang Chi Huang", "826", "", "", "R", "18.9568788501", "", "TPE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-AUS-01A-2011-002", "", "1", "1"],
          ["20101122", "Australia F12", "Hard", "S", "L", "", "", "WC", "R32", "6-2 6-0", "3", "Benjamin Mitchell", "788", "", "", "R", "17.9767282683", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2010-M-FU-AUS-12A-2010-003", "", "1", "1"],
          ["20100802", "Thailand F1", "Hard", "S", "L", "", "", "Q", "R32", "6-3 6-0", "3", "Abdullah Maqdas", "689", "8", "Q", "U", "23.3401779603", "", "KUW", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2010-M-FU-THA-01A-2010-013", "", "1", "1"],
          ["20100426", "Australia F3", "Clay", "S", "L", "", "", "WC", "R32", "5-7 6-4 6-4", "3", "Brendan Moore", "1361", "", "Q", "U", "24.8049281314", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2010-M-FU-AUS-03A-2010-010", "", "1", "1"]
          ];


var fourspaces = "\u00a0\u00a0\u00a0\u00a0";

var round_dict = { "R16": 9,
                   "W": 14,
                   "F": 13,
                   "RR": 8,
                   "R64": 6,
                   "R128": 5,
                   "QF": 10,
                   "SF": 11,
                   "R32": 7,
                   'Q1': 1,
                   'Q2': 2,
                   'Q3': 3,
                   'Q4': 4,
                   "": 0,
                   "BR": 12
                  };

// add parser through the tablesorter addParser method 
$.tablesorter.addParser({ 
    // set a unique id 
    id: 'rounds', 
    is: function(s) { 
        // return false so this parser is not auto detected 
        return false; 
    }, 
    format: function(s) { 
        // format your data for normalization 
        return round_dict[s]; 
    }, 
    // set type, either numeric or text 
    type: 'numeric'
});

$.tablesorter.addParser({ 
    id: 'roundsDesc', 
    is: function(s) {  
        return false; 
    }, 
    format: function(s) {  
        return 100 - round_dict[s]; 
    }, 
    type: 'numeric'
});

$.tablesorter.addParser({  
    id: 'scores', 
    is: function(s) {return false;}, 
    format: function(s) {
        if (s == 'W/O') {return 0;}
        if (s.slice(-3) == 'RET') {s = s.slice(0, -4);}        
        if (s == 'UNR') {return 2000;}
        else {return s;}
    },  
    type: 'numeric'
});

$.tablesorter.addParser({  
    id: 'ranks', 
    is: function(s) {return false;}, 
    format: function(s) { 
        if (s == 'UNR') {return 3000;}
        else if (s.indexOf('/') !== -1) {
            var dranks = s.split(/\//);
            if (dranks[0] == "UNR") {var rank1 = 3000;}
            else {rank1 = parseInt(dranks[0]);}
            if (dranks[1] == "UNR") {var rank2 = 3000;}
            else {rank2 = parseInt(dranks[1]);}
            return rank1 + rank2;
            }
        else {return s;} 
    },  
    type: 'numeric'
});

$.tablesorter.addParser({  
    id: 'ascNum', 
    is: function(s) {return false;}, 
    format: function(s) { 
        if (s == '' || s == '-') {return 1000;} 
        else if (s.indexOf("%") != -1) {return parseFloat(s.slice(0,-1));}
        else if (s.indexOf(":") != -1) {
            var hm = s.split(':');
            var minutes = (parseInt(hm[0])*60) + parseInt(hm[1]);
            return minutes;
            }
        else {return s;} 
    },  
    type: 'numeric'
});

$.tablesorter.addParser({  
    id: 'descNum', 
    is: function(s) {return false;}, 
    format: function(s) { 
        if (s == '' || s == '-') {return 1000;} 
        else if (s.indexOf("%") != -1) {return 1000 - parseFloat(s.slice(0,-1));}
        else if (s.indexOf(":") != -1) {
            var hm = s.split(':');
            var minutes = (parseInt(hm[0])*60) + parseInt(hm[1]);
            return 1000 - minutes;
            }        
        else {return 1000 - s;} 
    },  
    type: 'numeric'
});

$.tablesorter.addParser({  
    id: 'dates', 
    is: function(s) {return false;}, 
    format: function(s) { 
        // format your data for normalization
        var yyyy = s.slice(-4);
        var mm = rmonths[s.slice(-8, -5)];
        var day = s.slice(0, -9);
        if (day.length == 1) {
            var dd = '0' + day;
            }
        else {
            var dd = day;
            }
        return yyyy + mm + dd; 
    },  
    type: 'numeric'
}); 

$.tablesorter.addParser({ 
    id: 'datesDesc', 
    is: function(s) {return false;}, 
    format: function(s) { 
        var yyyy = s.slice(-4);
        var mm = rmonths[s.slice(-8, -5)];
        var day = s.slice(0, -9);
        if (day.length == 1) {
            var dd = '0' + day;
            }
        else {
            var dd = day;
            }
        var ymd = yyyy + mm + dd; 
        return 100000000 - parseInt(ymd);
    },  
    type: 'numeric'
});
 
function playeratt(pname, s, q, cc, lk) {
    // lk = 1 or 0
    var precede = ''
    if (s != '') {
        precede = '(' + s;
        if (q != '') {
            precede = precede + '/' + q;
            }
        precede = precede + ')';
        }
    else if (q != '') {
        precede = '(' + q + ')';
        }
    //var nlink = '<a href="http://www.tennisabstract.com/cgi-bin/player.cgi?p=' + pname.replace(/ /g, '') + '">' + pname + '</a>'
    if (cc == '') {var country = '';}
    else {var country = ' [' + cc + ']';}
    if (lk == 1) {return precede + nlink + country;}
    else {return precede + pname + country;}
    
    };

function alignRound(num, dec, perc) {
    if (perc == 1) {
        num = num*100;
        }
    var intrate = Math.round((num)*Math.pow(10, dec))/Math.pow(10, dec);
    var extra = intrate + Math.pow(10, -1*(dec+1));
    var strex = String(extra);
    var indexdot = strex.indexOf('.');
    var done;
    if (perc == 1) {done = strex.slice(0, (indexdot+dec+1)) + '%';}
    else {done = strex.slice(0, (indexdot+dec+1));}
    if (done[0] == 'N' || done[0] == '%') {return '-';}
    else if (done[0] == 'I') {return '-';} // infinity
    else if (dec == 0) {return done.slice(0, -2) + done.slice(-1);}
    else {return done;}
    };
                  
function make(tag, attr, cont) {
    if (arguments.length == 2 && (attr instanceof Array || typeof attr == "string")) {
        cont = attr;
        attributes = null;
        }
    var open = "<" + tag;
    var close = "</" + tag + ">";
    if (attr) {
	for(var name in attr) {
            attx = " " + name + '="' + attr[name] + '"';
	    open = open.concat(attx);
            }
        }
    open = open.concat(">");
    if (cont instanceof Array) {
	var content = cont.join("");
	}
    else {
	var content = cont;
	} 
    var elem = open + content + close;
    return elem;
    }

function sortRev(a,b) {return b - a;}

url2filter = {'K': 'hand',
              'E': 'round',
              'I': 'rank',
              'L': 'age',
              'C': 'level',
              'B': 'surface',
              'A': 'span', 
              'N': 'country', 
              'D': 'tourney', 
              'G': 'asrank',
              'H': 'entry',
              'J': 'oentry',
              'M': 'height',
              'F': 'results',
              'P': 'sets',
              'Q': 'scores',
              'T': 'stats',
              'X': 'extras',
              'U': 'minimum',
              'R': 'crank',
              'Y': 'minyears',
              's': 'sort',
              'r': 'return',
              'v': 'reverse',
              'o': 'overall',
              'w': 'raw',
              'z': 'hands',
              'S': 'prank',
              'V': 'phand'
              };

filter2url = {'hand': 'K',
              'round': 'E',
              'rank': 'I',
              'age': 'L',
              'level': 'C',
              'surface': 'B',
              'span': 'A', 
              'country': 'N', 
              'tourney': 'D', 
              'asrank': 'G',
              'entry': 'H',
              'oentry': 'J',
              'height': 'M',
              'results': 'F',
              'sets': 'P',
              'scores': 'Q',
              'stats': 'T',
              'extras': 'X',
              'minimum': 'U',
              'crank': 'R',
              'minyears': 'Y',
              'hands': 'Z',
              'prank': 'S',
              'phand': 'V'
              };

var filterlist = ['span', 'minyears', 'minimum', 'surface', 'level', 'tourney', 'round', 'results', 'sets', 'scores', 'asrank', 'entry',
              'rank', 'crank', 'oentry', 'hand', 'hands', 'age', 'height', 'country', 'phand', 'prank', 'stats']; //, 'extras'];

var filteropts = {'hand': ['vs Hand', 'All', 'Right', 'Left', 'One-hand BH', 'Two-hand BH'],
                  'phand': ['Partner Hand', 'All', 'Right', 'Left'],
                  'hands': ['vs Hands', 'All', 'Right/Right', 'Right/Left', 'Left/Left'],
                  'round': ['Round', 'All', 'Final', 'Semis', 'Quarters', 'R16', 'R32', 'R64', 'R128', "First Round", "Second Round", "Third Round", "First Match", "Second Match", "Third Match"],
                  'rank': ['vs Rank', 'All', 'Top 5', 'Top 10', 'Top 20', 'Top 50', 'Top 100', '11+', '21+', '51+', '101+', 'Higher', 'Lower'], 
                  'prank': ['Partner Rank', 'All', 'Top 5', 'Top 10', 'Top 20', 'Top 50', 'Top 100', '11+', '21+', '51+', '101+', 'Higher', 'Lower'], 
                  'age': ['vs Age', 'All', 'Younger', 'Older', 'Under 21', 'Under 23', '28 & Over', '30 & Over'],
                  'level': ['Level', 'All', 'Grand Slams', 'Masters', 'All ATP', 'Qualifying', 'Challengers', 'CH Qualies', 'Futures', 'Davis Cup', 'All Pro', 'Juniors'],
                  'surface': ['Surface', 'All', 'Hard', 'Clay', 'Grass', 'Carpet'], // add indoor!
                  'span': ychoices, 
                  'country': cchoices, 
                  'tourney': tchoices, 
                  'asrank': rchoices,
                  'entry': ['as Entry', 'All', 'Seeded', 'Unseeded', 'Qualifier', 'Wild Card'],
                  'oentry': ['vs Entry', 'All', 'Seeded', 'Unseeded', 'Qualifier', 'Wild Card'],
                  'height': ['vs Height', 'All', 'Shorter', 'Taller', "Under 5'10", "Under 6'0", "Over 6'2", "Over 6'4"],
                  'results': ['Results', 'All', 'Wins', 'Losses', 'Completed', 'W by RET', 'L by RET', 'W by W/O', 'L by W/O', 'Won 1st Set', 'Lost 1st Set', 'Won Sets 1&2', 'Lost Sets 1&2', 'Split 1&2', 'Up 2-1 Sets', 'Down 1\u20112 Sets'],
                  'scores': ['Scores', 'All', 'All tiebreaks', 'TB won', 'TB lost', 'Deciding TB', 'All 7-5', '7-5 won', '7-5 lost', 'All bagels', '6-0 won', '6-0 lost', 'All 6-1', '6-1 won', '6-1 lost'],
                  'sets': ['Sets', 'All', 'Straights', 'Deciders', 'All Best of 5', '3 Sets (of 5)', '4-Setters', '5-Setters', 'All Best of 3', '2-Setters', '3 Sets (of 3)'],
                  'stats': ['Stats', 'All'],
                  'extras': ['Extras', 'All', 'Charting', 'Pt-by-Pt', 'Video'],
                  'minimum': ['Min Matches', 'All', '2', '3', '4', '5', '6', '7', '8', '9', '10', '12', '15'],
                  'minyears': ['Min Years', 'All', '2', '3', '4', '5', '6', '7', '8', '9', '10'],
                  'crank': ['vs Curr Rank', 'All', 'Top 10', 'Top 20', 'Top 50', 'Top 100', 'Active', 'Inactive']
                  };

var rmonths = {'Jan': '01',
                'Feb': '02',
                'Mar': '03',
                'Apr': '04',
                'May': '05',
                'Jun': '06',
                'Jul': '07',
                'Aug': '08',
                'Sep': '09',
                'Oct': '10',
                'Nov': '11',
                'Dec': '12'
                };

var months = {'01': 'Jan',
                '02': 'Feb',
                '03': 'Mar',
                '04': 'Apr',
                '05': 'May',
                '06': 'Jun',
                '07': 'Jul',
                '08': 'Aug',
                '09': 'Sep',
                '10': 'Oct',
                '11': 'Nov',
                '12': 'Dec'
                };

var titleTips = {'DR': 'Dominance Ratio: % of return points won\ndivided by % of serve points lost.',
                 'TPW': 'Total points won',
                 'RPW': 'Return points won',
                 'vA%': 'Ace rate against',
                 'v1st%': '1st serve return points won',
                 'v2nd%': '2nd serve return points won',
                 'BPCnv': 'Break point opportunities converted',
                 'BPSvd': 'Break point opportunities saved',
                 'A%': 'Ace rate',
                 'Ace%': 'Ace rate',
                 'DF%': 'Double fault rate',
                 '1st In': 'First serve percentage',
                 '1st%': 'First serve points won',
                 '2nd%': 'Second serve points won',
                 'Rk': "Player's ATP Ranking when the tournament began",
                 'Ranks': "Player's and partner's ATP Rankings when the tournament began",
                 'vRk': "Opponent's ATP Ranking when the tournament began",
                 'vRanks': "Opponents' ATP Rankings when the tournament began",
                 'TP': 'Total Points',
                 'DFs': 'Double faults',
                 'SP': 'Service points',
                 '1SP': '1st serve points',
                 '2SP': '2nd serve points',
                 'vA': 'Opponent aces',
                 'SPW': 'Service points won',
                 'BPSvd%': 'Percentage of break points saved',
                 'BPCnv%': 'Percentage of break points converted',
                 'MS': 'Number of H2H matches with stats\nincluded in the totals to the right',
                 'M': 'Matches played',
                 'Yrs': 'Number of years entered'
                 };

var hdrsServe = ['Date', 'Tournament', 'Surface', 'Rd', 'Rk', 'vRk', '', 'Score', 'More', 'DR', 'A%', 'DF%', '1stIn', '1st%', '2nd%', 'BPSvd', 'Time'];
var hdrsReturn = ['Date', 'Tournament', 'Surface', 'Rd', 'Rk', 'vRk', '', 'Score', 'More', 'DR', 'TPW', 'RPW', 'vA%', 'v1st%', 'v2nd%', 'BPCnv', 'Time'];
var hdrsRaw = ['Date', 'Tournament', 'Surface', 'Rd', 'Rk', 'vRk', '', 'Score', 'More', 'TP', 'Aces', 'DFs', 'SP', '1SP', '2SP', 'vA', 'Time'];

var hdrsDoubles = ['Date', 'Tournament', 'Surface', 'Rd', 'Ranks', 'vRanks', '', 'Score', 'DR', 'Time'];
var hdrsDoublesServe = ['Date', 'Tournament', 'Surface', 'Rd', '', 'Score', 'DR', 'A%', 'DF%', '1stIn', '1st%', '2nd%', 'BPSvd', 'Time'];
var hdrsDoublesReturn = ['Date', 'Tournament', 'Surface', 'Rd', '', 'Score', 'DR', 'TPW', 'RPW', 'vA%', 'v1st%', 'v2nd%', 'BPCnv', 'Time'];
var hdrsDoublesRaw = ['Date', 'Tournament', 'Surface', 'Rd', '', 'Score', 'TP', 'Aces', 'DFs', 'SP', '1SP', '2SP', 'vA', 'Time'];

var hdrsHead = ['H2Hs', 'Opponent', 'W', 'L', 'Win%', 'TB', 'W', 'L', 'TB%', 'First Match', 'Last Match', 'MS', 
                'DR', 'A%', 'DF%', '1stIn', '1st%', '2nd%', 'SPW', 'RPW', 'BPSvd%', 'BPCnv%'];
var hdrsEvents = ['Yrs', 'Event', 'Surface', 'M', 'W', 'L', 'Win%', 'TB', 'W', 'L', 'TB%', 'First', 'Last', 'Best', 'MS', 
                'DR', 'A%', 'DF%', '1stIn', '1st%', '2nd%', 'SPW', 'RPW', 'BPSvd%', 'BPCnv%'];                

var hdict = {'Left': 'L',
             'Right': 'R'
             };

var hdict2 = {'L': 'Left',
              'R': 'Right',
              '': 'Unknown'
             };
             
var levdict = {'Grand Slams': 'G',
               'Masters': 'M',
               'Challengers': 'C',
               'Qualifying': 'Q',
               'Davis Cup': 'D',
               'Juniors': 'J',
               'Futures': 'S'
               }

var levdict2 = {'G': 'Grand Slams',
               'M': 'Masters',
               //'C': 'Challengers',
               'Q': 'Qualifying',
               'D': 'Davis Cup',
               'J': 'Juniors',
               'S': 'Futures'
               }

var rddict = {'Final': 'F',
              'Semis': 'SF',
              'Quarters': 'QF',
              'R16': 'R16',
              'R32': 'R32',
              'R64': 'R64',
              'R128': 'R128',
              'Other': 'RR'
              }

var rddict2 = {'F': 'Final',
              'SF': 'Semis',
              'QF': 'Quarters',
              'R16': 'R16',
              'R32': 'R32',
              'R64': 'R64',
              'R128': 'R128',
              'RR': 'Other'
              }                            

function filterDict(fid, match, mults) {
    if (!$('#tabDubs').hasClass("tablink")) {var doubles = 1;}
    else {doubles = 0;}
    if (fid == 'hand') {
        if (hdict2[match.ohand] in mults) {return 1;}
        else if (match.obackhand == '1' && 'One-hand BH' in mults) {return 1;}
        else if (match.obackhand == '2' && 'Two-hand BH' in mults) {return 1;}
        else {return 0;}
        }
    if (fid == 'phand') {
        if (hdict2[match.phand] in mults) {return 1;}
        else {return 0;}
        }
    else if (fid == 'hands') {
        if ('Right/Right' in mults) {
            if (match.ohand == 'R' && match.o2hand == 'R') {return 1;}
            }
        if ('Left/Left' in mults) {
            if (match.ohand == 'L' && match.o2hand == 'L') {return 1;}
            }
        if ('Right/Left' in mults) {
            var hh = match.ohand + match.o2hand;
            if (hh == 'RL' || hh == 'LR') {return 1;}
            }
        return 0;
        }
    else if (fid == 'extras') { 
        if ('Charting' in mults && match.chartlink != "") {return 1;}
        else if ('Pt-by-Pt' in mults && match.pslink != "") {return 1;}
        else if ('Video' in mults && match.vidlink != "") {return 1;}
        else {return 0;}
        }
    else if (fid == 'age') {
        if ('Younger' in mults && (parseInt(match.obday)) > dob) {return 1;}
        else if ('Older' in mults && (parseInt(match.obday) < dob)) {return 1;}
        else if ('Under 21' in mults && (parseInt(match.date) - parseInt(match.obday)) < 210000) {return 1;}
        else if ('Under 23' in mults && (parseInt(match.date) - parseInt(match.obday)) < 230000) {return 1;}
        else if ('28 & Over' in mults && (parseInt(match.date) - parseInt(match.obday)) > 280000) {return 1;}
        else if ('30 & Over' in mults && (parseInt(match.date) - parseInt(match.obday)) > 300000) {return 1;}
        else {return 0;}
        }
    else if (fid == 'rank') {
        if (match.orank == 'UNR') {match.orank = 2000;}
        if (match.rank == 'UNR') {match.rank = 2000;}
        if (doubles == 1) {
            if (match.o2rank == 'UNR') {match.o2rank = 2000;}
            var vsrank = (parseInt(match.orank) + parseInt(match.o2rank))/2;
            if (match.prank == 'UNR') {match.prank = 2000;}
            var asrank = (parseInt(match.rank) + parseInt(match.prank))/2;
            }
        else {
            vsrank = parseInt(match.orank);
            asrank = parseInt(match.rank);
            }        
        if ('Top 5' in mults && vsrank < 6) {return 1;}
        else if ('Top 10' in mults && vsrank < 11) {return 1;}
        else if ('Top 20' in mults && vsrank < 21) {return 1;}
        else if ('Top 50' in mults && vsrank < 51) {return 1;}
        else if ('Top 100' in mults && vsrank < 101) {return 1;}
        else if ('11+' in mults && vsrank > 10) {return 1;}
        else if ('21+' in mults && vsrank > 20) {return 1;}
        else if ('51+' in mults && vsrank > 50) {return 1;}
        else if ('101+' in mults && vsrank > 100) {return 1;}
        else if ('Higher' in mults && (vsrank < asrank)) {return 1;}
        else if ('Lower' in mults && (vsrank > asrank)) {return 1;}
        else if ('Custom' in mults) {
            if (vsrank >= lowrank && vsrank <= highrank) {return 1;}
            return 0;
            }
        else {return 0;}
        }
    else if (fid == 'prank') {
        if (match.orank == 'UNR') {match.orank = 2000;}
        if (match.rank == 'UNR') {match.rank = 2000;}
        var vsrank = parseInt(match.prank);  // misleading variable name; partner rank
        var asrank = parseInt(match.rank);        // as 'vsrank'
        if ('Top 5' in mults && vsrank < 6) {return 1;}
        else if ('Top 10' in mults && vsrank < 11) {return 1;}
        else if ('Top 20' in mults && vsrank < 21) {return 1;}
        else if ('Top 50' in mults && vsrank < 51) {return 1;}
        else if ('Top 100' in mults && vsrank < 101) {return 1;}
        else if ('11+' in mults && vsrank > 10) {return 1;}
        else if ('21+' in mults && vsrank > 20) {return 1;}
        else if ('51+' in mults && vsrank > 50) {return 1;}
        else if ('101+' in mults && vsrank > 100) {return 1;}
        else if ('Higher' in mults && (vsrank < asrank)) {return 1;}
        else if ('Lower' in mults && (vsrank > asrank)) {return 1;}
        else if ('Custom' in mults) {
            if (vsrank >= lowrank && vsrank <= highrank) {return 1;}
            return 0;
            }
        else {return 0;}
        }
    else if (fid == 'crank') {
        if (!(match.opp in currRank)) {
            if ('Inactive' in mults) {return 1;}
            else {return 0;} // disallows, say, 'Retired' + 'Top 10' -- not strictly correct    
            }  
        else if ('Top 10' in mults && parseInt(currRank[match.opp]) < 11) {return 1;}
        else if ('Top 20' in mults && parseInt(currRank[match.opp]) < 21) {return 1;}
        else if ('Top 50' in mults && parseInt(currRank[match.opp]) < 51) {return 1;}
        else if ('Top 100' in mults && parseInt(currRank[match.opp]) < 101) {return 1;}
        else if ('Active' in mults) {return 1;}
        else {return 0;}
        }        
    else if (fid == 'asrank') {
        if (match.rank == 'UNR') {match.rank = 2000;}
        if ('Number 1' in mults&& parseInt(match.rank) <= 1) {return 1;}
        if ('Top 5' in mults && parseInt(match.rank) <= 5) {return 1;}
        if ('Top 10' in mults && parseInt(match.rank) <= 10) {return 1;}
        else if ('Top 20' in mults && parseInt(match.rank) <= 20) {return 1;}
        else if ('Top 50' in mults && parseInt(match.rank) <= 50) {return 1;}
        else if ('Top 100' in mults && parseInt(match.rank) <= 100) {return 1;}
        else if ('Top 200' in mults && parseInt(match.rank) <= 200) {return 1;}
        else if ('2+' in mults && parseInt(match.rank) >= 2) {return 1;}
        else if ('6+' in mults && parseInt(match.rank) >= 6) {return 1;}
        else if ('11+' in mults && parseInt(match.rank) >= 11) {return 1;}
        else if ('21+' in mults && parseInt(match.rank) >= 21) {return 1;}
        else if ('51+' in mults && parseInt(match.rank) >= 51) {return 1;}
        else if ('101+' in mults && parseInt(match.rank) >= 101) {return 1;}
        else if ('201+' in mults && parseInt(match.rank) >= 201) {return 1;}
        else if ('Custom' in mults) {
            if (parseInt(match.rank) >= lowrank && parseInt(match.rank) <= highrank) {return 1;}
            return 0;
            }
        else {return 0;}
        }
    else if (fid == 'level') {
        if ('All ATP' in mults) {
            if (match.level == 'Q' || match.level == 'C') {}
            else if (match.level == 'J' || match.level == 'S') {}
            else if (match.level == '15' || match.level == '25') {}
            else if (match.round == 'Q1' || match.round == 'Q2') {} // redundant, but current week
            else if (match.round == 'Q3' || match.round == 'Q4') {} // qualies 'level' aren't correctly labeled
            else {return 1;} 
            }
        if ('All Pro' in mults) {
            if (match.level == 'J') {}
            else {return 1;}
            }
        if ('Challengers' in mults) {
            if (match.level != 'C') {}
            else if (match.round == 'Q1' || match.round == 'Q2') {} // redundant, but current week
            else if (match.round == 'Q3' || match.round == 'Q4') {} // qualies 'level' aren't correctly labeled
            else {return 1;} 
            }
        if ('CH Qualies' in mults) {
            if (match.level != 'C') {}
            else if (match.round.slice(0,1) == 'R' || match.round == 'QF') {} // redundant, but current week
            else if (match.round == 'SF' || match.round == 'F') {} // qualies 'level' aren't correctly labeled
            else {return 1;} 
            }
        if (levdict2[match.level] in mults) {return 1;}
        else {return 0;}
        }
    else if (fid == 'round') {
        if (rddict2[match.round] in mults) {return 1;}
        if ('First Round' in mults && parseInt(match.roundnum) == 1) {return 1;}
        if ('Second Round' in mults && parseInt(match.roundnum) == 2) {return 1;}
        if ('Third Round' in mults && parseInt(match.roundnum) == 3) {return 1;}
        if ('First Match' in mults && parseInt(match.matchnum) == 1) {return 1;}
        if ('Second Match' in mults && parseInt(match.matchnum) == 2) {return 1;}
        if ('Third Match' in mults && parseInt(match.matchnum) == 3) {return 1;}
        else {return 0;}
        }
    else if (fid == 'span') {
        if ('Career' in mults) {return 1;}
        else if ('Last 52' in mults) {
            var keyday;
            if (doubles == 1) {
                if (active_dubs == 1) {keyday = today;}
                else {keyday = lastdate_dubs;}
                }
            else {
                if (active == 1) {keyday = today;}
                else {keyday = lastdate;}
                }
            if (parseInt(match.date) < (keyday-10000)) {}
            //else if (parseInt(match.date) > keyday) {}
            else {return 1;}
            }
        if ('Custom' in mults) {
            if (parseInt(match.date) >= startdate && parseInt(match.date) <= enddate) {return 1;}
            return 0;
            }
        var yr = match.date.slice(0,4);
        var mmdd = match.date.slice(4);
        var syr;
        if (parseInt(mmdd) > 1226) {
            syr = (parseInt(yr) + 1) + '';
            }
        else {syr = yr;}
        if (syr in mults) {return 1;}
        else {return 0;}
        }
    else if (fid == 'entry') {  // -1 because entry can be '' for seeds
        if ('Qualifier' in mults && (match.entry == 'Q' || match.entry == 'LL')) {return 1;}
        else if ('Wild Card' in mults && match.entry == 'WC') {return 1;}
        else if ('Seeded' in mults && match.seed.length > 0) {return 1;}
        else if (match.level == 'F' || match.level == 'D') {return 0;}
        else if ('Unseeded' in mults && match.seed.length == 0) {return 1;}
        else {return 0;}
        }
    else if (fid == 'oentry') {  // -1 because entry can be '' for seeds
        if ('Qualifier' in mults && (match.oentry == 'Q' || match.oentry == 'LL')) {return 1;}
        else if ('Wild Card' in mults && match.oentry == 'WC') {return 1;}
        else if ('Seeded' in mults && match.oseed.length > 0) {return 1;}
        else if (match.level == 'F' || match.level == 'D') {return 0;}
        else if ('Unseeded' in mults && match.oseed.length == 0) {return 1;}
        else {return 0;}
        }
    else if (fid == 'height') {  
        if ('Shorter' in mults && parseInt(match.oht) < ht) {return 1;}
        else if ('Taller' in mults && parseInt(match.oht) > ht) {return 1;}
        else if ("Under 5'10" in mults && parseInt(match.oht) < 178) {return 1;}
        else if ("Under 6'0" in mults && parseInt(match.oht) < 183) {return 1;}
        else if ("Over 6'2" in mults && parseInt(match.oht) > 188) {return 1;}
        else if ("Over 6'4" in mults && parseInt(match.oht) > 193) {return 1;}
        else {return 0;}
        }
    else if (fid == 'sets') {
        if (match.score == '') {return 0;}
        if (match.score == 'W/O') {return 0;}
        if ('All Best of 3' in mults && (parseInt(match.max) == 3)) {return 1;}
        else if ('All Best of 5' in mults && (parseInt(match.max) == 5)) {return 1;}
        if ('Straights' in mults || 'Deciders' in mults) {
            //if (match.score == 'W/O') {return 0;} // only because later filters could not possibly include this
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if ('Straights' in mults && (match.max/nsets >= 1.4)) {return 1;}
            else if ('Deciders' in mults && (parseInt(match.max) == nsets)) {return 1;}
            }
        if ('5-Setters' in mults && (parseInt(match.max) == 5)) {
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if (nsets == 5) {return 1;}
            }
        if ('4-Setters' in mults && (parseInt(match.max) == 5)) {
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if (nsets == 4) {return 1;}
            }
        if ('3 Sets (of 5)' in mults && (parseInt(match.max) == 5)) {
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if (nsets == 3) {return 1;}
            }
        if ('3 Sets (of 3)' in mults && (parseInt(match.max) == 3)) {
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if (nsets == 3) {return 1;}
            }
        if ('2-Setters' in mults && (parseInt(match.max) == 3)) {
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if (nsets == 2) {return 1;}
            }
        }
    else if (fid == 'scores') {
        if (match.score.indexOf('7-6') != -1) {
            if ('All tiebreaks' in mults) {return 1;}
            else if ('TB won' in mults && match.wl == 'W') {return 1;}
            else if ('TB lost' in mults && match.wl == 'L') {return 1;}
            }
        if (match.score.indexOf('6-7') != -1) {
            if ('All tiebreaks' in mults) {return 1;}
            else if ('TB won' in mults && match.wl == 'L') {return 1;}
            else if ('TB lost' in mults && match.wl == 'W') {return 1;}
            }
        if ('Deciding TB' in mults) {
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if (parseInt(match.max) == nsets) {
                var lastset = sets[sets.length-1];
                if (lastset.indexOf('7-6') != -1) {return 1;}
                else if (lastset.indexOf('6-7') != -1) {return 1;}
                }     
            }
        if (match.score.indexOf('7-5') != -1) {
            if ('All 7-5' in mults) {return 1;}
            else if ('7-5 won' in mults && match.wl == 'W') {return 1;}
            else if ('7-5 lost' in mults && match.wl == 'L') {return 1;}
            }
        if (match.score.indexOf('5-7') != -1) {
            if ('All 7-5' in mults) {return 1;}
            else if ('7-5 won' in mults && match.wl == 'L') {return 1;}
            else if ('7-5 lost' in mults && match.wl == 'W') {return 1;}
            }  
        if (match.score.indexOf('6-0') != -1) {
            if ('All bagels' in mults) {return 1;}
            else if ('6-0 won' in mults && match.wl == 'W') {return 1;}
            else if ('6-0 lost' in mults && match.wl == 'L') {return 1;}
            }
        if (match.score.indexOf('0-6') != -1) {
            if (match.score.indexOf('70-68') != -1) {return 0;} 
            else if ('All bagels' in mults) {return 1;}
            else if ('6-0 won' in mults && match.wl == 'L') {return 1;}
            else if ('6-0 lost' in mults && match.wl == 'W') {return 1;}
            }  
        if (match.score.indexOf('6-1') != -1) {
            if ('All 6-1' in mults) {return 1;}
            else if ('6-1 won' in mults && match.wl == 'W') {return 1;}
            else if ('6-1 lost' in mults && match.wl == 'L') {return 1;}
            }
        if (match.score.indexOf('1-6') != -1) {
            if ('All 6-1' in mults) {return 1;}
            else if ('6-1 won' in mults && match.wl == 'L') {return 1;}
            else if ('6-1 lost' in mults && match.wl == 'W') {return 1;}
            } 
        return 0;                    
        }
    else if (fid == 'results') {
        if (match.score == '') {return 0;}
        if (match.score.indexOf('W') != -1 || match.score.indexOf('w') != -1) {
            if ('W by W/O' in mults && match.wl == 'W') {return 1;}
            else if ('L by W/O' in mults && match.wl == 'L') {return 1;}
            else {return 0;}
            } // only because later filters could not possibly include this
        else if (match.score.slice(-3) == 'RET') {
            if ('W by RET' in mults && match.wl == 'W') {return 1;}
            else if ('Wins' in mults && match.wl == 'W') {return 1;}
            else if ('L by RET' in mults && match.wl == 'L') {return 1;}
            else if ('Losses' in mults && match.wl == 'L') {return 1;}
            else {return 0;}
            }  
        else if (match.score.slice(-3) == 'DEF' || match.score.slice(-3) == 'ABD') {
            if ('Completed' in mults) {return 0;}
            }     
        else if ('Completed' in mults) {return 1;}
        if ('Wins' in mults && match.wl == 'W') {return 1;}
        else if ('Losses' in mults && match.wl == 'L') {return 1;}
        var sets = match.score.split(' ');
        if (sets[1] == 'RET') {return 0;} // only because this is the last filter
        var firstset = sets[0];
        var a = parseInt(firstset[0]), b = parseInt(firstset[2]);
        var wonfirst;
        if (match.wl == 'W') {
            if (a>b) {wonfirst=1;}
            else {wonfirst=0;}
            }
        else {
            if (a>b) {wonfirst=0;}
            else {wonfirst=1;}
            }
        if ('Won 1st Set' in mults && wonfirst == 1) {return 1;}
        else if ('Lost 1st Set' in mults && wonfirst == 0) {return 1;}
        if (sets.length < 3) {return 0;} // limit to five-setters
        else if (sets[2] == 'RET') {return 0;} // only because this is the last filter
        var secondset = sets[1];
        var a = parseInt(secondset[0]), b = parseInt(secondset[2]);
        var wonsecond;
        if (match.wl == 'W') {
            if (a>b) {wonsecond=1;}
            else {wonsecond=0;}
            }
        else {
            if (a>b) {wonsecond=0;}
            else {wonsecond=1;}
            }
        if ('Won Sets 1&2' in mults && (wonfirst == 1 && wonsecond == 1)) {return 1;}
        else if ('Lost Sets 1&2' in mults && (wonsecond == 0 && wonfirst == 0)) {return 1;}
        else if ('Split 1&2' in mults && (wonfirst != wonsecond)) {return 1;}
        if (sets.length < 4) {return 0;} // limit to four-plus setters
        else if (sets[3] == 'RET') {return 0;} // only because this is the last filter
        var thirdset = sets[2];
        var a = parseInt(thirdset[0]), b = parseInt(thirdset[2]);
        var wonthird;
        if (match.wl == 'W') {
            if (a>b) {wonthird=1;}
            else {wonthird=0;}
            }
        else {
            if (a>b) {wonthird=0;}
            else {wonthird=1;}
            }
        var setswon = wonfirst+wonsecond+wonthird
        if ('Up 2-1 Sets' in mults && setswon == 2) {return 1;}
        else if ('Down 1\u20112 Sets' in mults && setswon == 1) {return 1;}        
        return 0;
        }
    else if (fid == 'tourney') {
        if ('Tour Finals' in mults) {
            if (match.tourn == 'Tour Finals' || match.tourn == 'Masters Cup') {return 1;}
            }
        else if ('Olympics' in mults) {
            if (match.tourn.indexOf('Olympics') != -1) {return 1;}
            }
        else if ('Davis Cup' in mults) {
            if (match.tourn.indexOf('Davis Cup') != -1) {return 1;}
            }
        else if (match.tourn.slice(-2) == ' Q') {
            if (match.tourn.slice(0,-2) in mults) {return 1;}
            }
        if (match.tourn in mults) {return 1;}
        else if (match.tourn.slice(4) in mults) {return 1;}
        return 0;
        }
    else if (fid == 'country') {
        if (match.ocountry in mults) {return 1;}
        return 0;
        }
    else if (fid == 'surface') {
        if (match.surf in mults) {return 1;}
        return 0;
        }
    else if (fid == 'h2h') {
        if (match.opp in mults) {return 1;}
        return 0;
        }
    else if (fid == 'not') {
        if (match.opp in mults) {return 0;}
        return 1;
        }
    else if (fid == 'partner') {
        if (match.partner in mults) {return 1;}
        return 0;        
        }
    else if (fid == 'opp') {
        if (match.opp in mults) {return 1;}
        else if (match.opp2 in mults) {return 1;}
        return 0;        
        }
    else if (fid == 'oppteam') {
        var fullteam = match.opp + '/' + match.opp2;
        if (fullteam in mults) {return 1;}
        return 0;        
        }    
    else if (fid == 'stats') {
        //alert('in stats filter');
        // eventually validate / check that choice and operator are not defaults
        var thresh = Number(statinput);
        if (isNaN(thresh) == true) {return 1;} // some kind of message?
        // get relevant stat for this match; eventually put this in an external function
        // if no stats, return 0 ?
        var mstat = 0;
        if (statchoice == 'Dom Ratio') {
            if (match.ofwon == "") {return 0;}
            var rpw = 1 - (parseInt(match.ofwon) + parseInt(match.oswon))/match.opts; // dominance ratio:
            var spl = 1 - ((parseInt(match.fwon) + parseInt(match.swon))/match.pts);
            mstat = rpw/spl;
            }
        else if (statchoice == 'Ace Perc') {
            if (match.aces == "") {return 0;}
            mstat = (match.aces/match.pts)*100;
            }
        else if (statchoice == 'DF Perc') {
            if (match.dfs == "") {return 0;}
            mstat = (match.dfs/match.pts)*100;
            }
        else if (statchoice == '1st In') {
            if (match.firsts == "") {return 0;}
            mstat = (match.firsts/match.pts)*100;
            }
        else if (statchoice == '1st WPc') {
            if (match.fwon == "") {return 0;}
            mstat = (match.fwon/match.firsts)*100;
            }
        else if (statchoice == '2nd WPc') {
            if (match.swon == "") {return 0;}
            mstat = (match.swon/(match.pts-match.firsts))*100;
            }
        else if (statchoice == 'BP Svd Pc') {
            if (match.saved == "") {return 0;}
            mstat = (match.saved/match.chances)*100;
            }
        else if (statchoice == 'BP Saved') {
            if (match.saved == "") {return 0;}
            mstat = parseInt(match.saved);
            }
        else if (statchoice == 'BPC Faced') {
            if (match.chances == "") {return 0;}
            mstat = parseInt(match.chances);
            }
        else if (statchoice == 'TPW') {
            if (match.fwon == "") {return 0;}
            var pointswon = parseInt(match.fwon) + parseInt(match.swon) + (match.opts - match.ofwon - match.oswon);
            mstat = (pointswon/(parseInt(match.pts) + parseInt(match.opts)))*100;
            }
        else if (statchoice == 'RPW') {
            if (match.ofwon == "") {return 0;}
            mstat = (1 - ((parseInt(match.ofwon) + parseInt(match.oswon))/match.opts))*100;
            }
        else if (statchoice == 'vAce Pc') {
            if (match.oaces == "") {return 0;}
            mstat = (match.oaces/match.opts)*100;
            }
        else if (statchoice == 'v1st WPc') {
            if (match.ofwon == "") {return 0;}
            mstat = (1 - (match.ofwon/match.ofirsts))*100;
            }
        else if (statchoice == 'v2nd WPc') {
            if (match.oswon == "") {return 0;}
            mstat = (1 - (match.oswon/(match.opts-match.ofirsts)))*100;
            }
        else if (statchoice == 'BP Cnv Pc') {
            if (match.osaved == "") {return 0;}
            mstat = (1 - (match.osaved/match.ochances))*100;
            }
        else if (statchoice == 'BP Conv') {
            if (match.ochances == "") {return 0;}
            mstat = (match.ochances - match.osaved);
            }
        else if (statchoice == 'BP Chncs') {
            if (match.ochances == "") {return 0;}
            mstat = parseInt(match.ochances);
            }
        else if (statchoice == 'Tot Pts') {
            if (match.pts == "") {return 0;}
            mstat = (parseInt(match.pts) + parseInt(match.opts));
            }
        else if (statchoice == 'Aces') {
            if (match.aces == "") {return 0;}
            mstat = parseInt(match.aces);
            }
        else if (statchoice == 'DFs') {
            if (match.dfs == "") {return 0;}
            mstat = parseInt(match.dfs);
            }
        else if (statchoice == 'Sv Pts') {
            if (match.pts == "") {return 0;}
            mstat = parseInt(match.pts);
            }
        else if (statchoice == '1Sv Pts') {
            if (match.firsts == "") {return 0;}
            mstat = parseInt(match.firsts);
            }
        else if (statchoice == '2Sv Pts') {
            if (match.pts == "") {return 0;}
            mstat = match.pts-match.firsts;
            }
        else if (statchoice == 'vAces') {
            if (match.oaces == "") {return 0;}
            mstat = parseInt(match.oaces);
            }
        else if (statchoice == 'Time') {
            if (match.time == "") {return 0;}
            mstat = parseInt(match.time);
            }            
        else {return 1;} // invalid stat choice; some kind of message?
        // separate based on operator
        if (statoperatorchoice == 'gt' && mstat <= thresh) {return 0;}
        else if (statoperatorchoice == 'lt' && mstat >= thresh) {return 0;}
        else if (statoperatorchoice == 'ge' && mstat < thresh) {return 0;}
        else if (statoperatorchoice == 'le' && mstat > thresh) {return 0;}
        else if (statoperatorchoice == 'eq' && mstat != thresh) {return 0;}
        else {return 1;} // invalid operator; some kind of message?
        }
    }
    
function unitePartners(multselect) {
    // filter displays doubles team on two lines,
    // so filter parser thinks that's two items, not 
    // one. this function glues them back together
    var mults = {};
    var mult_list = [];
    for (var i=0; i<multselect.length; i++) {
        if (i % 2 == 0) {
            var team = multselect[i];
            }
        else {
            team = team + multselect[i].slice(1);
            mults[team.replace(/\u00a0/g, ' ')] = 1;
            mult_list.push(team.replace(/\u00a0/g, ' '));
            }
        }  
    return [mults, mult_list];  
    }

function genfilter(fid, first, match, att) {
    // fid = filter id; first = default select; match = relevant match object; att = rel attribute
    // find e.g. 'surfaceselected' text -- that's it
    var selname = '.' + fid + 'selected';
    var multselect = $(selname).text().split(fourspaces + fourspaces).slice(1); // list of selected for this filter
    if (multselect[0] == undefined) { // ugly IE hack
    	var multselect = $(selname).text().split("        ").slice(1);
    	}
    if (fid == "oppteam" && multselect[0] != "All") {
        var mult_unit = unitePartners(multselect);
        var mults = mult_unit[0];
        }
    else {
        var mults = {};
        // make list into object, for 'in' searching
        for (var i=0; i<multselect.length; i++) {mults[multselect[i].replace(/\u00a0/g, ' ')] = 1;}  
        }
    if ('All' in mults) {return 1;}
    else if (filterDict(fid, match, mults) != 1) {return 0;} // this is where it gets messy
    return 1;
    }

function hidePermalink() {
    if ($(".perma").text() == 'Hide Permalink') { // generalize this, also add to other toggles that change permalink?
        $(".perma").html('Table Permalink');
        $("#permalink").remove();
        }
    }

function getWinLossTiebreak(match) {
    var tb = 0, tbwon = 0;
    if (match.score.search('W/O') == -1 && match.score != '') {
        if (match.wl == 'W') {match["wins"] = 1; match["losses"] = 0;}
        else {match["losses"] = 1; match["wins"] = 0;}
        }
    else {match["wins"] = 0; match["losses"] = 0;}
    // do some calculations
    sets = match.score.split(' ');       
    for (var i=0; i<sets.length; i++) {
        // tb counting
        if (sets[i].slice(0, 3) == '7-6' || sets[i] == '13-12') {
            tb++;
            if (match.wl == 'W') {tbwon++;}
            }
        else if (sets[i].slice(0, 3) == '6-7') {
            tb++;
            if (match.wl == 'L') {tbwon++;}
            }
        }
    match["tiebreaks"] = tb;
    match["tbwon"] = tbwon;
    return match;
    }

function makeSplitStatRow(mt) {
    var wl = mt["wins"] + '-' + mt["losses"] + ' (' + alignRound((mt["wins"]/(mt['wins'] + mt['losses'])), 0, 1) + ')';
    var tbrecord = mt["tbwon"] + '-' + (mt["tiebreaks"]-mt["tbwon"]) + ' (' + alignRound((mt["tbwon"]/(mt["tiebreaks"])), 0, 1) + ')';
    var acerate = alignRound((mt["aces"]/mt["pts"]), 1, 1);
    var firstin = alignRound((mt["firsts"]/mt["pts"]), 1, 1);
    var fwin = alignRound((mt.fwon/mt.firsts), 1, 1);
    var swin = alignRound((mt.swon/(mt.pts-mt.firsts)), 1, 1);
    var rpw = 1 - (mt.ofwon + mt.oswon)/mt.opts;
    var rpwShow = alignRound(rpw, 1, 1)
    var spw = (mt.fwon + mt.swon)/mt.pts;
    var spwShow = alignRound(spw, 1, 1)
    var spl = 1 - spw;
    var tpw = (mt.fwon + mt.swon + mt.opts - mt.ofwon - mt.oswon)/(mt.pts + mt.opts);
    var tpwShow = alignRound(tpw, 1, 1)
    var domratio = alignRound(rpw/spl, 2);
    var holds = mt.games - (mt.chances - mt.saved);
    var hld = holds / mt.games;
    var hldShow = alignRound(hld, 1, 1);
    var breaks = mt.ochances - mt.osaved;
    var brk = breaks / mt.ogames;
    var brkShow = alignRound(brk, 1, 1);
    var statrow = [wl, tbrecord, acerate, firstin, fwin, swin, hldShow, spwShow, brkShow, rpwShow, tpwShow, domratio];
    return statrow;
    }

var matchhead = ["date","tourn","surf","level","wl","rank","seed","entry","round",
                 "score","max","opp","orank","oseed","oentry","ohand","obday",
                 "oht","ocountry","oactive","time","aces","dfs","pts","firsts","fwon",
                 "swon",'games',"saved","chances","oaces","odfs","opts","ofirsts",
                 "ofwon","oswon",'ogames',"osaved","ochances", "obackhand", "chartlink",
                 "pslink","whserver","matchid","wh","roundnum","matchnum"]
                 
var matchhead_dubs = ["date","tourn","surf","level","wl","rank","seed","entry","round",
                 "score","max","partner", "partnerlast", "prank", "phand", "pbday", "pht", "pcountry", "pactive",
              "oseed", "oentry", "opp","olast","orank","ohand","obday","oht","ocountry","oactive",
              "opp2","o2last","o2rank","o2hand","o2bday","o2ht","o2country","o2active",
              "time","aces","dfs","pts","firsts","fwon",
                 "swon",'games',"saved","chances","oaces","odfs","opts","ofirsts",
                 "ofwon","oswon",'ogames',"osaved","ochances", "obackhand", "chartlink",
                 "pslink","whserver","matchid","wh","roundnum","matchnum"]

var totals = {"aces": 0,"pts": 0,"firsts": 0,"fwon": 0, "swon": 0, "oaces": 0,"opts": 0,"ofirsts":0,"ofwon": 0,"oswon": 0,
              "wins":0, "losses":0, "tiebreaks":0, "tbwon":0, "games":0, "ogames":0, "saved":0, "osaved":0, "ochances":0, "chances":0};
//var stats = ["aces","pts","firsts","fwon", "swon", "oaces","opts","ofirsts","ofwon","oswon", "wins","losses", "tiebreaks", "tbwon"];
// extending this for h2h tally purposes
var stats = ["aces","dfs","pts","firsts","fwon", "swon", "saved", "chances", "oaces","opts", "ofirsts","ofwon","oswon", 
             "osaved","ochances","wins","losses", "tiebreaks", "tbwon", "games", "ogames"];

function addYearSplits() {
    if (!$('#tabDubs').hasClass("tablink")) {
        var splits_head = matchhead_dubs;
        var splits_matches = matchmx_dubs;
        }
    else {
        var splits_head = matchhead;
        var splits_matches = matchmx;
        }
    // remove/set aside bottom row?! need id tag for bottom row
    var splitlist = [];
    var splits = {'Career': $.extend(true, {}, totals)};
    for (m=0; m<splits_matches.length; m++) {
        var match = {}
        for (var x=0; x<splits_head.length; x++) {
            if (splits_matches[m].length <= x) {match[splits_head[x]] = '';}
            else {match[splits_head[x]] = splits_matches[m][x];}
            } 
        var msplits = ['Career'];  
        //var match = matches[m];
        if (parseInt(match.date.slice(4)) > 1224) {var year = (parseInt(match.date.slice(0,4)) + 1) + '';}
        else {var year = match.date.slice(0,4);}
        if (year in splits) {}
        else {
            splits[year] = $.extend(true, {}, totals);
            splitlist.push(year);
            }
        msplits.push(year);
        match = getWinLossTiebreak(match);   
        for (u=0; u<stats.length; u++) {
            t = stats[u];
            for (i=0; i<msplits.length; i++) {
                if (match[t] != '') {splits[msplits[i]][t] = splits[msplits[i]][t] + parseInt(match[t]);}
                }
            }
        }
    splitlist.sort();
    splitlist.reverse();
    splitlist.push('Career');
    for (j=0; j<splitlist.length; j++) {
        var idnum = j+1;
        if (j == (splitlist.length-1)) {idnum = 0;}
        var yearid = 'sA' + idnum;
        var $row = $('<tr>').attr('class', 'yearsplits').attr('id', yearid);
        var split = splitlist[j], mt = splits[split];
        var statrow = makeSplitStatRow(mt);
        var $splitspan = $('<span>').text(split + ' ');
        //var $splitclick = $('<span>').text('(+)').attr('class', 'likelink splitclick');
        $row.append($('<td>').append($splitspan)); //.append($splitclick)); 
        var cells = [];
        for (var i=0; i < statrow.length; i++) {           
            $row.append($('<td>').text(statrow[i]).attr('align', 'right'));
            }
        $("#overall").append($row);
        }
    }

var splitIds = {'Last 52': '',
                'Hard': 'B0',
                'Clay': 'B1',
                'Grass': 'B2',
                'Grand Slams': 'C0',
                'vs Top 10': 'I0',
                'vs Righties': 'K0',
                'vs Lefties': 'K1',
                'Best of 3': 'F2',
                'Best of 5': 'F3',
                'Deciding Sets': 'F5'
                }

function applyPrefilters() {
    if (prefilters.length != 0) {
        for (j=0; j<filterlist.length; j++) {
            var filter = filterlist[j];
            if (filter in prefilters) {
                $("." + filter + "choice").removeClass("selected").removeClass(filter + "selected");
                if (filter in alphaFilters) {
                    var applylist = prefilters[filter].split(',');
                    }
                else if (filter == 'stats') {
                    var applylist = [prefilters[filter]]; // will break if ever multiple stat params
                    }
                else {
                    var applylist = prefilters[filter].split('i');
                    }
                for (k=0; k<applylist.length; k++) {
                    // treat spanCustom separately
                    if (applylist[k].slice(0,2) == 'cx' && filter != "stats") {
                        $("#" + filter + 'Customqq').addClass("selected").addClass(filter + "selected");
                        if (filter == 'span') {
                            startdate = applylist[k].slice(2,10);
                            enddate = applylist[k].slice(10,18);
                            }
                        else if (filter == 'rank') {
                            lowrank = parseInt(applylist[k].slice(2,7)) - 10000;
                            highrank = parseInt(applylist[k].slice(7,12)) - 10000;
                            }
                        }
                    else if (applylist[k].slice(0,2) == 'cx' && filter == "stats") {  
                        $("#" + filter + '0').addClass("selected").addClass(filter + "selected");
                        var statparamstring = applylist[k].slice(2,-2);
                        var statparams = statparamstring.split('-');
                        statchoice = statparams[0].replace(/_/g," ");
                        statoperatorchoice = statparams[1];
                        statinput = statparams[2];
                        }                    
                    else {              
                        $("#" + filter + applylist[k]).addClass("selected").addClass(filter + "selected");
                        }
                    if ($("#" + filter + "head").hasClass('closed')) {$("#" + filter + "head").addClass("selected");}
                    }
                }
            }
        }
    if (opponent.length != 0) {
        var opps = opponent.split(',');
        for (i=0; i<opps.length; i++) {
            var player = insertNameSpaces(opps[i]);
            setPlayerFilter(player, 0, 0);
            setOpponentFilter(player, 0, 0);
            }
        for (i=0; i<opps.length; i++) {
            var playerid = '#h2h' + opps[i];
            $(playerid).addClass('selected').addClass('h2hselected');
            var playerid2 = '#opp' + opps[i];
            $(playerid2).addClass('selected').addClass('oppselected');
            }
        $("#h2hhead").addClass("selected");
        $("#opphead").addClass("selected");
        }
    else {
        $(".h2hchoice").removeClass("selected").removeClass("h2hselected");
        $("#h2hdef").addClass("selected").addClass("h2hselected");
        $(".oppchoice").removeClass("selected").removeClass("oppselected");
        $("#oppdef").addClass("selected").addClass("oppselected");
        }
    if (exclude.length != 0) {
        var nots = exclude.split(',');
        for (i=0; i<nots.length; i++) {
            var player = insertNameSpaces(nots[i]);
            setNotPlayerFilter(player, 0);
            }
        for (i=0; i<nots.length; i++) {
            var playerid = '#not' + nots[i];
            $(playerid).addClass('selected').addClass('notselected');
            }
        $("#nothead").addClass("selected");
        }
    else {
        $(".notchoice").removeClass("selected").removeClass("notselected");
        $("#notdef").addClass("selected").addClass("notselected");
        //$(".notchoice").toggle();
        }
    if (partner.length != 0) {
        var partners = partner.split(',');
        for (i=0; i<partners.length; i++) {
            var player = insertNameSpaces(partners[i]);
            setPartnerFilter(player, 0);
            }
        for (i=0; i<partners.length; i++) {
            var playerid = '#partner' + partners[i];
            $(playerid).addClass('selected').addClass('partnerselected');
            }
        $("#partnerhead").addClass("selected");
        }
    else {
        $(".partnerchoice").removeClass("selected").removeClass("partnerselected");
        $("#partnerdef").addClass("selected").addClass("partnerselected");
        }
    if (opp_team.length != 0) {
        var teams = opp_team.split(',');
        for (i=0; i<teams.length; i++) {
            var player = insertNameSpaces(teams[i]);
            setOppteamFilter(player, 0);
            }
        for (i=0; i<teams.length; i++) {
            var playerid = '#oppteam' + teams[i];
            $(playerid).addClass('selected').addClass('oppteamselected');
            }
        $("#oppteamhead").addClass("selected");
        }
    else {
        $(".oppteamchoice").removeClass("selected").removeClass("oppteamselected");
        $("#oppteamdef").addClass("selected").addClass("oppteamselected");
        }
    $(".tabview").addClass('tablink');
    if (view.length != 0) {
        if (view == "h2h") {
            $("#tabHead").removeClass('tablink');
            $(".header").show();
            $("#h2hhead").hide();
            $("#nothead").hide();
            $("#minyearshead").hide(); 
            $(".minyearschoice").hide();
            $("#partnerhead").hide();
            $(".partnerchoice").hide();
            $("#opphead").hide();
            $(".oppchoice").hide();
            $("#oppteamhead").hide();
            $(".oppteamchoice").hide();
            $("#handshead").hide();
            $(".handschoice").hide();    
            $("#prankhead").hide();
            $(".prankchoice").hide();
            $("#phandhead").hide();
            $(".phandchoice").hide();        
            }
        else if (view == "events") {
            $("#tabEvents").removeClass('tablink');
            $(".header").show();
            $("#h2hhead").hide();
            $("#nothead").hide();  
            $("#partnerhead").hide();
            $(".partnerchoice").hide();
            $("#opphead").hide();
            $(".oppchoice").hide();
            $("#oppteamhead").hide();
            $(".oppteamchoice").hide();
            $("#handshead").hide();
            $(".handschoice").hide();   
            $("#prankhead").hide();
            $(".prankchoice").hide();
            $("#phandhead").hide();
            $(".phandchoice").hide();        
            }
        else if (view == "doubles") {
            $("#tabEvents").removeClass('tablink');
            $(".header").show();
            $("#h2hhead").hide();
            $("#nothead").hide(); 
            $("#minimumhead").hide();
            $(".minimumchoice").hide();
            $("#minyearshead").hide();
            $(".minyearschoice").hide();
            $("#crankhead").hide();
            $(".crankchoice").hide();
            $("#handhead").hide();
            $(".handchoice").hide();	
            $("#agehead").hide();
            $(".agechoice").hide();
            $("#heighthead").hide();
            $(".heightchoice").hide();
            $("#countryhead").hide();
            $(".countrychoice").hide();
            }
        }
    else { // if view == '', set to results
	      $("#tabResults").removeClass('tablink');
        $(".header").show();
        $("#minimumhead").hide();
        $(".minimumchoice").hide();
        $("#minyearshead").hide();
        $(".minyearschoice").hide();
        $("#partnerhead").hide();
        $(".partnerchoice").hide();
        $("#opphead").hide();
        $(".oppchoice").hide();
        $("#oppteamhead").hide();
        $(".oppteamchoice").hide();
        $("#handshead").hide();
        $(".handschoice").hide();    
        $("#prankhead").hide();
        $(".prankchoice").hide();
        $("#phandhead").hide();
        $(".phandchoice").hide();    	
       } 
    }

var spelled = {'A': '', 'D': '', 'N': '', 'I': '', 'T': ''};
function newPrefilters(filterstring) {
    //alert(filterstring);
    var io = filterstring.indexOf('&q=');
    if (io == -1) {opponent = '';}
    else {
        opponent = filterstring.slice(io+3);
        filterstring = filterstring.slice(0, io);
        }
    var xo = filterstring.indexOf('&x=');
    if (xo == -1) {exclude = '';}
    else {
        exclude = filterstring.slice(xo+3);
        filterstring = filterstring.slice(0, xo);
        }
    var vo = filterstring.indexOf('&view=');
    if (vo == -1) {view = '';}
    else {
        view = filterstring.slice(vo+6);
        filterstring = filterstring.slice(0, vo);
        }
    //alert(filterstring);
    prefilters = {};
    filterstring += 'Z';
    var start = 0;
    if (filterstring[0] in spelled) {var go = 0;}
    else {var go = 1;}
    for (c=1; c<filterstring.length; c++) {
        if (filterstring[c] == 'q' && filterstring[c-1] == 'q') {
            if ((c+1)<filterstring.length && filterstring[c+1] == ',') {}
            else {go = 1;}
            }
        else if (filterstring[c] in {'0': 1, '1': 1, '2': 1, '3': 1, '4': 1, '5': 1, '6': 1, '7': 1, '8': 1, '9': 1, 'i': 1, ',': 1, '+': 1} && go == 1) {}
        else if (go == 1) {
            var chunk = filterstring.slice(start, c);
            var k = url2filter[chunk[0]];
            var v = chunk.slice(1);
            prefilters[k] = v;
            start = c;
            if (filterstring[0] in spelled) {go = 0;}
            }
        }
    //alert(opponent);
    resetFilters();
    applyPrefilters();
    makeMatchTable({}, 0);
    }

var splits_singles = ["Last 52", 'Hard', 'Clay', 'Grass', "Grand Slams", 'vs Top 10', 'vs Righties', 'vs Lefties',
                  'Best of 3', 'Best of 5']; //, "Deciding Sets"];
var splits_dubs = ["Last 52", 'Hard', 'Clay', 'Grass', "Grand Slams", 'vs Top 10', 'vs RH/RH', 'vs LH/LH',
                  'vs RH/LH', 'Deciding Sets']; //'Best of 3', 'Best of 5'];                   
                     
function makeSplitsTable(doubles=0) {
    $("#wonloss").empty();
    if (doubles == 1) {
        var splitlist = splits_dubs;
        var splits_head = matchhead_dubs;
        var splits_matches = matchmx_dubs;
        var splits_active = active_dubs;
        var splits_lastdate = lastdate_dubs;
        }
    else {
        var splitlist = splits_singles;
        var splits_head = matchhead;
        var splits_matches = matchmx;
        splits_active = active;
        splits_lastdate = lastdate;
        }
    var splits = {'Last 52': $.extend(true, {}, totals), // alternate w/ career 
                  'Hard': $.extend(true, {}, totals),
                  'Clay': $.extend(true, {}, totals),
                  'Grass': $.extend(true, {}, totals),
                  'Grand Slams': $.extend(true, {}, totals),
                  'vs Top 10': $.extend(true, {}, totals),
                  'vs Righties': $.extend(true, {}, totals),
                  'vs Lefties': $.extend(true, {}, totals),
                  'Best of 3': $.extend(true, {}, totals),
                  'Best of 5': $.extend(true, {}, totals),
                  'Deciding Sets': $.extend(true, {}, totals),
                  'vs RH/RH': $.extend(true, {}, totals),
                  'vs LH/LH': $.extend(true, {}, totals),
                  'vs RH/LH': $.extend(true, {}, totals)
                  };
    // $.extend(true, {}, totals) -- deep copy of totals
    for (m=0; m<splits_matches.length; m++) {
        var match = {}
        for (var x=0; x<splits_head.length; x++) {
            if (splits_matches[m].length <= x) {match[splits_head[x]] = '';}
            else {match[splits_head[x]] = splits_matches[m][x];}
            } 
        var msplits = [];  
        //var match = matches[m];
        match = getWinLossTiebreak(match);
        // get splits
        var keyday;
        if (splits_active == 1) {keyday = today;}
        else {keyday = splits_lastdate;}
        if (parseInt(match.date) <= keyday && parseInt(match.date) >= (keyday-10000)) {msplits.push('Last 52');}
        else {continue;} // only counting matches in last 52
        if (match.surf == "Hard") {msplits.push('Hard');}
        if (match.surf == "Clay") {msplits.push('Clay');}
        if (match.surf == "Grass") {msplits.push('Grass');}
        if (match.level == "G") {msplits.push('Grand Slams');}
        if (match.max == "3") {msplits.push('Best of 3');}
        if (match.max == "5") {msplits.push('Best of 5');}
        if (sets.length == match.max) {msplits.push('Deciding Sets');}
        if (doubles == 1) {
            if ((parseInt(match.orank) + parseInt(match.o2rank)) <= 20) {msplits.push('vs Top 10');}
            if (match.ohand == "R" && match.o2hand == "R") {msplits.push('vs RH/RH');}
            if (match.ohand == "L" && match.o2hand == "L") {msplits.push('vs LH/LH');}
            if (match.ohand == "R" && match.o2hand == "L") {msplits.push('vs RH/LH');}
            if (match.ohand == "L" && match.o2hand == "R") {msplits.push('vs RH/LH');}
            }
        else {
            if (parseInt(match.orank) <= 10) {msplits.push('vs Top 10');}
            if (match.ohand == "R") {msplits.push('vs Righties');}
            if (match.ohand == "L") {msplits.push('vs Lefties');}
            }
        for (u=0; u<stats.length; u++) {
            t = stats[u];
            for (i=0; i<msplits.length; i++) {
                //splits['All'][t] = splits['All'][t] + parseInt(match[t]);
                if (match[t] != '') {splits[msplits[i]][t] = splits[msplits[i]][t] + parseInt(match[t]);}
                }
            }
        }
    var headerrow = ['TOTALS', 'Match', 'Tiebreak', 'Ace%', '1stIn', '1st%', '2nd%', 'Hld%', 'SPW', 'Brk%', 'RPW', 'TPW', 'DR'];
    var $splittable = $('<table>').css("padding-top", "0px").css("border-top", "0px");
    var $splitchunk = $('<thead>');
    var $splitrow = $('<tr>');
    for (var i = 0; i < headerrow.length; i++) { 
        if (i == 0) {var halign = 'left';}
        else {var halign = 'right';}
        var $hspan = $('<span>').text(headerrow[i])
        if (headerrow[i] in titleTips) {$hspan.attr('title', titleTips[headerrow[i]]);}
        var $headth = $('<th>').append($hspan).css('align', halign);
        $splitrow.append($headth);
        }
    $splitchunk.append($splitrow);
    $splittable.append($splitchunk);
    var $splitchunk2  = $('<tbody>').attr('id', 'splitsbody');
    for (j=0; j<splitlist.length; j++) {
        var $splitrow = $('<tr>');
        var $splitspan = $('<span>');
        //var $splitclick = $('<span>');
        var split = splitlist[j], mt = splits[split];
        var statrow = makeSplitStatRow(mt);
        if (split == 'Last 52' || split == 'Career') {$splitspan.html(split + ' ');}
        else {$splitspan.html('&nbsp;&nbsp;' + split + ' ');}
        //$splitclick.text('(+)').attr('class', 'likelink splitclick')
        $splitrow.append($('<td>').append($splitspan)); //.append($splitclick));
        for (var i = 0; i < statrow.length; i++) {
            $splitrow.append($('<td>').text(statrow[i]).attr('align', 'right'));
            }
        if (j != 0) {$splitrow.attr('class', 'moresplits');}
        $splitchunk2.append($splitrow.attr('id', 's' + splitIds[split]))
        }
    var $yearspan = $('<span>').attr('class', 'likelink').text('show yearly totals');
    var $togglespan = $('<span>').attr('class', 'likelink').text('show splits');
    var $lastrow = $('<tr>').append($('<td>').attr('class', 'yeartoggle').append($yearspan));
    $lastrow.append($('<td>').attr('class', 'splittoggle').append($togglespan));
    for (j=2; j<headerrow.length; j++) {$lastrow.append($('<td>').text(''));}
    $splitchunk2.append($lastrow);
    $splittable.append($splitchunk2).attr('class', 'tablesorter').attr('id', 'overall');
    $splittable.attr('width', '40%').attr('border', 0).attr('cellspacing', 0).attr('cellpadding', 0);
    $("#wonloss").html($splittable);
    
    if (typeof photog != 'undefined' && photog != '') {
        $(".moresplits").show();
        $(".splittoggle").html('<span class="likelink">hide splits</span>');
        }
    
    $(".splittoggle").click(function () {
        // close years if it's open and splits are opening
        if ($(".splittoggle").text() == 'show more splits' && $(".yeartoggle").text() == 'hide yearly totals') {
            $(".yearsplits").toggle();
            $(".yeartoggle").html('<span class="likelink">show yearly totals</span>');
            }
        $(".moresplits").toggle();
        if ($(".splittoggle").text() == 'show splits') {
            $(".splittoggle").html('<span class="likelink">hide splits</span>');
            }
        else {$(".splittoggle").html('<span class="likelink">show splits</span>');}
        })
    $(".yeartoggle").click(function () {
        // close splits if it's open and years are opening
        if ($(".yeartoggle").text() == 'show yearly totals' && $(".splittoggle").text() == 'hide splits') {
            $(".moresplits").toggle();
            $(".splittoggle").html('<span class="likelink">show splits</span>');
            }
        if ($(".yearsplits").length == 0) {addYearSplits();}
        $(".yearsplits").toggle();
        if ($(".yeartoggle").text() == 'show yearly totals') {
            $(".yeartoggle").html('<span class="likelink">hide yearly totals</span>');
            }
        else {$(".yeartoggle").html('<span class="likelink">show yearly totals</span>');}
        })
    }

function getFilterParams() {
    var params = '';
    for (j=0; j<filterlist.length; j++) {
        var filter = filterlist[j];
        if (filter in alphaFilters) {var splitter = ',';}
        else {var splitter = 'i';}
        var fselected = '.' + filter + 'selected', fdef = filter + 'def';
        var fkey = filter2url[filter]; // e.g. 'span' = 'A'
        var selnum = '';
        if ($(fselected).attr('id') != fdef) {
            $(fselected).each(function (i) {
                var selid = $(this).attr('id'), selname = selid.slice(filter.length);
                if (selid == 'spanCustomqq') {selname = 'cx'+startdate+enddate+'qq';}
                if (selid == 'rankCustomqq') {selname = 'cx'+(10000+lowrank)+(10000+highrank)+'qq';}
                if (selid == 'stats0') {selname = 'cx'+statchoice.replace(/ /g,"_")+'-'+statoperatorchoice+'-'+statinput+'qq';}
                if (selnum.length == 0) {
                    selnum = selname;
                    }
                else {
                    selnum = selnum + splitter + selname;
                    }
                });
            params = params + fkey + selnum;
            }
        }
    return params;
    }

function getPermalinkParams() {
    startwith = getFilterParams();
    var skey, sdown;
    if($("#matchheader").length == 0) {     // no results were generated 
        return startwith;
        }
    if ($('#matchheader').children(".headerSortDown").length == 0) {
        skey = $('#matchheader').children(".headerSortUp")[0].cellIndex;
        sdown = '1';
        }
    else {
        skey = $('#matchheader').children(".headerSortDown")[0].cellIndex;
        sdown = '0';
        }
    if (skey == '0' && sdown == '1') {}
    else {startwith = startwith + 's' + skey + sdown;}
    
    if (!$('#tabDubs').hasClass("tablink")) {var doubles = 1;}
    else {doubles = 0;}
    
    // a (overview) is default for doubles; o (serve stats) is default for singles
    if (!$(".statso").hasClass('likelink') && doubles == 0) {startwith += '';} 
    else if (!$(".statsa").hasClass('likelink') && doubles == 1) {startwith += '';}
    else if (!$(".statso").hasClass('likelink')) {startwith += 'o1';}
    else if (!$(".statsr").hasClass('likelink')) {startwith += 'r1';}
    else if (!$(".statsw").hasClass('likelink')) {startwith += 'w1';}
    // insert opponents, separated by commas, into url
    if ($('#h2hdef').hasClass('selected')) {}
    else {
        var oppstring = '';
        var opps = $('.h2hselected').text().split(fourspaces + fourspaces).slice(1);
        for (var i=0; i<opps.length; i++) {
            //oppstring = oppstring + opps[i].replace('\u00a0', '') + ',';
            oppstring = oppstring + opps[i].replace(/\u00a0/g, '') + ',';  //.replace(/ /g, '')
            }
        startwith = startwith + '&q=' + oppstring.slice(0,-1);
        }
    // insert excludes, separated by commas, into url
    if ($('#notdef').hasClass('selected')) {}
    else {
        var notstring = '';
        var nots = $('.notselected').text().split(fourspaces + fourspaces).slice(1);
        for (var i=0; i<nots.length; i++) {
            //notstring = notstring + nots[i].replace('\u00a0', '') + ',';
            notstring = notstring + nots[i].replace(/\u00a0/g, '') + ',';  //.replace(/ /g, '')
            }
        startwith = startwith + '&x=' + notstring.slice(0,-1);
        }
    if ($('#partnerdef').hasClass('selected')) {}
    else {
        var oppstring = '';
        var opps = $('.partnerselected').text().split(fourspaces + fourspaces).slice(1);
        for (var i=0; i<opps.length; i++) {
            //oppstring = oppstring + opps[i].replace('\u00a0', '') + ',';
            oppstring = oppstring + opps[i].replace(/\u00a0/g, '') + ',';  //.replace(/ /g, '')
            }
        startwith = startwith + '&d=' + oppstring.slice(0,-1);
        }
    if ($('#oppdef').hasClass('selected')) {}
    else {
        var oppstring = '';
        var opps = $('.oppselected').text().split(fourspaces + fourspaces).slice(1);
        for (var i=0; i<opps.length; i++) {
            //oppstring = oppstring + opps[i].replace('\u00a0', '') + ',';
            oppstring = oppstring + opps[i].replace(/\u00a0/g, '') + ',';  //.replace(/ /g, '')
            }
        startwith = startwith + '&q=' + oppstring.slice(0,-1);
        }
    if ($('#oppteamdef').hasClass('selected')) {}
    else {
        var oppstring = '';
        var opps = $('.oppteamselected').text().split(fourspaces + fourspaces).slice(1);
        for (var i=0; i<opps.length; i++) {
            //oppstring = oppstring + opps[i].replace('\u00a0', '') + ',';
            if (i % 2 == 0) {
                oppstring = oppstring + opps[i].replace(/\u00a0/g, ''); 
                }
            else {
                oppstring = oppstring + opps[i].replace(/\u00a0/g, '') + ','; 
                } 
            }
        startwith = startwith + '&t=' + oppstring.slice(0,-1);
        }
    // add &view= 
    if (!$('#tabHead').hasClass("tablink")) {startwith = startwith + "&view=h2h";}
    else if (!$('#tabEvents').hasClass("tablink")) {startwith = startwith + "&view=events";}
    else if (!$('#tabDubs').hasClass("tablink")) {startwith = startwith + "&view=doubles";}
    //else {startwith = startwith + "&view=singles";}
    return startwith;
    }

function insertNameSpaces(opponent) {
    var oppname = opponent[0];
    for (var c=1; c<opponent.length; c++) {
        if (opponent[c] == opponent[c].toUpperCase()) {
            oppname = oppname + ' ' + opponent[c];
            }
        else {oppname += opponent[c];}
        }
    oppname = oppname.replace('/ ', '/');  // for doubles
    oppname = oppname.replace(' /', '/');  // for doubles
    return oppname;
    }

function resetFilters() {
    $(".inmenu").removeClass("selected");
    $(".menudefault").addClass("selected");
    $(".header").removeClass("selected");
    var modFilterlist = filterlist.slice()
    modFilterlist.push('h2h');
    modFilterlist.push('not');
    modFilterlist.push('partner');
    modFilterlist.push('opp');
    modFilterlist.push('oppteam');
    for (i=0; i<modFilterlist.length; i++) {
        var fname = modFilterlist[i];
        var fchoice = '.' + fname + 'selected', fdef = '#' + fname + 'def';
        $(fchoice).removeClass(fchoice.slice(1));
        $(fdef).addClass(fchoice.slice(1));
        }
    }
    
function filterMatch(match, view) {
    if (view == "doubles") {
        if (genfilter('partner', 'Partner', match, match.partner) != 1) {return 0;} 
        if (genfilter('opp', 'Opponent', match, match.opp) != 1) {return 0;}
        if (genfilter('oppteam', 'Opp Team', match, match.opp) != 1) {return 0;}
        if (genfilter('hands', 'vs Hands', match, match.ohand) != 1) {return 0;}
        if (genfilter('prank', 'Partner Rank', match, match.prank) != 1) {return 0;}
        if (genfilter('phand', 'Partner Hand', match, match.phand) != 1) {return 0;}
        }
    else {
        if (genfilter('h2h', 'Head-to-Head', match, match.opp) != 1) {return 0;}     
        if (genfilter('not', 'Exclude Opp', match, match.opp) != 1) {return 0;}
        if (genfilter('crank', 'vs Curr Rk', match, match.opp) != 1) {return 0;}
        if (genfilter('hand', 'vs Hand', match, match.ohand) != 1) {return 0;}
        if (genfilter('country', 'vs Country', match, match.ocountry) != 1) {return 0;}
        if (genfilter('age', 'vs Age', match, match.obday) != 1) {return 0;}
        if (genfilter('height', 'vs Height', match, match.oht) != 1) {return 0;}
        } 
    if (genfilter('span', 'Last 52', match, match.date) != 1) {return 0;}  
    if (genfilter('rank', 'vs Rank', match, match.orank) != 1) {return 0;}
    if (genfilter('asrank', 'as Rank', match, match.rank) != 1) {return 0;}
    if (genfilter('level', 'Level', match, match.level) != 1) {return 0;}
    if (genfilter('round', 'Round', match, match.round) != 1) {return 0;}
    if (genfilter('surface', 'Surface', match, match.surf) != 1) {return 0;} 
    if (genfilter('tourney', 'Event', match, match.tourn) != 1) {return 0;} 
    if (genfilter('entry', 'Entry', match, match.entry) != 1) {return 0;} 
    if (genfilter('oentry', 'vs Entry', match, match.oentry) != 1) {return 0;} 
    if (genfilter('results', 'All', match, match.wl) != 1) {return 0;}
    if (genfilter('sets', 'All', match, match.max) != 1) {return 0;}  
    if (genfilter('scores', 'All', match, match.score) != 1) {return 0;} 
    if (genfilter('stats', 'Stats', match, match.wl) != 1) {return 0;} 
    //if (genfilter('extras', 'Extras', match, match.vidlink) != 1) {return 0;}
    return 1;
    }
    
function confirmSort(slist) {
    if ($(".headerSortDown").length > 0 || $(".headerSortUp").length > 0) {  // not the first rendering of the table; keep previous sort
        var skey, sdown;
        if ($('#matchheader').children(".headerSortDown").length == 0) {
            skey = $('#matchheader').children(".headerSortUp")[0].cellIndex;
            sdown = '1';
            }
        else {
            skey = $('#matchheader').children(".headerSortDown")[0].cellIndex;
            sdown = '0';
            }
        if (skey == '0' && sdown == '1') {}
        else {slist = [[skey, sdown]];}
        }
    else if ('sort' in prefilters) { // first rendering, use sort params from url
        var col, down;
        col = parseInt(prefilters['sort'].slice(0, -1));
        down = parseInt(prefilters['sort'].slice(-1));
        if (col == 0 && down == 1) {slist = [[0,1], [3,1]];}
        else if (col == 6 || col == 7) {slist = [[0,1], [3,1]];} // unsortable columns ... eh
        else {slist = [[col, down]];}
        }
    else {} // first rendering, no specified sort params
    return slist;
    }
    
function showDate(md) {
    var yyyy, mm, dd; // reformat date
    yyyy = md.slice(0, 4);
    mm = md.slice(4, 6);
    dd = md.slice(6);
    // non-breaking dash: &#8209;
    var showdate = parseInt(dd,10) + '\u2011' + months[mm] + '\u2011' + yyyy;
    return showdate;
    }
    
function getFilterTitle(ftitle) {
    var eightspaces = '\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'
    var opdict = {'ge': '>=', 'le': '<=', 'gt': '>', 'lt': '<', 'eq': '='};
    for (j=0; j<filterlist.length; j++) {
        var filter = filterlist[j];
        var fselected = '.' + filter + 'selected', fdef = filter + 'def';
        if ($(fselected).attr('id') != fdef || j == 0) { // j == 0 so that time span (e.g. last 52) is always displayed)
            if (ftitle != '') {ftitle += '; ';}
            if ($(fselected).attr('id') == 'spanCustomqq') {
                var showstart = startdate.slice(6) + '-' + months[startdate.slice(4,6)] + '-' + startdate.slice(0,4);
                var showend = enddate.slice(6) + '-' + months[enddate.slice(4,6)] + '-' + enddate.slice(0,4);
                ftitle = ftitle + filteropts[filter][0] + ': ' + showstart + ' to ' + showend + ' [custom]';
                }
            else if ($(fselected).attr('id') == 'rankCustomqq') {
                ftitle = ftitle + filteropts[filter][0] + ': ' + lowrank + ' to ' + highrank + ' [custom]';
                }   
            else if ($(fselected).attr('id') == 'stats0') {
                if (statchoice in statpercs) {var statdisp = statinput+'%';}
                else if (statchoice == 'Time') {
                    var rem = (statinput % 60);
                    if (rem < 10) {var mindisp = '0'+String(rem);}
                    else {var mindisp = String(rem);}
                    var statdisp = Math.floor(statinput/60) + ':' + mindisp;
                    }
                else {var statdisp = statinput;}
                ftitle = ftitle + filteropts[filter][0] + ': ' + statchoice + ' ' + opdict[statoperatorchoice] + ' ' + statdisp + ' [custom]';
                //add percent sign as necessary?
                }             
            else {ftitle = ftitle + filteropts[filter][0] + ': ' + $.trim($(fselected).text());}
            ftitle = ftitle.replace(/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/g, ', ')
            // add comma if more than one fselected?
            }
        }
    return ftitle;
    }
  
function renderResults(stdscores, showstats, hdrs, defSort) {
    // defSort: 1 = return to defaults; 0 = check if already sorted and keep that
    var currentfilter = $.extend(true, {}, totals);
    // decide now on table sorting
    var slist = [[0,1], [3,1]];
    if (defSort == 0) {slist = confirmSort(slist);}

    var $matchtable = $('<table>');
    var $mthead = $('<thead>');
    var $mtheaderrow = $('<tr>').attr('id', 'matchheader'); 
    var $mtfoot = $('<tfoot>');
    var $mtfooterrow = $('<tr>').attr('id', 'matchfooter').attr('background-color', '#FFF'); // color weirdness?  
    var $mtbody = $('<tbody>');
    var rightaligns = {4: '', 5: '', 9: '', 10: '', 11: '', 12: '', 13: '', 14: '', 15: '', 16: ''};
    for (var s = 0; s < matchmx.length; s++) {   
        if (s == 0) {
            // header row
            var cells = [];
            for (var i = 0; i < hdrs.length; i++) {
                //var $mthcell = $('<th>');
                var $mthspan = $('<span>').text(hdrs[i]);
                if (hdrs[i] in titleTips) {$mthspan.attr('title', titleTips[hdrs[i]]);}
                var $mthcell = $('<th>').append($mthspan);
                if (i in rightaligns) {$mthcell.attr('align', 'right');}
                $mtheaderrow.append($mthcell);
                }
            $mthead.append($mtheaderrow);
            $matchtable.append($mthead);
            // footer row
            var fcells = [];
            for (var i = 0; i < hdrs.length; i++) {
                //var $mftcell = $('<tr>'); // check
                if (i == 1 && !$("#spanCareerqq").hasClass('selected')) { // && career is not selected
                    var $mftspan = $('<span>').text('Show Career').attr('font-style', 'italic');
                    $mftspan.attr('id', 'careerclick').attr('class', 'likelink');
                    }
                else {
                    var $mftspan = $('<span>').text('');
                    }
                var $mftcell = $('<td>').append($mftspan);
                $mtfooterrow.append($mftcell);
                }
            $mtfoot.append($mtfooterrow);
            $matchtable.append($mtfoot);
            }            
            
        // when adding a new column, esp. if just in some players' js files, add the header to 'matchhead' above
        // this fills in the missing cells
        var match = {}
        for (var x=0; x<matchhead.length; x++) {
            if (matchmx[s].length <= x) {match[matchhead[x]] = '';}
            else {match[matchhead[x]] = matchmx[s][x];}
            } 
            
        if (filterMatch(match, 'results') != 1) {continue;}

        var $mtrow = $('<tr>');        
        var showdate = showDate(match.date);
        var yyyy, mm, dd; // reformat date
        yyyy = match.date.slice(0, 4);
        mm = match.date.slice(4, 6);
        dd = match.date.slice(6);
        //if (typeof dob === 'undefined') {}
        //else {
        //    var dobStr = dob+'';
        //    var dobObj  = new Date(dobStr.slice(0,4), dobStr.slice(4,6), dobStr.slice(6));
        //    var tdObj  = new Date(yyyy, mm, dd);
        //    var days = parseInt((tdObj.getTime() - dobObj.getTime())/one_day);
        //    var years = parseInt(days/365);
        //    var plusdays = days % 365;
        //    if (plusdays < 10) {plusdays = '00'+plusdays;}
        //    else if (plusdays < 100) {plusdays = '0'+plusdays;}
        //    $datecell.attr('title', 'Age: '+years+'.'+plusdays);
        //    }
        if (yyyy >= 2085 && yyyy < 1916) {
            var wdate = yyyy+'-'+mm+'-'+dd;
            var wlink = 'https://tennisabstract.herokuapp.com/ATP/Rankings/'+wdate+'/';
            //$datecell.attr('href', wlink);  
            //var $datecell = $('<td>').append($('<a>').text(showdate).attr('href', wlink));
            var $datecell = $('<td>').text(showdate);
            }          
        else {var $datecell = $('<td>').text(showdate).attr('class', 'tdate');}
        $mtrow.append($datecell);
        
        var showtourn = match.tourn;
        if (match.tourn.indexOf('Davis C') != -1) {
            $mtrow.append($('<td>').text(match.tourn));
            }
        else if (match.level == 'S' | match.level == 'E') {
            $mtrow.append($('<td>').text(match.tourn));
            }
        else if (match.tourn.slice(0,3) == 'ATP' && (yyyy == '2022' | yyyy == '2024' || yyyy == '2023')) {
            $mtrow.append($('<td>').text(match.tourn.slice(4)));
            }
        else if (match.tourn.slice(-10) == 'Challenger' && (yyyy == '2022' | yyyy == '2024' || yyyy == '2023')) {
            $mtrow.append($('<td>').text(match.tourn.slice(0,-11)+' CH'));
            }
        else {
            if (match.tourn.slice(-2) == ' Q') {
                var showtourn = match.tourn.slice(0, -2);
                var qtag = '&f=B8';
                }
            else {
                var showtourn = match.tourn;
                var qtag = '';}
            var tlink = 'https://www.tennisabstract.com/cgi-bin/tourney.cgi?t=' + yyyy + showtourn.replace(/ /g, '_').replace(/'/g, 'xx') + qtag;
            $mtrow.append($('<td>').append($('<a>').text(match.tourn).attr('href', tlink)));
            }
        $mtrow.append($('<td>').text(match.surf));
        $mtrow.append($('<td>').text(match.round));
        $mtrow.append($('<td>').text(match.rank).attr('align', 'right'));
        $mtrow.append($('<td>').text(match.orank).attr('align', 'right'));

        var $pentry = $('<span>'), $pname = $('<span>'), $oppentry = $('<span>'), $opplink = $('<span>'), $oppcc = $('<span>')  // player entry
        if (match.seed != '') {$pentry.text('(' + match.seed + ')')}
        else if (match.entry != '') {$pentry.text('(' + match.entry + ')')}
        else {$pentry.text('');}
        $pname.text(lastname).css('font-weight', 'bold'); // player name
        if (match.oseed != '') {$oppentry.text('(' + match.oseed + ')')} // opp entry
        else if (match.oentry != '') {$oppentry.text('(' + match.oentry + ')')}
        else {$oppentry.text('');}
        var nlink = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + match.opp.replace(/ /g, '') // opp link
        var $olk = $('<a>').text(match.opp).attr('href', nlink);
        $opplink.append($olk);
        $oppcc.text(' [' + match.ocountry + ']'); 
        var $onespace = $('<span>').text('\u00a0')
        var $onespace2 = $('<span>').text('\u00a0')
        if (match.score == '' && (yyyy == '2023' | yyyy == '2024')) {var $deflink = $('<span>').text('vs');}
        else {var $deflink = $('<span>').text('d.');}
        if ($('#h2hdef').hasClass('selected')) {$deflink.attr('class', 'likelink h2hclick');}
        var $matchcell = $('<td>').attr('class', match.opp.replace(/ /g, ''));
        if (match.wl == "W" || match.wl == 'U') {
            $matchcell.append($pentry).append($pname).append($onespace).append($deflink).append($onespace2).append($oppentry).append($opplink).append($oppcc);
            }
        else {
            $matchcell.append($oppentry).append($opplink).append($oppcc).append($onespace).append($deflink).append($onespace2).append($pentry).append($pname);
            }
        $mtrow.append($matchcell);
        if (match.score == '' && (yyyy == '2023' | yyyy == '2024')) {
            var $scorecell = $('<a>').text('Live Scores').attr('href', 'https://www.livescore.in/tennis/').attr('target', '_blank');
            }
        else if (stdscores == true || match.score == 'W/O') {
            if (match.whserver != '' && match.whserver == 'magic') { // re-activate when match.py working
                if (match.level == 'S') {var mlev = 'FUT';}
                else if (match.level == 'C') {mlev = 'CHA';}
                else if (match.level == 'Q') {mlev = 'AQU';}
                else if (match.round == 'Q1' || match.round == 'Q2' || match.round == 'Q3') {mlev = 'AQU';}
                else {mlev = 'ATP';}
                var wlink = 'https://tennisabstract.com/cgi-bin/match.py?q=' + match.matchid + '/' + mlev + '/';
                wlink = wlink + showtourn.replace(/ /g, '_') + '/' + match.round + '/';
                if (match.wl == 'W') {
                    wlink = wlink + fullname.replace(/ /g, '_') + '/vs/' + match.opp.replace(/ /g, '_') + '/1'
                    }
                else {
                    wlink = wlink + match.opp.replace(/ /g, '_') + '/vs/' + fullname.replace(/ /g, '_') + '/0'
                    }
                var $scorecell = $('<a>').text(match.score).attr('href', wlink).attr('target', '_blank').attr('title', "Point-by-point stats for this match (new window)");                
                }
            else {
                var $scorecell = $('<span>').text(match.score);
                }
            }
        else if (match.wl == 'L') {
            var sets = match.score.split(' '), newscore = '';
            for (k=0; k<sets.length; k++) {
                var st = sets[k];
                if (st == 'RET') {newscore = newscore + 'RET ';}
                else if (st[2] == '-') {newscore = newscore + st.slice(3) + '-' + st.slice(0, 2) + ' ';}
                else {newscore = newscore + st[2] + st[1] + st[0] + st.slice(3) + ' ';}
                // what about 70-68, 11-9, etc?
                }
            newscore = newscore.slice(0, -1);
            //$mtrow.append($('<td>').text(newscore));
            var $scorecell = $('<span>').text(newscore);
            }
        else {
            //$mtrow.append($('<td>').text(match.score));
            var $scorecell = $('<span>').text(match.score);
            }
        var $scorelinks = $('<td>').append($scorecell);
        $mtrow.append($scorelinks);
        var $matchlinks = $('<td>');
        if (match.chartlink != "") {
            var clink = 'https://www.tennisabstract.com/charting/' + match.chartlink;
            var $chartlink = $('<a>').text("(ch)").attr('href', clink).attr('target', '_blank').attr('title', "Charting-Based Stats (new window)");
            var $onespace3 = $('<span>').text('\u00a0');
            $matchlinks.append($onespace3).append($chartlink);
            }
        if (match.pslink != "") {
            var $onespace4 = $('<span>').text('\u00a0');
            var plink = 'https://www.tennisabstract.com/cgi-bin/slamWinProbability.py?m=' + match.pslink;
            var $pslink = $('<a>').text("(wp)").attr('href', plink).attr('target', '_blank').attr('title', "Point-by-Point Data (new window)");
            $matchlinks.append($onespace4).append($pslink);
            }
        //if (match.vidlink != "") {
        //   var $onespace5 = $('<span>').text('\u00a0');
        //    var $vlink = $('<a>').text("(vid)").attr('href', match.vidlink).attr('target', '_blank').attr('title', "Full Match Video (new window)");
        //    $matchlinks.append($onespace5).append($vlink);
        //    }
        $mtrow.append($matchlinks);
        if (match.score == 'W/O' || match.pts == '') {  // matches with no stats, leave blank
            var statrow = ['', '', '', '', '', '', ''], showtime = '', domratio = '';
            }
        else {
            var rpw = 1 - (parseInt(match.ofwon) + parseInt(match.oswon))/match.opts; // dominance ratio:
            var spl = 1 - ((parseInt(match.fwon) + parseInt(match.swon))/match.pts);
            var num = rpw/spl, dec = 2;
            var domratio = alignRound(rpw/spl, dec);
            var matchtime = match.time;
            if (matchtime == '') {var showtime = '';}
            else {
                var hours = parseInt(matchtime/60);
                var minutes = matchtime % 60;
                if (minutes < 10) {minutes = '0' + minutes;}
                var showtime = hours + ':' + minutes;
                }
            var hours = parseInt(matchtime/60);
            var minutes = matchtime % 60;
            if (minutes < 10) {minutes = '0' + minutes;}
            if (showstats == 'o') {
                var acerate = alignRound((match.aces/match.pts), 1, 1);
                var dfrate = alignRound((match.dfs/match.pts), 1, 1);
                var firstin = alignRound((match.firsts/match.pts), 1, 1);
                var fwin = alignRound((match.fwon/match.firsts), 1, 1);
                var swin = alignRound((match.swon/(match.pts-match.firsts)), 1, 1);
                //var bksaved = alignRound((match.saved/match.chances), 1, 1) + ' (' + match.saved + '/' + match.chances + ')';
                var bksaved = match.saved + '/' + match.chances;
                var statrow = [domratio, acerate, dfrate, firstin, fwin, swin, bksaved];
                }
            else if (showstats == 'r') {
                var pointswon = parseInt(match.fwon) + parseInt(match.swon) + (match.opts - match.ofwon - match.oswon);
                var tpw = alignRound((pointswon/(parseInt(match.pts) + parseInt(match.opts))), 1, 1);
                var rpw = alignRound(1 - ((parseInt(match.ofwon) + parseInt(match.oswon))/match.opts), 1, 1);
                var vace = alignRound((match.oaces/match.opts), 1, 1);
                var r1pw = alignRound(1 - (match.ofwon/match.ofirsts), 1, 1);
                var r2pw = alignRound(1 - (match.oswon/(match.opts-match.ofirsts)), 1, 1);
                //var bkconv = alignRound(1 - (match.osaved/match.ochances), 1, 1) + ' (' + (match.ochances - match.osaved) + '/' + match.ochances + ')';
                var bkconv = (match.ochances - match.osaved) + '/' + match.ochances;
                var statrow = [domratio, tpw, rpw, vace, r1pw, r2pw, bkconv];
                }
            else if (showstats == 'w') {
                var pointswon = parseInt(match.fwon) + parseInt(match.swon) + (match.opts - match.ofwon - match.oswon);
                var tpw = alignRound((pointswon/(parseInt(match.pts) + parseInt(match.opts))), 1, 1);
                var rpw = alignRound(1 - ((parseInt(match.ofwon) + parseInt(match.oswon))/match.opts), 1, 1);
                var vace = alignRound((match.oaces/match.opts), 1, 1);
                var r1pw = alignRound(1 - (match.ofwon/match.ofirsts), 1, 1);
                var r2pw = alignRound(1 - (match.oswon/(match.opts-match.ofirsts)), 1, 1);
                var bkconv = alignRound(1 - (match.osaved/match.ochances), 1, 1) + ' (' + (match.ochances - match.osaved) + '/' + match.ochances + ')';
                var tp = parseInt(match.pts) + parseInt(match.opts)
                var statrow = [tp, match.aces, match.dfs, match.pts, match.firsts, match.pts-match.firsts, match.oaces];
                }                
            }
        //$mtrow.append($('<td>').text(domratio).attr('align', 'right'));;
        for (var i = 0; i < statrow.length; i++) {
            $mtrow.append($('<td>').text(statrow[i]).attr('align', 'right'));
            }
        $mtrow.append($('<td>').text(showtime).attr('align', 'right'));
        $mtbody.append($mtrow);
        var matchnew = getWinLossTiebreak(match);
        for (u=0; u<stats.length; u++) {
            t = stats[u];
            if (matchnew[t] != '') {currentfilter[t] = currentfilter[t] + parseInt(matchnew[t]);}
            }
        }

    // back to match table
    if ($mtbody.children().length == 0) {
        if (!$("#spanCareerqq").hasClass('selected')) { // career is not selected
            //var $mftspan = $('<span>').text('show career').attr('font-style', 'italic');
            //$mftspan.attr('id', 'careerclick').attr('class', 'likelink');
            var mft = '<span id="careerclick" class="likelink">Show career</span>, c';
            }
        else {var mft = 'C';}
        pTable = '<p id="matches">&nbsp;<br/>&nbsp;<br/>Your filters returned no matches. ' + mft + 'hange a filter or two, or press the '
        pTable = pTable + '<span class="menureset2 likelink">reset button</span>.</p>'
        $("#matches").replaceWith(pTable);
        }
    else {
        $matchtable.append($mtbody).attr('id', 'matches').attr('class', 'tablesorter');
        $matchtable.attr('border', 0).attr('cellspacing', 0).attr('cellpadding', 4);
        $("#stats").html($matchtable);
        $("#matches").tablesorter( {sortList: slist,
                                    headers: {0: {sorter:'dates'},
                                    	      1: {sorter:false},	
                                              3: {sorter:'rounds'},
                                              4: {sorter:'ranks'},
                                              5: {sorter:'ranks'},
                                              6: {sorter:false}, // matchup
                                              7: {sorter:false}, // score -- more I can do with this?
                                              8: {sorter:false},
                                              9: {sorter:'descNum'},
                                              10: {sorter:'descNum'},
                                              11: {sorter:'ascNum'},
                                              12: {sorter:'descNum'},
                                              13: {sorter:'descNum'},
                                              14: {sorter:'descNum'},
                                              15: {sorter:false},
                                              16: {sorter:'descNum'}
                                              }
                                   });
        }
    var currentParams = getFilterParams();
    var opplist = [], notlist = [];
    if ($('#h2hdef').hasClass('selected') && $('#notdef').hasClass('selected')) {var opplist = [];} // no h2hs or NOTs
    else if (!$('#notdef').hasClass('selected')) {var notlist = $('.notselected').text().split(fourspaces + fourspaces).slice(1);}
    else {var opplist = $('.h2hselected').text().split(fourspaces + fourspaces).slice(1);}
    var statrow = makeSplitStatRow(currentfilter);
    if ($mtbody.children().length == 0) {}
    else if (currentParams == '' && (opplist.length == 0 && notlist.length == 0)) {}
    else {
        if (opplist.length == 0 && notlist.length == 0) {var rowid = '#f' + currentParams;}
        else if (opplist.length == 0) {
            var nots = $('.notselected').text().replace(/\u00a0/g, '');
            var rowid = '#f' + currentParams + '-' + nots;
            }
        else {
            var opps = $('.h2hselected').text().replace(/\u00a0/g, '');
            var rowid = '#f' + currentParams + '-' + opps;
            }
        if ($(rowid).length > 0) {$(rowid).remove();} // if same filter is already present, delete
        else if ($('.filtersplitrow').length == 5) {$('.filtersplitrow').last().remove();} // if 5 already, delete last

        var $filtrow = $('<tr>').attr('class', 'filtersplitrow')
        $filtrow.attr('id', rowid.slice(1));
        var ftitle = '';
        if (opplist.length == 0) {} // get label
        else {
            for (k=0; k<opplist.length; k++) {
                //var oppname = insertNameSpaces(opplist[k]);
                var ftitle = ftitle + 'Opponent: ' + opplist[k] + '; '; // need to parse this for initials? last name?
                }
            ftitle = ftitle.slice(0, -2); // delete final semi-colon and space
            }
        if (notlist.length == 0) {} // get label
        else {
            for (k=0; k<notlist.length; k++) {
                //var oppname = insertNameSpaces(opplist[k]);
                var ftitle = ftitle + 'Exclude: ' + notlist[k] + '; '; // need to parse this for initials? last name?
                }
            ftitle = ftitle.slice(0, -2); // delete final semi-colon and space
            }  
        ftitle = getFilterTitle(ftitle);      

        var $nameital = ($('<span>').css('font-style', 'italic').attr('class', 'filterlabel'));
        if (ftitle.length > 25) { // too long, replace end with ..., add title, etc.
            $nameital.attr('title', ftitle.replace(/; /g, '\n')).css('cursor', 'pointer').text(' ' + ftitle.slice(0,22) + '... ');
            }
        else {$nameital.text(' ' + ftitle + ' ');}
        
        var $closebutton = ($('<span>').text("[x]").attr('class', 'rowcloser likelink')) // add button to close
        //var $splitclick = $('<span>').text('(+)').attr('class', 'likelink splitclick');
        
        $filtrow.append($('<td>').append($closebutton).append($nameital)); //.append($splitclick));
        for (var i = 0; i < statrow.length; i++) {
            var $fcell = $('<td>').attr('align', 'right').text(statrow[i]);
            $filtrow.append($fcell);
            }
        $("#splitsbody").prepend($filtrow)

        $(".rowcloser").click(function () {// attach handler to .rowcloser
            $(this).parent().parent().remove();
            })
        }
        
    // add title above matches
    if (ftitle == "" || ftitle == undefined) {var ftitle = 'Last 52';}
    else {var tabtitle = 'Matches: '+ftitle;} //.replace(/; /g, ' > ');}
    var wlrec = '(' + statrow[0].slice(0,statrow[0].indexOf('(')-1) + ')';
    $("#tablelabel").html('<b>Matches '+wlrec+' > '+ftitle+'</b>');
        
    // how to count filters applied?
    if (currentParams == '' && (opplist.length == 0 && notlist.length == 0)) {}
    else if ($mtbody.children().length == 0) {} // no matches -- keep this or not?
    else {
        var $bmatches = $('<span>').text('Apply filters to another player: ');
        $bmatches.append($('<input>').attr('id', 'paramsearch'));
        $('#matches').after($bmatches);
        }
    $(".h2hclick").click(function () {
        opponent = $(this).parent().attr('class');
        var withspaces = insertNameSpaces(opponent);
        setPlayerFilter(withspaces, 1, 0);
        if ($("#h2hhead").hasClass("closed")) {
            $("#h2hhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".h2hchoice").toggle();
            }
        })
    $(".menureset2").click(function () {
        resetFilters();
        // close open menus?
        makeMatchTable({}, 1);
        });
    $("#careerclick").click(function () {
        if ($("#spanhead").hasClass("closed")) {
            $("#spanhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".spanchoice").toggle();
            }
        $(".spanchoice").removeClass("selected").removeClass('spanselected');
        $("#spanCareerqq").addClass('selected').addClass('spanselected');
        makeMatchTable({}, 0);
        })
    }
    
function renderDoubles(stdscores, showstats, hdrs, defSort) {
    // defSort: 1 = return to defaults; 0 = check if already sorted and keep that
    var currentfilter = $.extend(true, {}, totals);
    // decide now on table sorting
    var slist = [[0,1], [3,1]];
    if (defSort == 0) {slist = confirmSort(slist);}

    var $matchtable = $('<table>');
    var $mthead = $('<thead>');
    var $mtheaderrow = $('<tr>').attr('id', 'matchheader'); 
    var $mtfoot = $('<tfoot>');
    var $mtfooterrow = $('<tr>').attr('id', 'matchfooter').attr('background-color', '#FFF'); // color weirdness?  
    var $mtbody = $('<tbody>');
    if (showstats == "a") {
        var rightaligns = {4: '', 5: '', 8: '', 9: '', 10: '', 11: '', 12: '', 13: '', 14: '', 15: ''};
        }
    else {
        var rightaligns = {6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '', 13: '', 14: '', 15: ''};
        }
    for (var s = 0; s < matchmx_dubs.length; s++) {   
        if (s == 0) {
            // header row
            var cells = [];
            for (var i = 0; i < hdrs.length; i++) {
                //var $mthcell = $('<th>');
                var $mthspan = $('<span>').text(hdrs[i]);
                if (hdrs[i] in titleTips) {$mthspan.attr('title', titleTips[hdrs[i]]);}
                var $mthcell = $('<th>').append($mthspan);
                if (i in rightaligns) {$mthcell.attr('align', 'right');}
                $mtheaderrow.append($mthcell);
                }
            $mthead.append($mtheaderrow);
            $matchtable.append($mthead);
            // footer row
            var fcells = [];
            for (var i = 0; i < hdrs.length; i++) {
                //var $mftcell = $('<tr>'); // check
                if (i == 1 && !$("#spanCareerqq").hasClass('selected')) { // && career is not selected
                    var $mftspan = $('<span>').text('Show Career').attr('font-style', 'italic');
                    $mftspan.attr('id', 'careerclick').attr('class', 'likelink');
                    }
                else {
                    var $mftspan = $('<span>').text('');
                    }
                var $mftcell = $('<td>').append($mftspan);
                $mtfooterrow.append($mftcell);
                }
            $mtfoot.append($mtfooterrow);
            $matchtable.append($mtfoot);
            }            
            
        // when adding a new column, esp. if just in some players' js files, add the header to 'matchhead' above
        // this fills in the missing cells
        var match = {}
        for (var x=0; x<matchhead_dubs.length; x++) {
            if (matchmx_dubs[s].length <= x) {match[matchhead_dubs[x]] = '';}
            else {match[matchhead_dubs[x]] = matchmx_dubs[s][x];}
            } 
            
        if (filterMatch(match, 'doubles') != 1) {continue;}

        var $mtrow = $('<tr>');        
        var showdate = showDate(match.date);
        var yyyy, mm, dd; // reformat date
        yyyy = match.date.slice(0, 4);
        mm = match.date.slice(4, 6);
        dd = match.date.slice(6);
        //if (typeof dob === 'undefined') {}
        //else {
        //    var dobStr = dob+'';
        //    var dobObj  = new Date(dobStr.slice(0,4), dobStr.slice(4,6), dobStr.slice(6));
        //    var tdObj  = new Date(yyyy, mm, dd);
        //    var days = parseInt((tdObj.getTime() - dobObj.getTime())/one_day);
        //    var years = parseInt(days/365);
        //    var plusdays = days % 365;
        //    if (plusdays < 10) {plusdays = '00'+plusdays;}
        //    else if (plusdays < 100) {plusdays = '0'+plusdays;}
        //    $datecell.attr('title', 'Age: '+years+'.'+plusdays);
        //    }
        if (yyyy >= 2085 && yyyy < 1916) {
            var wdate = yyyy+'-'+mm+'-'+dd;
            var wlink = 'https://tennisabstract.herokuapp.com/ATP/Rankings/'+wdate+'/';
            //$datecell.attr('href', wlink);  
            var $datecell = $('<td>').append($('<a>').text(showdate).attr('href', wlink));
            }          
        else {var $datecell = $('<td>').text(showdate).attr('class', 'tdate');}
        $mtrow.append($datecell);
        
        var showtourn = match.tourn;
        if (match.tourn.indexOf('Davis C') != -1) {
            $mtrow.append($('<td>').text(match.tourn));
            }
        else if (match.level == 'S' | match.level == 'E') {
            $mtrow.append($('<td>').text(match.tourn));
            }
        else if (match.tourn.slice(0,3) == 'ATP' && (yyyy == '2022' | yyyy == '2024' || yyyy == '2023')) {
            $mtrow.append($('<td>').text(match.tourn.slice(4)));
            }
        else if (match.tourn.slice(-10) == 'Challenger' && (yyyy == '2022' | yyyy == '2024' || yyyy == '2023')) {
            $mtrow.append($('<td>').text(match.tourn.slice(0,-11)+' CH'));
            }
        else {
            if (match.tourn.slice(-2) == ' Q') {
                var showtourn = match.tourn.slice(0, -2);
                var qtag = '&f=B8';
                }
            else {
                var showtourn = match.tourn;
                var qtag = '';}
            var tlink = 'https://www.tennisabstract.com/cgi-bin/tourney.cgi?t=' + yyyy + showtourn.replace(/ /g, '_').replace(/'/g, 'xx') + qtag;
            $mtrow.append($('<td>').append($('<a>').text(match.tourn).attr('href', tlink)));
            }
        $mtrow.append($('<td>').text(match.surf));
        $mtrow.append($('<td>').text(match.round));
        
        if (showstats == "a") {
            $mtrow.append($('<td>').text(match.rank + '/' + match.prank).attr('align', 'right'));
            $mtrow.append($('<td>').text(match.orank + '/' + match.o2rank).attr('align', 'right'));
            var partner_name = match.partner;
            var opp_name = match.opp;
            var opp2_name = match.opp2;
            }
        else {
            partner_name = match.partnerlast;
            opp_name = match.olast;
            opp2_name = match.o2last;
            }

        var $pentry = $('<span>'), $pname = $('<span>'), $oppentry = $('<span>'), $opplink = $('<span>'), $oppcc = $('<span>')  // player entry 
        var $partnerlink = $('<span>'), $opp2link = $('<span>'), $partnercc = $('<span>')
        if (match.seed != '') {$pentry.text('(' + match.seed + ')')}
        else if (match.entry != '') {$pentry.text('(' + match.entry + ')')}
        else {$pentry.text('');}
        
        $pname.text(lastname).css('font-weight', 'bold'); // player name

        var partnerlink = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + match.partner.replace(/ /g, '') 
        var $partnerlk = $('<a>').text(partner_name).attr('href', partnerlink);
        $partnerlink.append($partnerlk);
        $partnercc.text(' [' + match.pcountry + ']');
                
        if (match.oseed != '') {$oppentry.text('(' + match.oseed + ')')} // opp entry
        else if (match.oentry != '') {$oppentry.text('(' + match.oentry + ')')}
        else {$oppentry.text('');}
        
        var nlink = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + match.opp.replace(/ /g, '') // opp link
        var $olk = $('<a>').text(opp_name).attr('href', nlink);
        $opplink.append($olk);
        
        var n2link = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + match.opp2.replace(/ /g, '') 
        var $o2lk = $('<a>').text(opp2_name).attr('href', n2link);
        $opp2link.append($o2lk);
        
        if (match.ocountry == match.o2country) {
            $oppcc.text(' [' + match.ocountry + ']');
            }
        else {
            $oppcc.text(' [' + match.ocountry + '/' + match.o2country + ']'); 
            }
        var $onespace = $('<span>').text('\u00a0')
        var $onespace2 = $('<span>').text('\u00a0')
        var $slash = $('<span>').text('/')
        var $slash2 = $('<span>').text('/')
        if (match.score == '' && (yyyy == '2023' | yyyy == '2024')) {var $deflink = $('<span>').text('vs');}
        else {var $deflink = $('<span>').text('d.');}
        //if ($('#h2hdef').hasClass('selected')) {$deflink.attr('class', 'likelink h2hclick');}
        var $matchcell = $('<td>')  //.attr('class', match.opp.replace(/ /g, ''));
        if (match.wl == "W" || match.wl == 'U') {
            $matchcell.append($pentry).append($pname).append($slash).append($partnerlink).append($partnercc).append($onespace).append($deflink).append($onespace2).append($oppentry).append($opplink).append($slash2).append($opp2link).append($oppcc);
            }
        else {
            $matchcell.append($oppentry).append($opplink).append($slash2).append($opp2link).append($oppcc).append($onespace).append($deflink).append($onespace2).append($pentry).append($pname).append($slash).append($partnerlink).append($partnercc);
            }
        $mtrow.append($matchcell);
        if (match.score == '' && (yyyy == '2023' | yyyy == '2024')) {
            var $scorecell = $('<a>').text('Live Scores').attr('href', 'https://www.livescore.in/tennis/').attr('target', '_blank');
            }
        else {
            //$mtrow.append($('<td>').text(match.score));
            var $scorecell = $('<span>').text(match.score);
            }
        var $scorelinks = $('<td>').append($scorecell);
        $mtrow.append($scorelinks);

        if (match.score == 'W/O' || match.pts == '') {  // matches with no stats, leave blank
            var statrow = ['', '', '', '', '', '', ''], showtime = '', domratio = '';
            if (showstats == "a") {statrow = [''];}
            }
        else {
            var rpw = 1 - (parseInt(match.ofwon) + parseInt(match.oswon))/match.opts; // dominance ratio:
            var spl = 1 - ((parseInt(match.fwon) + parseInt(match.swon))/match.pts);
            var num = rpw/spl, dec = 2;
            var domratio = alignRound(rpw/spl, dec);
            var matchtime = match.time;
            if (matchtime == '') {var showtime = '';}
            else {
                var hours = parseInt(matchtime/60);
                var minutes = matchtime % 60;
                if (minutes < 10) {minutes = '0' + minutes;}
                var showtime = hours + ':' + minutes;
                }
            var hours = parseInt(matchtime/60);
            var minutes = matchtime % 60;
            if (minutes < 10) {minutes = '0' + minutes;}
            if (showstats == 'a') {
                var statrow = [domratio];
                }
            else if (showstats == 'o') {
                var acerate = alignRound((match.aces/match.pts), 1, 1);
                var dfrate = alignRound((match.dfs/match.pts), 1, 1);
                var firstin = alignRound((match.firsts/match.pts), 1, 1);
                var fwin = alignRound((match.fwon/match.firsts), 1, 1);
                var swin = alignRound((match.swon/(match.pts-match.firsts)), 1, 1);
                //var bksaved = alignRound((match.saved/match.chances), 1, 1) + ' (' + match.saved + '/' + match.chances + ')';
                var bksaved = match.saved + '/' + match.chances;
                var statrow = [domratio, acerate, dfrate, firstin, fwin, swin, bksaved];
                }
            else if (showstats == 'r') {
                var pointswon = parseInt(match.fwon) + parseInt(match.swon) + (match.opts - match.ofwon - match.oswon);
                var tpw = alignRound((pointswon/(parseInt(match.pts) + parseInt(match.opts))), 1, 1);
                var rpw = alignRound(1 - ((parseInt(match.ofwon) + parseInt(match.oswon))/match.opts), 1, 1);
                var vace = alignRound((match.oaces/match.opts), 1, 1);
                var r1pw = alignRound(1 - (match.ofwon/match.ofirsts), 1, 1);
                var r2pw = alignRound(1 - (match.oswon/(match.opts-match.ofirsts)), 1, 1);
                //var bkconv = alignRound(1 - (match.osaved/match.ochances), 1, 1) + ' (' + (match.ochances - match.osaved) + '/' + match.ochances + ')';
                var bkconv = (match.ochances - match.osaved) + '/' + match.ochances;
                var statrow = [domratio, tpw, rpw, vace, r1pw, r2pw, bkconv];
                }
            else if (showstats == 'w') {
                var pointswon = parseInt(match.fwon) + parseInt(match.swon) + (match.opts - match.ofwon - match.oswon);
                var tpw = alignRound((pointswon/(parseInt(match.pts) + parseInt(match.opts))), 1, 1);
                var rpw = alignRound(1 - ((parseInt(match.ofwon) + parseInt(match.oswon))/match.opts), 1, 1);
                var vace = alignRound((match.oaces/match.opts), 1, 1);
                var r1pw = alignRound(1 - (match.ofwon/match.ofirsts), 1, 1);
                var r2pw = alignRound(1 - (match.oswon/(match.opts-match.ofirsts)), 1, 1);
                var bkconv = alignRound(1 - (match.osaved/match.ochances), 1, 1) + ' (' + (match.ochances - match.osaved) + '/' + match.ochances + ')';
                var tp = parseInt(match.pts) + parseInt(match.opts)
                var statrow = [tp, match.aces, match.dfs, match.pts, match.firsts, match.pts-match.firsts, match.oaces];
                }                
            }
        //$mtrow.append($('<td>').text(domratio).attr('align', 'right'));;
        for (var i = 0; i < statrow.length; i++) {
            $mtrow.append($('<td>').text(statrow[i]).attr('align', 'right'));
            }
        $mtrow.append($('<td>').text(showtime).attr('align', 'right'));
        $mtbody.append($mtrow);
        var matchnew = getWinLossTiebreak(match);
        for (u=0; u<stats.length; u++) {
            t = stats[u];
            if (matchnew[t] != '') {currentfilter[t] = currentfilter[t] + parseInt(matchnew[t]);}
            }
        }

    // back to match table
    if ($mtbody.children().length == 0) {
        if (!$("#spanCareerqq").hasClass('selected')) { // career is not selected
            //var $mftspan = $('<span>').text('show career').attr('font-style', 'italic');
            //$mftspan.attr('id', 'careerclick').attr('class', 'likelink');
            var mft = '<span id="careerclick" class="likelink">Show career</span>, c';
            }
        else {var mft = 'C';}
        pTable = '<p id="matches">&nbsp;<br/>&nbsp;<br/>Your filters returned no matches. ' + mft + 'hange a filter or two, or press the '
        pTable = pTable + '<span class="menureset2 likelink">reset button</span>.</p>'
        $("#matches").replaceWith(pTable);
        }
    else {
        $matchtable.append($mtbody).attr('id', 'matches').attr('class', 'tablesorter');
        $matchtable.attr('border', 0).attr('cellspacing', 0).attr('cellpadding', 4);
        $("#stats").html($matchtable);
        if (showstats == "a") {
            $("#matches").tablesorter( {sortList: slist,
                                    headers: {0: {sorter:'dates'},
                                    	      1: {sorter:false},	
                                              3: {sorter:'rounds'},
                                              4: {sorter:'ranks'},
                                              5: {sorter:'ranks'},
                                              6: {sorter:false}, // matchup
                                              7: {sorter:false}, // score -- more I can do with this?
                                              8: {sorter:'descNum'},
                                              9: {sorter:'descNum'},
                                              }
                                   });
            }
        else {
            $("#matches").tablesorter( {sortList: slist,
                                    headers: {0: {sorter:'dates'},
                                    	      1: {sorter:false},	
                                              3: {sorter:'rounds'},
                                              //4: {sorter:'ranks'},
                                              //5: {sorter:'ranks'},
                                              4: {sorter:false}, // matchup
                                              5: {sorter:false}, // score -- more I can do with this?
                                              6: {sorter:'descNum'},
                                              7: {sorter:'descNum'},
                                              8: {sorter:'ascNum'},
                                              9: {sorter:'descNum'},
                                              10: {sorter:'descNum'},
                                              11: {sorter:'descNum'},
                                              12: {sorter:false},
                                              13: {sorter:'descNum'}
                                              }
                                   });
            }
        }
    var currentParams = getFilterParams();
    var opplist = [], oppteamlist = [], partnerlist = [];
    if (!$('#oppdef').hasClass('selected')) {var opplist = $('.oppselected').text().split(fourspaces + fourspaces).slice(1);}
    if (!$('#oppteamdef').hasClass('selected')) {var oppteamlist = $('.oppteamselected').text().split(fourspaces + fourspaces).slice(1);}
    if (!$('#partnerdef').hasClass('selected')) {var partnerlist = $('.partnerselected').text().split(fourspaces + fourspaces).slice(1);}
    var statrow = makeSplitStatRow(currentfilter);
    if ($mtbody.children().length == 0) {}
    else if (currentParams == '' && (opplist.length == 0 && oppteamlist.length == 0 && partnerlist.length == 0)) {}
    else {
        var rowid = '#f' + currentParams;
        //if (opplist.length == 0 && oppteamlist.length == 0 && partnerlist.length == 0) {var rowid = '#f' + currentParams;}
        if (opplist.length > 0) {
            var nots = $('.oppselected').text().replace(/\u00a0/g, '');
            rowid = rowid + '-' + nots;
            }
        if (oppteamlist.length > 0) {
            var oppteams = $('.oppteamselected').text().replace(/\u00a0/g, '');
            rowid = rowid + '-' + oppteams;
            }
        if (partnerlist.length > 0) {
            var partners = $('.partnerselected').text().replace(/\u00a0/g, '');
            rowid = rowid + '-' + partners;
            }
        if ($(rowid).length > 0) {$(rowid).remove();} // if same filter is already present, delete
        else if ($('.filtersplitrow').length == 5) {$('.filtersplitrow').last().remove();} // if 5 already, delete last

        var $filtrow = $('<tr>').attr('class', 'filtersplitrow')
        $filtrow.attr('id', rowid.slice(1));
        var ftitle = '';
        if (partnerlist.length == 0) {} // get label
        else {
            for (k=0; k<partnerlist.length; k++) {
                //var oppname = insertNameSpaces(opplist[k]);
                var ftitle = ftitle + 'Partner: ' + partnerlist[k] + '; '; // need to parse this for initials? last name?
                }
            ftitle = ftitle.slice(0, -2); // delete final semi-colon and space
            }
        if (opplist.length == 0) {} // get label
        else {
            for (k=0; k<opplist.length; k++) {
                //var oppname = insertNameSpaces(opplist[k]);
                var ftitle = ftitle + 'Opponent: ' + opplist[k] + '; '; // need to parse this for initials? last name?
                }
            ftitle = ftitle.slice(0, -2); // delete final semi-colon and space
            }
        if (oppteamlist.length == 0) {} // get label
        else {
            var mult_unit = unitePartners(oppteamlist);
            oppteamlist = mult_unit[1];
            for (k=0; k<oppteamlist.length; k++) {
                //var oppname = insertNameSpaces(opplist[k]);
                var ftitle = ftitle + 'Opp Team: ' + oppteamlist[k] + '; '; // need to parse this for initials? last name?
                }
            ftitle = ftitle.slice(0, -2); // delete final semi-colon and space
            }  
        ftitle = getFilterTitle(ftitle);      

        var $nameital = ($('<span>').css('font-style', 'italic').attr('class', 'filterlabel'));
        if (ftitle.length > 25) { // too long, replace end with ..., add title, etc.
            $nameital.attr('title', ftitle.replace(/; /g, '\n')).css('cursor', 'pointer').text(' ' + ftitle.slice(0,22) + '... ');
            }
        else {$nameital.text(' ' + ftitle + ' ');}
        
        var $closebutton = ($('<span>').text("[x]").attr('class', 'rowcloser likelink')) // add button to close
        //var $splitclick = $('<span>').text('(+)').attr('class', 'likelink splitclick');
        
        $filtrow.append($('<td>').append($closebutton).append($nameital)); //.append($splitclick));
        for (var i = 0; i < statrow.length; i++) {
            var $fcell = $('<td>').attr('align', 'right').text(statrow[i]);
            $filtrow.append($fcell);
            }
        $("#splitsbody").prepend($filtrow)

        $(".rowcloser").click(function () {// attach handler to .rowcloser
            $(this).parent().parent().remove();
            })
        }
        
    // add title above matches
    if (ftitle == "" || ftitle == undefined) {var ftitle = 'Last 52';}
    else {var tabtitle = 'Matches: '+ftitle;} //.replace(/; /g, ' > ');}
    var wlrec = '(' + statrow[0].slice(0,statrow[0].indexOf('(')-1) + ')';
    $("#tablelabel").html('<b>Matches '+wlrec+' > '+ftitle+'</b>');
        
    // how to count filters applied?
    if (currentParams == '' && (opplist.length == 0 && oppteamlist.length == 0 && partnerlist.length == 0)) {}
    else if ($mtbody.children().length == 0) {} // no matches -- keep this or not?
    else {
        var $bmatches = $('<span>').text('Apply filters to another player: ');
        $bmatches.append($('<input>').attr('id', 'paramsearch'));
        $('#matches').after($bmatches);
        }
    $(".h2hclick").click(function () {
        opponent = $(this).parent().attr('class');
        var withspaces = insertNameSpaces(opponent);
        setPlayerFilter(withspaces, 1, 0);
        if ($("#h2hhead").hasClass("closed")) {
            $("#h2hhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".h2hchoice").toggle();
            }
        })
    $(".menureset2").click(function () {
        resetFilters();
        // close open menus?
        makeMatchTable({}, 1);
        });
    $("#careerclick").click(function () {
        if ($("#spanhead").hasClass("closed")) {
            $("#spanhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".spanchoice").toggle();
            }
        $(".spanchoice").removeClass("selected").removeClass('spanselected');
        $("#spanCareerqq").addClass('selected').addClass('spanselected');
        makeMatchTable({}, 0);
        })
    }
    
function renderHeadToHeads(defSort) {
   
    var hdrs = hdrsHead;
    var slist = [[0,0]]; // for now, 2nd column, descending
    if (defSort == 0) {slist = confirmSort(slist);}
    
    var hDict = {}

    var $matchtable = $('<table>');
    var $mthead = $('<thead>');
    var $mtheaderrow = $('<tr>').attr('id', 'matchheader'); 
    var $mtfoot = $('<tfoot>');
    var $mtfooterrow = $('<tr>').attr('id', 'matchfooter').attr('background-color', '#FFF'); // color weirdness?  
    var $mtbody = $('<tbody>');
    var rightaligns = {0: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 
                       11: '', 12: '', 13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: ''};
    for (var s = 0; s < matchmx.length; s++) {   
        if (s == 0) {
            // header row
            var cells = [];
            for (var i = 0; i < hdrs.length; i++) {
                var $mthspan = $('<span>').text(hdrs[i]);
                if (hdrs[i] in titleTips) {$mthspan.attr('title', titleTips[hdrs[i]]);}
                var $mthcell = $('<th>').append($mthspan);
                if (i in rightaligns) {$mthcell.attr('align', 'right');}
                $mtheaderrow.append($mthcell);
                }
            $mthead.append($mtheaderrow);
            $matchtable.append($mthead);
            // footer row -- do i want to keep this for head2head view?
            var fcells = [];
            for (var i = 0; i < hdrs.length; i++) {
                if (i == 1 && !$("#spanCareerqq").hasClass('selected')) { // && career is not selected
                    var $mftspan = $('<span>').text('Show Career').attr('font-style', 'italic');
                    $mftspan.attr('id', 'careerclick').attr('class', 'likelink');
                    }
                else {
                    var $mftspan = $('<span>').text('');
                    }
                var $mftcell = $('<td>').append($mftspan);
                $mtfooterrow.append($mftcell);
                }
            $mtfoot.append($mtfooterrow);
            $matchtable.append($mtfoot);
            }            
            
        var match = {} // create dict for each match
        for (var x=0; x<matchhead.length; x++) {
            if (matchmx[s].length <= x) {match[matchhead[x]] = '';}
            else {match[matchhead[x]] = matchmx[s][x];}
            }
            
        if (match.score == "" || match.score.slice(0,1) == 'D') {continue;}
        if (match.score.slice(0,1) == 'W' || match.score.slice(0,1) == 'R') {continue;}
        if (filterMatch(match, 'results') != 1) {continue;}
            
        match = getWinLossTiebreak(match);
                         
        if (!(match.opp in hDict)) {
            hDict[match.opp] = {'m': 0, 'w': 0, 'l': 0, 'occ': match.ocountry, 'ms': 0, 'dates': {}};
            for (u=0; u<stats.length; u++) {
                hDict[match.opp][stats[u]] = 0;
                }
            }
        hDict[match.opp]['m'] += 1
        if (match.wl == 'W') {hDict[match.opp]['w'] += 1;}
        else {hDict[match.opp]['l'] += 1;}
         
        //hDict[match.opp]['tiebreaks'] += match.tiebreaks
        //hDict[match.opp]['tbwon'] += match.tbwon
        
        if (match.oswon != "") {hDict[match.opp]['ms'] += 1;}
        
        for (u=0; u<stats.length; u++) {
            t = stats[u];
            if (match[t] != '') {hDict[match.opp][t] = hDict[match.opp][t] + parseInt(match[t]);}
            }        
        
        var wlfull = {'W': 'WIN', 'L': 'LOSS'};
        var details = wlfull[match.wl] + ': ' + match.matchid.slice(0,4) + ' ' + match.tourn + ' ' + match.round + ' (' + match.surf + '), ' + match.score;
        hDict[match.opp]['dates'][match.date] = details;
        }

    // check against match minimum (abbreviated version of genfilter())
    var multselect = $('.minimumselected').text().split(fourspaces + fourspaces).slice(1);
    var matchmin = multselect[0];
    if (matchmin == 'All') {var mm = 1;}
    else {var mm = parseInt(matchmin);}
        
    for (player in hDict) {
        if (!hDict.hasOwnProperty(player)) {continue;}
	if (hDict[player].m < mm) {continue;}
        
        var $mtrow = $('<tr>');
        
        var $deflink = $('<span>').text(hDict[player].m);
        $deflink.attr('class', 'likelink h2hclick');
        var $matchcell = $('<td>').append($deflink).attr('class', player.replace(/ /g, '')).attr('align', 'right');
        $mtrow.append($matchcell);

	$oppcc = $('<span>')
	$oppcc.text(' [' + hDict[player].occ + ']');
        var nlink = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + player.replace(/ /g, '') // opp link
        var $olk = $('<a>').text(player).attr('href', nlink);
        var $oppcell = $('<td>').append($olk).append($oppcc);     
        $mtrow.append($oppcell);
        
        // get list of h2h match dates
        var mdates = [];
        for (md in hDict[player]['dates']) {
            if (hDict[player]['dates'].hasOwnProperty(md)) {mdates.push(md);}
            }
	mdates.sort()
	
	$firstdate = $('<td>').text(showDate(mdates[0])).attr('align', 'right');
	$firstdate.attr('title', hDict[player]['dates'][mdates[0]]);
	$lastdate = $('<td>').text(showDate(mdates[mdates.length - 1])).attr('align', 'right');
	$lastdate.attr('title', hDict[player]['dates'][mdates[mdates.length - 1]]);     
        
        $mtrow.append($('<td>').text(hDict[player].w).attr('align', 'right'));
        $mtrow.append($('<td>').text(hDict[player].l).attr('align', 'right'));
        var wlperc = alignRound(hDict[player].w/hDict[player].m, 1, 1);
        $mtrow.append($('<td>').text(wlperc).attr('align', 'right'));
        
        $mtrow.append($('<td>').text(hDict[player].tiebreaks).attr('align', 'right'));
        $mtrow.append($('<td>').text(hDict[player].tbwon).attr('align', 'right'));
        $mtrow.append($('<td>').text(hDict[player].tiebreaks - hDict[player].tbwon).attr('align', 'right'));
        var tbperc = alignRound(hDict[player].tbwon/hDict[player].tiebreaks, 1, 1);
        $mtrow.append($('<td>').text(tbperc).attr('align', 'right'));
        
        $mtrow.append($firstdate);
        $mtrow.append($lastdate);
        
        $mtrow.append($('<td>').text(hDict[player].ms).attr('align', 'right')); // stat sample
        
        var rpw = 1 - (parseInt(hDict[player].ofwon) + parseInt(hDict[player].oswon))/hDict[player].opts; // dominance ratio:
        var spw = ((parseInt(hDict[player].fwon) + parseInt(hDict[player].swon))/hDict[player].pts);
        var spl = 1 - spw;
        var num = rpw/spl, dec = 2;
        var domratio = alignRound(rpw/spl, dec);

        var acerate = alignRound((hDict[player].aces/hDict[player].pts), 1, 1);
        var dfrate = alignRound((hDict[player].dfs/hDict[player].pts), 1, 1);
        var firstin = alignRound((hDict[player].firsts/hDict[player].pts), 1, 1);
        var fwin = alignRound((hDict[player].fwon/hDict[player].firsts), 1, 1);
        var swin = alignRound((hDict[player].swon/(hDict[player].pts-hDict[player].firsts)), 1, 1);
        var bksavedRate = alignRound((hDict[player].saved/hDict[player].chances), 1, 1)
        var bksaved = hDict[player].saved + '/' + hDict[player].chances;

        var pointswon = parseInt(hDict[player].fwon) + parseInt(hDict[player].swon) + (hDict[player].opts - hDict[player].ofwon - hDict[player].oswon);
        var tpw = alignRound((pointswon/(parseInt(hDict[player].pts) + parseInt(hDict[player].opts))), 1, 1);
        var rpw = alignRound(1 - ((parseInt(hDict[player].ofwon) + parseInt(hDict[player].oswon))/hDict[player].opts), 1, 1);
        var vace = alignRound((hDict[player].oaces/hDict[player].opts), 1, 1);
        var r1pw = alignRound(1 - (hDict[player].ofwon/hDict[player].ofirsts), 1, 1);
        var r2pw = alignRound(1 - (hDict[player].oswon/(hDict[player].opts-hDict[player].ofirsts)), 1, 1);
        var bkconvRate = alignRound(1 - (hDict[player].osaved/hDict[player].ochances), 1, 1)
        var bkconv = (hDict[player].ochances - hDict[player].osaved) + '/' + hDict[player].ochances;
        
        var statrow = [domratio, acerate, dfrate, firstin, fwin, swin, alignRound(spw, 1, 1), rpw]; 
        for (var i = 0; i < statrow.length; i++) {
            $mtrow.append($('<td>').text(statrow[i]).attr('align', 'right'));
            }        
	$bpsv = $('<td>').text(bksavedRate).attr('align', 'right');
	$bpsv.attr('title', bksaved);
	$bpcv = $('<td>').text(bkconvRate).attr('align', 'right');
	$bpcv.attr('title', bkconv);
        
        $mtrow.append($bpsv);
        $mtrow.append($bpcv);        
               
        $mtbody.append($mtrow);
        }

    // back to match table
    if ($mtbody.children().length == 0) {
        if (!$("#spanCareerqq").hasClass('selected')) { // career is not selected
            //var $mftspan = $('<span>').text('show career').attr('font-style', 'italic');
            //$mftspan.attr('id', 'careerclick').attr('class', 'likelink');
            var mft = '<span id="careerclick" class="likelink">Show career</span>, c';
            }
        else {var mft = 'C';}
        pTable = '<p id="matches">&nbsp;<br/>&nbsp;<br/>Your filters returned no matches. ' + mft + 'hange a filter or two, or press the '
        pTable = pTable + '<span class="menureset2 likelink">reset button</span>.</p>'
        $("#matches").replaceWith(pTable);
        }
    else {
        $matchtable.append($mtbody).attr('id', 'matches').attr('class', 'tablesorter');
        $matchtable.attr('border', 0).attr('cellspacing', 0).attr('cellpadding', 4);
        $("#stats").html($matchtable);
        $("#matches").tablesorter( {sortList: slist,
                                    headers: {1: {sorter:false}, // player
                                              9: {sorter:'dates'},
                                              10: {sorter:'datesDesc'},
                                    	      0: {sorter:'descNum'},	
                                              2: {sorter:'descNum'},
                                              3: {sorter:'descNum'},
                                              4: {sorter:'descNum'},
                                              5: {sorter:'descNum'}, 
                                              6: {sorter:'descNum'},
                                              7: {sorter:'descNum'},
                                              8: {sorter:'descNum'},
                                              11: {sorter:'descNum'},
                                              12: {sorter:'descNum'},
                                              13: {sorter:'descNum'},
                                              14: {sorter:'ascNum'},
                                              15: {sorter:'descNum'},
                                              16: {sorter:'descNum'},
                                              17: {sorter:'descNum'},
                                              18: {sorter:'descNum'},
                                              19: {sorter:'descNum'},
                                              20: {sorter:'descNum'},
                                              21: {sorter:'descNum'}                                             
                                              }
                                   });
        }
    
    var ftitle = getFilterTitle("");
    var pgtitle = '<b>Head-to-Head Records ('+ftitle+')</b>'; // <br/>Just testing blah blah blah.';
    $("#tablelabel").html(pgtitle);
    
    $(".h2hclick").click(function () {
        // switch back to results tab
        $(".tabview").addClass("tablink");
        $("#tabResults").removeClass("tablink");
        // unlike 'tabclick', don't reset any filters
        opponent = $(this).parent().attr('class');
        var withspaces = insertNameSpaces(opponent);
        setPlayerFilter(withspaces, 1, 1); // this includes makeMatchTable
        if ($("#h2hhead").hasClass("closed")) {
            $("#h2hhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".h2hchoice").toggle();
            }
        $(".header").show();
        $("#minimumhead").hide();            
        })
    }
    
function renderEvents(defSort) {
   
    var hdrs = hdrsEvents;
    var slist = [[0,0]]; // for now, 1st column; default is descending
    if (defSort == 0) {slist = confirmSort(slist);}
    
    var hDict = {}

    var $matchtable = $('<table>');
    var $mthead = $('<thead>');
    var $mtheaderrow = $('<tr>').attr('id', 'matchheader'); 
    var $mtfoot = $('<tfoot>');
    var $mtfooterrow = $('<tr>').attr('id', 'matchfooter').attr('background-color', '#FFF'); // color weirdness?  
    var $mtbody = $('<tbody>');
    var rightaligns = {0: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 
                       11: '', 12: '', 13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: ''};
    for (var s = 0; s < matchmx.length; s++) {   
        if (s == 0) {
            // header row
            var cells = [];
            for (var i = 0; i < hdrs.length; i++) {
                var $mthspan = $('<span>').text(hdrs[i]);
                if (hdrs[i] in titleTips) {$mthspan.attr('title', titleTips[hdrs[i]]);}
                var $mthcell = $('<th>').append($mthspan);
                if (i in rightaligns) {$mthcell.attr('align', 'right');}
                $mtheaderrow.append($mthcell);
                }
            $mthead.append($mtheaderrow);
            $matchtable.append($mthead);
            // footer row -- do i want to keep this for head2head view?
            var fcells = [];
            for (var i = 0; i < hdrs.length; i++) {
                if (i == 1 && !$("#spanCareerqq").hasClass('selected')) { // && career is not selected
                    var $mftspan = $('<span>').text('Show Career').attr('font-style', 'italic');
                    $mftspan.attr('id', 'careerclick').attr('class', 'likelink');
                    }
                else {
                    var $mftspan = $('<span>').text('');
                    }
                var $mftcell = $('<td>').append($mftspan);
                $mtfooterrow.append($mftcell);
                }
            $mtfoot.append($mtfooterrow);
            $matchtable.append($mtfoot);
            }            
            
        var match = {} // create dict for each match
        for (var x=0; x<matchhead.length; x++) {
            if (matchmx[s].length <= x) {match[matchhead[x]] = '';}
            else {match[matchhead[x]] = matchmx[s][x];}
            }
        
        var tourlevel = {'A': '', 'M': '', 'G': ''};
        if (!(match.level in tourlevel)) {continue;}
        if (match.tourn.slice(0,4) == 'ATP ') {continue;}
        
        if (match.wl == 'W' && match.round != 'F') {  
            if (match.score == "" || match.score.slice(0,1) == 'D') {continue;}
            if (match.score.slice(0,1) == 'W' || match.score.slice(0,1) == 'R') {continue;}
            }
        
        if (filterMatch(match, 'results') != 1) {continue;}
            
        match = getWinLossTiebreak(match);
        
        if (match.tourn.indexOf('Olympics') > -1) {match.tourn = 'Olympics';}
                         
        if (!(match.tourn in hDict)) {
            hDict[match.tourn] = {'m': 0, 'w': 0, 'l': 0, 'occ': match.ocountry, 'ms': 0, 'dates': {}, 'surfs': {}, 'matches': {}};
            for (u=0; u<stats.length; u++) {
                hDict[match.tourn][stats[u]] = 0;
                }
            }
        hDict[match.tourn]['m'] += 1
        if (match.wl == 'W') {hDict[match.tourn]['w'] += 1;}
        else {hDict[match.tourn]['l'] += 1;}
        
        if (match.oswon != "") {hDict[match.tourn]['ms'] += 1;}
        
        for (u=0; u<stats.length; u++) {
            t = stats[u];
            if (match[t] != '') {hDict[match.tourn][t] = hDict[match.tourn][t] + parseInt(match[t]);}
            }        

        var myear;
        if (match.matchid.length > 0) {myear = match.matchid.slice(0,4);}
        else if (parseInt(match.date.slice(4,8)) > 1215) {myear = parseInt(match.date.slice(0,4)) + 1;}
        else {myear = match.date.slice(0,4);}
        
        hDict[match.tourn]['surfs'][myear] = match.surf;
        
        if (match.round == 'F' && match.wl == 'W') {
            hDict[match.tourn]['dates'][myear] = 'W';
            hDict[match.tourn]['matches'][myear] = 'WIN: '+match.round+' vs '+match.opp+', '+match.score;
            }
        else if (!(myear in hDict[match.tourn]['dates']) && match.wl == 'L') {
            hDict[match.tourn]['dates'][myear] = match.round;
            hDict[match.tourn]['matches'][myear] = 'LOSS: '+match.round+' vs '+match.opp+', '+match.score;
            }
        // make sure to get some date in there in case only wins in an incomplete tournament
        else if (!(myear in hDict[match.tourn]['dates']) && match.wl == 'W') {
            hDict[match.tourn]['dates'][myear] = "";
            hDict[match.tourn]['matches'][myear] = "";
            }
        // covers for previous line -- if year already in but only wins, get the loss
        else if ((myear in hDict[match.tourn]['dates'] && hDict[match.tourn]['dates'][myear] == "") && match.wl == 'L') {
            hDict[match.tourn]['dates'][myear] = match.round;
            hDict[match.tourn]['matches'][myear] = 'LOSS: '+match.round+' vs '+match.opp+', '+match.score;
            }
        }

    // check against match minimum (abbreviated version of genfilter())
    var multselect = $('.minimumselected').text().split(fourspaces + fourspaces).slice(1);
    var matchmin = multselect[0];
    if (matchmin == 'All') {var mm = 1;}
    else {var mm = parseInt(matchmin);}
    
    // check against match minimum (abbreviated version of genfilter())
    var multselectYears = $('.minyearsselected').text().split(fourspaces + fourspaces).slice(1);
    var yearsmin = multselectYears[0];
    if (yearsmin == 'All') {var mmy = 1;}
    else {var mmy = parseInt(yearsmin);}    
        
    for (event in hDict) {
        if (!hDict.hasOwnProperty(event)) {continue;}
	if (hDict[event].m < mm) {continue;}
        
        var $mtrow = $('<tr>');
        
        // get list of years
        var mdates = [];
        var allResults = {}
        for (md in hDict[event]['dates']) {
            if (hDict[event]['dates'].hasOwnProperty(md)) {
                mdates.push(md);
                allResults[hDict[event]['dates'][md]] = '';
                }
            }
            
        if (mdates.length < mmy) {continue;} // check against year minimum from filter
            
	mdates.sort();
	var lastyear = mdates[mdates.length-1];
	
	$mtrow.append($('<td>').text(mdates.length).attr('align', 'right'));     

	//$oppcc = $('<span>') // link to same event results?
	//$oppcc.text(' [' + hDict[player].occ + ']');
        //var nlink = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + player.replace(/ /g, '') // opp link
        //var $olk = $('<a>').text(player).attr('href', nlink);
        var $eventname = $('<span>').text(event).attr('class', 'likelink eventclick');
        var $oppcell = $('<td>').append($eventname).attr('class', event.replace(/ /g, '_'));     
        $mtrow.append($oppcell);
        
        $mtrow.append($('<td>').text(hDict[event]['surfs'][lastyear])); 
        
        var $deflink = $('<span>').text(hDict[event].m); // add link to event results? would need event version of h2hclick
        //$deflink.attr('class', 'likelink h2hclick');
        var $matchcell = $('<td>').append($deflink).attr('align', 'right') //.attr('class', player.replace(/ /g, ''))
        $mtrow.append($matchcell);        
	
	$firstdate = $('<td>').text(mdates[0]).attr('align', 'right');
	$firstdate.attr('title', hDict[event]['matches'][mdates[0]]);
	$lastdate = $('<td>').text(lastyear).attr('align', 'right');
	$lastdate.attr('title', hDict[event]['matches'][lastyear]);  
        
        $mtrow.append($('<td>').text(hDict[event].w).attr('align', 'right'));
        $mtrow.append($('<td>').text(hDict[event].l).attr('align', 'right'));
        var wlperc = alignRound(hDict[event].w/hDict[event].m, 1, 1);
        $mtrow.append($('<td>').text(wlperc).attr('align', 'right'));
        
        $mtrow.append($('<td>').text(hDict[event].tiebreaks).attr('align', 'right'));
        $mtrow.append($('<td>').text(hDict[event].tbwon).attr('align', 'right'));
        $mtrow.append($('<td>').text(hDict[event].tiebreaks - hDict[event].tbwon).attr('align', 'right'));
        var tbperc = alignRound(hDict[event].tbwon/hDict[event].tiebreaks, 1, 1);
        $mtrow.append($('<td>').text(tbperc).attr('align', 'right'));
        
        $mtrow.append($firstdate);
        $mtrow.append($lastdate);
        
        // get best result, with title for years achieved
        var rdpref = ['W', 'F', 'SF', 'QF', 'RR', 'R16', 'R32', 'R64', 'R128'];
        var bestResult = '';
        for (var i = 0; i < rdpref.length; i++) {
            if (rdpref[i] in allResults) {
                bestResult = rdpref[i];
                break;
                }
            }
        
        var bestYears = [];
        for (md in hDict[event]['dates']) {
            if (hDict[event]['dates'].hasOwnProperty(md)) {
                if (hDict[event]['dates'][md] == bestResult) {bestYears.push(md);}
                }
            } 
        bestYears.sort();    
        var bestText =  bestYears.join(',');
        
	$bestres = $('<td>').text(bestResult).attr('align', 'right');
	$bestres.attr('title', bestText);        
        $mtrow.append($bestres);       
        
        $mtrow.append($('<td>').text(hDict[event].ms).attr('align', 'right')); // stat sample
        
        var rpw = 1 - (parseInt(hDict[event].ofwon) + parseInt(hDict[event].oswon))/hDict[event].opts; // dominance ratio:
        var spw = ((parseInt(hDict[event].fwon) + parseInt(hDict[event].swon))/hDict[event].pts);
        var spl = 1 - spw;
        var num = rpw/spl, dec = 2;
        var domratio = alignRound(rpw/spl, dec);

        var acerate = alignRound((hDict[event].aces/hDict[event].pts), 1, 1);
        var dfrate = alignRound((hDict[event].dfs/hDict[event].pts), 1, 1);
        var firstin = alignRound((hDict[event].firsts/hDict[event].pts), 1, 1);
        var fwin = alignRound((hDict[event].fwon/hDict[event].firsts), 1, 1);
        var swin = alignRound((hDict[event].swon/(hDict[event].pts-hDict[event].firsts)), 1, 1);
        var bksavedRate = alignRound((hDict[event].saved/hDict[event].chances), 1, 1)
        var bksaved = hDict[event].saved + '/' + hDict[event].chances;

        var pointswon = parseInt(hDict[event].fwon) + parseInt(hDict[event].swon) + (hDict[event].opts - hDict[event].ofwon - hDict[event].oswon);
        var tpw = alignRound((pointswon/(parseInt(hDict[event].pts) + parseInt(hDict[event].opts))), 1, 1);
        var rpw = alignRound(1 - ((parseInt(hDict[event].ofwon) + parseInt(hDict[event].oswon))/hDict[event].opts), 1, 1);
        var vace = alignRound((hDict[event].oaces/hDict[event].opts), 1, 1);
        var r1pw = alignRound(1 - (hDict[event].ofwon/hDict[event].ofirsts), 1, 1);
        var r2pw = alignRound(1 - (hDict[event].oswon/(hDict[event].opts-hDict[event].ofirsts)), 1, 1);
        var bkconvRate = alignRound(1 - (hDict[event].osaved/hDict[event].ochances), 1, 1)
        var bkconv = (hDict[event].ochances - hDict[event].osaved) + '/' + hDict[event].ochances;
        
        var statrow = [domratio, acerate, dfrate, firstin, fwin, swin, alignRound(spw, 1, 1), rpw]; 
        for (var i = 0; i < statrow.length; i++) {
            $mtrow.append($('<td>').text(statrow[i]).attr('align', 'right'));
            }        
	$bpsv = $('<td>').text(bksavedRate).attr('align', 'right');
	$bpsv.attr('title', bksaved);
	$bpcv = $('<td>').text(bkconvRate).attr('align', 'right');
	$bpcv.attr('title', bkconv);
        
        $mtrow.append($bpsv);
        $mtrow.append($bpcv);        
               
        $mtbody.append($mtrow);
        }

    // back to match table
    if ($mtbody.children().length == 0) {
        if (!$("#spanCareerqq").hasClass('selected')) { // career is not selected
            //var $mftspan = $('<span>').text('show career').attr('font-style', 'italic');
            //$mftspan.attr('id', 'careerclick').attr('class', 'likelink');
            var mft = '<span id="careerclick" class="likelink">Show career</span>, c';
            }
        else {var mft = 'C';}
        pTable = '<p id="matches">&nbsp;<br/>&nbsp;<br/>Your filters returned no matches. ' + mft + 'hange a filter or two, or press the '
        pTable = pTable + '<span class="menureset2 likelink">reset button</span>.</p>'
        $("#matches").replaceWith(pTable);
        }
    else {
        $matchtable.append($mtbody).attr('id', 'matches').attr('class', 'tablesorter');
        $matchtable.attr('border', 0).attr('cellspacing', 0).attr('cellpadding', 4);
        $("#stats").html($matchtable);
        $("#matches").tablesorter( {sortList: slist,
                                    headers: {11: {sorter:'ascNum'},
                                              12: {sorter:'descNum'},
                                              13: {sorter:'roundsDesc'},
                                    	      0: {sorter:'descNum'},	
                                              24: {sorter:'descNum'},
                                              3: {sorter:'descNum'},
                                              4: {sorter:'descNum'},
                                              5: {sorter:'descNum'}, 
                                              6: {sorter:'descNum'},
                                              7: {sorter:'descNum'},
                                              8: {sorter:'descNum'},
                                              9: {sorter:'descNum'},
                                              22: {sorter:'descNum'},
                                              23: {sorter:'descNum'},
                                              10: {sorter:'descNum'},
                                              17: {sorter:'ascNum'},
                                              15: {sorter:'descNum'},
                                              16: {sorter:'descNum'},
                                              14: {sorter:'descNum'},
                                              18: {sorter:'descNum'},
                                              19: {sorter:'descNum'},
                                              20: {sorter:'descNum'},
                                              21: {sorter:'descNum'}                                             
                                              }
                                   });
        }
    
    var ftitle = getFilterTitle("");
    var pgtitle = '<b>Tour-Level Event Records ('+ftitle+')</b>'; // <br/>Just testing blah blah blah.';
    $("#tablelabel").html(pgtitle);
    
    $(".eventclick").click(function () {
        // switch back to results tab
        $(".tabview").addClass("tablink");
        $("#tabResults").removeClass("tablink");
        // unlike 'tabclick', don't reset any filters
        var ename = $(this).parent().attr('class');
        //var withspaces = insertNameSpaces(opponent);
        //setPlayerFilter(withspaces, 1, 1); // this includes makeMatchTable
        if ($("#tourneyhead").hasClass("closed")) {
            $("#tourneyhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".tourneychoice").show();
            }
        var eclass = '#tourney'+ename+'qq';
	$(".tourneychoice").removeClass("selected").removeClass("tourneyselected"); 
	$(eclass).addClass("selected").addClass("tourneyselected");       
        $(".header").show();
        $("#minimumhead").hide();
        $(".minimumchoice").hide();
        $("#minyearshead").hide();
        $(".minyearschoice").hide();
        makeMatchTable({}, 1);            
        })
    }

function makeMatchTable(options, defSort) {
    var servestats, stdscores;
    var rows = [], chunks = [];
    var stx = $.trim($(".spanselected").text());
    // checking to see whether we need to add more matches

    if (keep_loading == 1) {   
        if (view == "doubles") {
            if ((matchmx_dubs.length <= shortlist && stx != 'Last 52') && (stx != '2023' && stx != '2024')) {
                if (careerjs_dubs == 1) {matchmx_dubs = matchmx_dubs.concat(morematchmx_dubs);}   // some way to force this to load, even if waiting
                };
            }
        else {    
            if ((matchmx.length <= shortlist && stx != 'Last 52') && (stx != '2023' && stx != '2024')) {
                if (careerjs == 1) {matchmx = matchmx.concat(morematchmx);}   // some way to force this to load, even if waiting
                };
            }
        }
        
    if (view != "") { // url specifies view other than results
        $(".tabview").addClass('tablink');
        if (view == "h2h") {$("#tabHead").removeClass('tablink');}
        else if (view == "events") {$("#tabEvents").removeClass('tablink');}
        else if (view == "doubles") {$("#tabDubs").removeClass('tablink');}
        view = '';
        } 
     
    if (!$('#tabResults').hasClass("tablink")) {var tabview = "results";}
    else if (!$('#tabHead').hasClass("tablink")) {var tabview = "head";}
    else if (!$('#tabEvents').hasClass("tablink")) {var tabview = "events";}
    else if (!$('#tabDubs').hasClass("tablink")) {var tabview = "doubles";}
    
    if (tabview == "results" || tabview == "doubles") {
        $("#abovestats").show();
        
        if ('overall' in prefilters) {
            $(".stattab").addClass('likelink');
            $(".statso").removeClass('likelink');
            delete prefilters['overall'];
            }
        else if ('return' in prefilters) {
            $(".stattab").addClass('likelink');
            $(".statsr").removeClass('likelink');
            delete prefilters['return'];
            }
        else if ('raw' in prefilters) {
            $(".stattab").addClass('likelink');
            $(".statsw").removeClass('likelink');
            delete prefilters['raw'];
            }
        else if ('overview' in prefilters) {
            $(".stattab").addClass('likelink');
            $(".statsa").removeClass('likelink');
            delete prefilters['overview'];
            }

        var hdrs; 
        var showstats = ''        
        if (tabview == "doubles") {
            $(".revscore").hide();
            $(".statsa").show();
            $(".statspacer").show();
            if (!$(".statso").hasClass('likelink')) {
                showstats = 'o';
                hdrs = hdrsDoublesServe;
                }
            else if (!$(".statsr").hasClass('likelink')) {
                showstats = 'r';
                hdrs = hdrsDoublesReturn;
                }
            else if (!$(".statsw").hasClass('likelink')) {
                showstats = 'w';
                hdrs = hdrsDoublesRaw;
                }
            else if (!$(".statsa").hasClass('likelink')) {
                showstats = 'a';
                hdrs = hdrsDoubles;
                }
            }
        else {
            $(".revscore").show();
            $(".statsa").hide();
            $(".statspacer").hide();
            if ($(".revscore").text() == 'Reverse Loss Scores') {stdscores = true;}
            else if ($(".revscore").text() == 'Standard Scores') {stdscores = false;}
            else if ('reverse' in prefilters) {
                $(".revscore").html('Standard Scores');
                stdscores = false;
                }
            else {
                $(".revscore").html('Reverse Loss Scores');
                stdscores = true;
                }
            if (!$(".statso").hasClass('likelink')) {
                showstats = 'o';
                hdrs = hdrsServe;
                }
            else if (!$(".statsr").hasClass('likelink')) {
                showstats = 'r';
                hdrs = hdrsReturn;
                }
            else if (!$(".statsw").hasClass('likelink')) {
                showstats = 'w';
                hdrs = hdrsRaw;
                }
            else if (!$(".statsa").hasClass('likelink')) {
                $(".stattab").addClass('likelink');
                $(".statso").removeClass('likelink');
                showstats = 'o';
                hdrs = hdrsServe;
                }
            }
        }
    else {$("#abovestats").hide();}

    if (tabview == "results") {
        renderResults(stdscores, showstats, hdrs, defSort);
        }
    if (tabview == "head") {
        renderHeadToHeads(defSort);
        }  
    if (tabview == "events") {
        renderEvents(defSort);
        }     
    if (tabview == "doubles") {
        renderDoubles(stdscores, showstats, hdrs, defSort);
        }      

    $("#titleclick").click(function () {
        // reset all other filters?
        if ($("#spanhead").hasClass("closed")) {
            $("#spanhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".spanchoice").toggle();
            }
        $(".spanchoice").removeClass("selected").removeClass('spanselected');
        $("#spanCareerqq").addClass('selected').addClass('spanselected');
        if ($("#roundhead").hasClass("closed")) {
            $("#roundhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".roundchoice").toggle();
            }
        $(".roundchoice").removeClass("selected").removeClass('roundselected');
        $("#round0").addClass('selected').addClass('roundselected');
        makeMatchTable({}, 0);
        })
    var paramsearchbox = "Find player";		
    $("#paramsearch").val(paramsearchbox);
    $("#paramsearch").focus(function() {
        if ($(this).val() == paramsearchbox) {$(this).val("");}
        var urlparams = getPermalinkParams();
        $( "#paramsearch" ).autocomplete({
                source: playerlist,
                minLength: 2,
                select: function(e, ui) {
                    var playerselect = ui.item.value;
                    var player = playerselect.slice(4);
                    var mw = playerselect.slice(1,2);
                    if (mw == 'M') {
                        var playerurl = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + player.replace(/ /g, '') + '&f=' + urlparams;
                        }
                    else {
                        var playerurl = 'https://www.tennisabstract.com/cgi-bin/wplayer.cgi?p=' + player.replace(/ /g, '') + '&f=' + urlparams;
                        }                        
                    window.open(playerurl, "_self");
                    }
            });
        });
        
    var pparams = getPermalinkParams();
    var new_path = 'https://www.tennisabstract.com/cgi-bin/player-classic.cgi?p=' + fullname.replace(/ /g, '') 
    if (pparams != '') {new_path = new_path + '&f=' + pparams;}
    history.pushState( {
        new_text: pparams,
        slug: new_path  
        }, null, new_path);
    //    }
    }

function makeMenus() {
    $('#footer').empty();
    if (!$('#tabDubs').hasClass("tablink") || view == "doubles") {
        var doubles = 1;
        }
    else {doubles = 0;}
    var $str = $('<table>').attr('class', 'menus');
    // partner first
    $str.append(
                $('<tr>').attr('id', 'partnerhead').attr('class', 'header closed') 
                        .append($('<th>').text(fourspaces + '\u00a0\u00a0' + 'Partner')
                        )
                )
    $spanspaces = $('<span>').text(fourspaces + fourspaces);
    $spaninput = $('<span>').append($('<input>').attr('id', 'partnersearch').css('width', '80'));
    $str.append(
                $('<tr>').attr('id', 'partnersearchrow').attr('class', 'partnerchoice inmenu') 
                        .append($('<td>').append($spanspaces).append($spaninput)
                        )
                )
    $str.append(
                $('<tr>').attr('id', 'partnerdef').attr('class', 'partnerselected partnerchoice selected inmenu menudefault')
                        .append($('<td>').text(fourspaces + fourspaces + 'All')
                                         )
                )
    // opponent
    $str.append(
                $('<tr>').attr('id', 'opphead').attr('class', 'header closed') 
                        .append($('<th>').text(fourspaces + '\u00a0\u00a0' + 'Opponent')
                        )
                )
    $spanspaces = $('<span>').text(fourspaces + fourspaces);
    $spaninput = $('<span>').append($('<input>').attr('id', 'oppsearch').css('width', '80'));
    $str.append(
                $('<tr>').attr('id', 'oppsearchrow').attr('class', 'oppchoice inmenu') 
                        .append($('<td>').append($spanspaces).append($spaninput)
                        )
                )
    $str.append(
                $('<tr>').attr('id', 'oppdef').attr('class', 'oppselected oppchoice selected inmenu menudefault')
                        .append($('<td>').text(fourspaces + fourspaces + 'All')
                                         )
                )
    // opp team 
    $str.append(
                $('<tr>').attr('id', 'oppteamhead').attr('class', 'header closed') 
                        .append($('<th>').text(fourspaces + '\u00a0\u00a0' + 'Opp Team')
                        )
                )
    $spanspaces = $('<span>').text(fourspaces + fourspaces);
    $spaninput = $('<span>').append($('<input>').attr('id', 'oppteamsearch').css('width', '80'));
    $str.append(
                $('<tr>').attr('id', 'oppteamsearchrow').attr('class', 'oppteamchoice inmenu') 
                        .append($('<td>').append($spanspaces).append($spaninput)
                        )
                )
    $str.append(
                $('<tr>').attr('id', 'oppteamdef').attr('class', 'oppteamselected oppteamchoice selected inmenu menudefault')
                        .append($('<td>').text(fourspaces + fourspaces + 'All')
                                         )
                )
    // beginning of h2h menu
    $str.append(
                $('<tr>').attr('id', 'h2hhead').attr('class', 'header closed') 
                        .append($('<th>').text(fourspaces + '\u00a0\u00a0' + 'Head-to-Head')
                        )
                )
    $spanspaces = $('<span>').text(fourspaces + fourspaces);
    $spaninput = $('<span>').append($('<input>').attr('id', 'h2hsearch').css('width', '80'));
    $str.append(
                $('<tr>').attr('id', 'h2hsearchrow').attr('class', 'h2hchoice inmenu') 
                        .append($('<td>').append($spanspaces).append($spaninput)
                        )
                )
    $str.append(
                $('<tr>').attr('id', 'h2hdef').attr('class', 'h2hselected h2hchoice selected inmenu menudefault')
                        .append($('<td>').text(fourspaces + fourspaces + 'All')
                                         )
                )
    // beginning of 'not' menu
    $str.append(
                $('<tr>').attr('id', 'nothead').attr('class', 'header closed') 
                        .append($('<th>').text(fourspaces + '\u00a0\u00a0' + 'Exclude Opp')
                        )
                )
    $spanspaces = $('<span>').text(fourspaces + fourspaces);
    $spaninput = $('<span>').append($('<input>').attr('id', 'notsearch').css('width', '80'));
    $str.append(
                $('<tr>').attr('id', 'notsearchrow').attr('class', 'notchoice inmenu') 
                        .append($('<td>').append($spanspaces).append($spaninput)
                        )
                )
    $str.append(
                $('<tr>').attr('id', 'notdef').attr('class', 'notselected notchoice selected inmenu menudefault')
                        .append($('<td>').text(fourspaces + fourspaces + 'None')
                                         )
                )
    for (j=0; j<filterlist.length; j++) {
        var filter = filterlist[j];
        var ftitle = filteropts[filter][0];
        var fhead = filter + 'head', fchoice = filter + 'choice', fselected = filter + 'selected';
        $str.append(
                    $('<tr>').attr('id', fhead).attr('class', 'header closed') 
                            .append($('<th>').text(fourspaces + '\u00a0\u00a0' + ftitle)
                            )
                    )
        $str.append(
                    $('<tr>').attr('id', filter + 'def').attr('class', fselected + ' ' + fchoice + ' selected inmenu menudefault')
                            .append($('<td>').text(fourspaces + fourspaces + filteropts[filter][1])
                                             )
                    )
        var flist = filteropts[filter].slice(2);
        for (i=0; i<flist.length; i++) {
            var $ent = $('<tr>').attr('class', 'inmenu ' + fchoice)
                                .append($('<td>').text(fourspaces + fourspaces + flist[i].replace(/ /g, '\u00a0'))
                                                 );
            if (filter in alphaFilters) {
                var adjtext = flist[i].replace(/ /g, '_');
                adjtext = adjtext.replace("'", 'xx');
                adjtext = adjtext.replace("+", 'xpx');
                $ent.attr('id', filter+adjtext+'qq');
                }
            else {$ent.attr('id', filter + i);}
            $str.append($ent);
            }
        //attempt at custom date ranges
        if (filter == 'span' || filter == 'rank') {
            if (filter == 'span' && (typeof tdates === 'undefined')) {}
            else if (filter == 'rank' && (typeof vranks === 'undefined')) {}
            else {
                var $ent = $('<tr>').attr('class', 'inmenu '+filter+'choice')
                                .append($('<td>').text(fourspaces + fourspaces + 'Custom')
                                                 );
                $ent.attr('id', filter+'Customqq');
                $str.append($ent);  
                }        
            }
        }
    $str.append($('<tr>').append($('<th>').append($('<span>').attr('class', 'menureset likelink').text('Reset'))))
    $str.append($('<tr>').append($('<td>').append($('<span>').html('&nbsp;'))))
    var filternote = '<i>Tip: Ctrl-Click to select multiple choices from the same menu.</i>'
    $str.append($('<tr>').append($('<td>').append($('<span>').html(filternote))))
    $('#footer').append($str);
    
    $("#h2hhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".h2hchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        if (choiceid != 'h2hsearchrow') {choiceClick(choiceid, 'h2h', ctrl);}
        });
    $("#nothead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".notchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        if (choiceid != 'notsearchrow') {choiceClick(choiceid, 'not', ctrl);}
        });
    $("#partnerhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".partnerchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        if (choiceid != 'partnersearchrow') {choiceClick(choiceid, 'partner', ctrl);}
        });
    $("#opphead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".oppchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        if (choiceid != 'oppsearchrow') {choiceClick(choiceid, 'opp', ctrl);}
        });
    $("#oppteamhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".oppteamchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        if (choiceid != 'oppteamsearchrow') {choiceClick(choiceid, 'oppteam', ctrl);}
        });
    $("#spanhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });       
    $(".spanchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'span', ctrl);
        });
    
    $("#surfacehead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".surfacechoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'surface', ctrl);
        });
    $("#levelhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".levelchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'level', ctrl);
        });
    $("#tourneyhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".tourneychoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'tourney', ctrl);
        });
    $("#roundhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".roundchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'round', ctrl);
        });
    $("#entryhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".entrychoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'entry', ctrl);
        });
    $("#rankhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".rankchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'rank', ctrl);
        });
    $("#oentryhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".oentrychoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'oentry', ctrl);
        });
    $("#handhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".handchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'hand', ctrl);
        });
    $("#handshead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".handschoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'hands', ctrl);
        });
    $("#agehead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".agechoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'age', ctrl);
        });
    $("#heighthead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".heightchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'height', ctrl);
        });
    $("#countryhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".countrychoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'country', ctrl);
        });
    $("#resultshead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".resultschoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'results', ctrl);
        });
    $("#setshead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".setschoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'sets', ctrl);
        });
    $("#scoreshead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".scoreschoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'scores', ctrl);
        });
    $("#asrankhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".asrankchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'asrank', ctrl);
        });
    $("#statshead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $("#statsdef").click(function (event) { // if creating custom stat filters to later click again, need to change this to match other filters: .statschoice
        if (event.ctrlKey) {var ctrl=1;} // probably disable
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'stats', ctrl);
        });
    $("#extrashead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".extraschoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'extras', ctrl);
        });
    $("#minimumhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".minimumchoice").click(function (event) {
        //if (event.ctrlKey) {var ctrl=1;}
        //else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'minimum', 0); // only allow one selection
        }); 
    $("#minyearshead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".minyearschoice").click(function (event) {
        //if (event.ctrlKey) {var ctrl=1;}
        //else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'minyears', 0); // only allow one selection
        });         
    $("#crankhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".crankchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'crank', ctrl); // only allow one selection
        });  
    $("#prankhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".prankchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'prank', ctrl); // only allow one selection
        }); 
    $("#phandhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".phandchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'phand', ctrl); // only allow one selection
        });               
    $("#spanCustomqq").click(function (event) {
        $("#spanstartrow").remove();
        // smarter way -- check if it exists, then build if not?
        var $s = $('<select />').attr('id', 'spanstart');
        $('<option />', {value: 'default', text: 'Start'}).appendTo($s);
        for (i=0; i<tdates.length; i++) {
            var showdate = tdates[i].slice(6) + '-' + months[tdates[i].slice(4,6)] + '-' + tdates[i].slice(0,4);
            $('<option />', {value: tdates[i], text: showdate}).appendTo($s);
            }
        $sspan = $('<span>').text(fourspaces + fourspaces);
        $std = $('<td>').append($sspan).append($s)
        $startrow = $('<tr>').attr('class', 'inmenu spanchoice').attr('id', 'spanstartrow').append($std);                                                     
        $("#spanCustomqq").after($startrow);
        $startrow.toggle();
        $('#spanstart').change(function() {
            $("#spanendrow").remove();
            startdate = $("#spanstart option:selected").val();
            var $t = $('<select />').attr('id', 'spanend');
            $('<option />', {value: 'default', text: 'End'}).appendTo($t);
            for (i=0; i<tdates.length; i++) {
                if (tdates[i] < startdate) {}
                else {
                    var showdate = tdates[i].slice(6) + '-' + months[tdates[i].slice(4,6)] + '-' + tdates[i].slice(0,4);
                    $('<option />', {value: tdates[i], text: showdate}).appendTo($t);
                    }
                }
            $espan = $('<span>').text(fourspaces + fourspaces);
            $etd = $('<td>').append($espan).append($t)    
            $endrow = $('<tr>').attr('class', 'inmenu spanchoice').attr('id', 'spanendrow').append($etd);
            $("#spanstartrow").after($endrow);
            $endrow.toggle();  
            $('#spanend').change(function() {
                //alert('end is changed');
                enddate = $("#spanend option:selected").val();
                makeMatchTable({}, 0);
                });      
            });
        });
    $("#rankCustomqq").click(function (event) {
        $("#rankstartrow").remove();
        // smarter way -- check if it exists, then build if not?
        var $s = $('<select />').attr('id', 'rankstart');
        $('<option />', {value: 'default', text: 'Max'}).appendTo($s);
        for (i=0; i<vranks.length; i++) {
            $('<option />', {value: vranks[i], text: vranks[i]}).appendTo($s);
            }
        $srank = $('<rank>').text(fourspaces + fourspaces);
        $srd = $('<td>').append($srank).append($s)
        $lowrow = $('<tr>').attr('class', 'inmenu rankchoice').attr('id', 'rankstartrow').append($srd);                                                     
        $("#rankCustomqq").after($lowrow);
        $lowrow.toggle();
        $('#rankstart').change(function() {
            $("#rankendrow").remove();
            lowrank = parseInt($("#rankstart option:selected").val());
            var $t = $('<select />').attr('id', 'rankend');
            $('<option />', {value: 'default', text: 'Min'}).appendTo($t);
            for (i=0; i<vranks.length; i++) {
                if (parseInt(vranks[i]) < lowrank) {}
                else {
                    $('<option />', {value: vranks[i], text: vranks[i]}).appendTo($t);
                    }
                }
            $erank = $('<rank>').text(fourspaces + fourspaces);
            $erd = $('<td>').append($erank).append($t)    
            $highrow = $('<tr>').attr('class', 'inmenu rankchoice').attr('id', 'rankendrow').append($erd);
            $("#rankstartrow").after($highrow);
            $highrow.toggle();  
            $('#rankend').change(function() {
                //alert('end is changed');
                highrank = parseInt($("#rankend option:selected").val());
                makeMatchTable({}, 0);
                });      
            });
        });
    $(".menureset").click(function () {
        resetFilters();
        // close open menus?
        makeMatchTable({}, 1);
        });
        
    var h2hsearchbox = "Add H2H";		
    $("#h2hsearch").val(h2hsearchbox);
    $("#h2hsearch").focus(function() {
        if ($(this).val() != '') {$(this).val("");}
        $( "#h2hsearch" ).autocomplete({
                source: ochoices,
                minLength: 2,
                select: function(e, ui) {setPlayerFilter(ui.item.value, 1, 0);}
            }) 
        });
    var notsearchbox = "Add NOT";		
    $("#notsearch").val(notsearchbox);
    $("#notsearch").focus(function() {
        if ($(this).val() != '') {$(this).val("");}
        $( "#notsearch" ).autocomplete({
                source: ochoices,
                minLength: 2,
                select: function(e, ui) {setNotPlayerFilter(ui.item.value, 1);}
            }) 
        });
    var partnersearchbox = "Add Partner";		
    $("#partnersearch").val(partnersearchbox);
    $("#partnersearch").focus(function() {
        if ($(this).val() != '') {$(this).val("");}
        $( "#partnersearch" ).autocomplete({
                source: pchoices,
                minLength: 2,
                select: function(e, ui) {setPartnerFilter(ui.item.value, 1, 0);}
            }) 
        });
    var oppsearchbox = "Add Opponent";		
    $("#oppsearch").val(oppsearchbox);
    $("#oppsearch").focus(function() {
        if ($(this).val() != '') {$(this).val("");}
        $( "#oppsearch" ).autocomplete({
                source: ochoices_dubs,
                minLength: 2,
                select: function(e, ui) {setOpponentFilter(ui.item.value, 1, 0);}
            }) 
        });
    var oppteamsearchbox = "Add Opp Team";		
    $("#oppteamsearch").val(oppteamsearchbox);
    $("#oppteamsearch").focus(function() {
        if ($(this).val() != '') {$(this).val("");}
        $( "#oppteamsearch" ).autocomplete({
                source: otchoices,
                minLength: 2,
                select: function(e, ui) {setOppteamFilter(ui.item.value, 1, 0);}
            }) 
        });
        
    var $s = $('<select />').attr('id', 'statcustomname');
    $('<option />', {value: 'default', text: 'Stat'}).appendTo($s);
    for (i=0; i<statlist.length; i++) {
        $('<option />', {value: statlist[i], text: statlist[i]}).appendTo($s);
        }
    $sspan = $('<span>').text(fourspaces + fourspaces);
    $std = $('<td>').append($sspan).append($s)
    $startrow = $('<tr>').attr('class', 'inmenu statschoice').attr('id', 'stats0').append($std);                                                     
    $('#statsdef').after($startrow);
    $('#statcustomname').change(function() {
        $("#stats0").addClass("selected").addClass("statsselected");
        $("#statsdef").removeClass("selected").removeClass("statsselected");        
        $("#statoperatorrow").remove();
        $("#statinputrow").remove();
        $("#statbuttonrow").remove(); 
        statchoice = $("#statcustomname option:selected").val();
        var $t = $('<select />').attr('id', 'statoperator');
        $('<option />', {value: 'default', text: 'Operator'}).appendTo($t);
        $('<option />', {value: 'ge', text: '>= at least'}).appendTo($t);
        $('<option />', {value: 'le', text: '<= up to'}).appendTo($t);
        $('<option />', {value: 'gt', text: '> more than'}).appendTo($t);
        $('<option />', {value: 'lt', text: '< less than'}).appendTo($t);
        $('<option />', {value: 'eq', text: '= equal to'}).appendTo($t);
        $espan = $('<span>').text(fourspaces + fourspaces);
        $etd = $('<td>').append($espan).append($t)    
        $endrow = $('<tr>').attr('class', 'inmenu statschoice').attr('id', 'statoperatorrow').append($etd);
        $("#stats0").after($endrow);
        $endrow.toggle();  
        $('#statoperatorrow').change(function() {
            $("#statinputrow").remove();
            $("#statbuttonrow").remove();
            statoperatorchoice = $("#statoperator option:selected").val();
            // text box for manual entry
            var $v = $('<input />').attr('type', 'text').attr('id', 'statinputbox').attr('value', '').attr('style', "width:50px;"); 
            $ispan = $('<span>').text(fourspaces + fourspaces);
            if (statchoice in statpercs) {
                $perc = $('<span>').text(' %');
                $itd = $('<td>').append($ispan).append($v).append($perc);
                }
            else if (statchoice == 'Time') {
                $timeEx = $('<span>').text(' (h:mm)');
                $itd = $('<td>').append($ispan).append($v).append($timeEx);
                }           
            else {$itd = $('<td>').append($ispan).append($v);}
            $inputrow = $('<tr>').attr('class', 'inmenu statschoice').attr('id', 'statinputrow').append($itd);
            $("#statoperatorrow").after($inputrow);
            $inputrow.toggle();                     
            // button 'apply'
            var $w = $('<input />').attr('type', 'submit').attr('value', 'Apply').attr('style', "width:50px;").attr('id', 'statapply');
            $bspan = $('<span>').text(fourspaces + fourspaces);
            $btd = $('<td>').append($bspan).append($w);
            $buttonrow = $('<tr>').attr('class', 'inmenu statschoice').attr('id', 'statbuttonrow').append($btd);
            $("#statinputrow").after($buttonrow);
            $buttonrow.toggle(); 
            $("#statapply").click(function (event) {
                statinput = $("#statinputbox").val();
                if (statchoice == 'Time') {
                    var hm = statinput.split(':');
                    // probably need some error handling for user input, esp e.g. :50 without hour number
                    statinput = parseInt(hm[0])*60 + parseInt(hm[1]);
                    }  
                makeMatchTable({}, 0);             
                });
            });
        });
    }

var alphaFilters = {'country': '', 'tourney': '', 'span': '', 'rank': ''};
//var alphaFilters = {};

var bhdict = {'1': 'one', '2': 'two'};

function insertPictureBio() {
    var plname = '<span style="fontsize:24px"><b>' + fullname + ' [' + country + ']</b></span>';
    if (typeof dob === 'undefined') {var birthdate = '';}
    else {
        var bd = dob.toString();
        var birthdate = 'Date of birth: ' + bd.slice(6) + '-' + months[bd.slice(4, 6)] + '-' + bd.slice(0, 4);
        }

    var pic_src = 'https://www.tennisabstract.com/photos/' + fullname.toLowerCase().replace(/ /g, "_") + '-' + photog + '.jpg'
    // background-color:d3d3d3; 
    var biotable = '<p id="biog"><table style="border-spacing:0"><tr><td><img src="' + pic_src + '" height="225" width="150"></td>'
    biotable = biotable + '<td>&nbsp;&nbsp;</td><td style="vertical-align:top">'
    biotable = biotable + '<table cellpadding=2 cellspacing=1><tr><td>' + plname + fourspaces + fourspaces + '</td></tr>';  

    if (typeof twitter != 'undefined' && twitter != "") {
        var tline = '<a href="https://twitter.com/' + twitter + '" target="_blank">@' + twitter + '</a>';
        biotable = biotable + '<tr><td>' + tline + '</td></tr>';
        }
    else {
        biotable = biotable + '<tr><td>&nbsp;</td></tr>'; 
        }

    biotable = biotable + '<tr><td>' + birthdate + '</td></tr>';
    var handed;
    if (hand == 'R') {handed = 'Plays: Right-handed';}
    else if (hand == 'L') {handed = 'Plays: Left-handed';}
    else {handed = '';}
    if (typeof backhand != 'undefined' && backhand != '') {handed = handed.slice(0,-7) + ' (' + bhdict[backhand] + '-handed backhand)';}
    if (handed != '') {
        biotable = biotable + '<tr><td>' + handed + '</td></tr>'; 
        }

    if (currentrank == '') {var crank = '';}
    else {var crank = 'Current rank: <b>'+currentrank.toString()+'</b>'}; 
    //if (typeof liverank != 'undefined' && liverank != '') {var lrank = '&nbsp;&nbsp;&nbsp;<a target="_blank" href="https://live-tennis.eu/"><i>Live: ' + liverank.toString() + '</i></a>';}
    //else {var lrank = '';} 
    var lrank = '';
    if (crank != '') {
        biotable = biotable + '<tr><td>' + crank + lrank + '</td></tr>'; 
        }  

    if (peakrank != 'UNR') {var prank = 'Peak rank: <b>' + peakrank.toString()+'</b>';}
    else {var prank = '';}
    if (peakfirst != '') {
    	var pf = peakfirst.toString();
    	prank = prank + ' (' + pf.slice(6) + '-' + months[pf.slice(4, 6)] + '-' + pf.slice(0, 4) + ')';
    	}
    if (prank != '') {
        biotable = biotable + '<tr><td>' + prank + '</td></tr>'; 
        } 
        
    // if (typeof current_dubs === 'undefined' || current_dubs == "" || current_dubs == "UNR") {
    //     if (!(typeof peak_dubs === 'undefined' || peak_dubs == "")) {
    //         var drank = "Doubles peak: <b>" + peak_dubs.toString() + '</b>'
    //         var pfd = peakfirst_dubs.toString();
    //         drank = drank + ' (' + pfd.slice(6) + '-' + months[pfd.slice(4, 6)] + '-' + pfd.slice(0, 4) + ')';
    //         }
    //     else {drank = "&nbsp;";}
    //     }
    // else {
    //     var drank = "Doubles rank: <b>" + current_dubs.toString() + '</b>&nbsp;|&nbsp;';
    //     drank = drank + 'Peak: <b>' + peak_dubs.toString() + '</b>'
    //     }
    var drank = "&nbsp;";
    biotable = biotable + '<tr><td>' + drank + '</td></tr>'; 
        
    var profiles = '';
    // if (typeof atp_id != 'undefined' && atp_id != "") {
    //     var atp_stem = "https://www.atpworldtour.com/en/players/";
    //     profiles = profiles + '<a href="' + atp_stem + atp_id + '/overview" target="_blank" title="Profile at atpworldtour.com">ATP</a> | ';
    //     }   
    // if (typeof itf_id != 'undefined' && itf_id != "") {
    //     var itf_stem = "https://www.itftennis.com/procircuit/players/player/profile.aspx?playerid=";
    //     profiles = profiles + '<a href="' + itf_stem + itf_id + '" target="_blank" title="Profile at the ITF website">ITF</a> | ';
    //     }
    // if (typeof dc_id != 'undefined' && dc_id != "") {
    //     var dc_stem = "https://www.daviscup.com/en/players/player.aspx?id=";
    //     profiles = profiles + '<a href="' + dc_stem + dc_id + '" target="_blank" title="Profile at Davis Cup website">DC</a> | ';
    //     }
    if (typeof wiki_id != 'undefined' && wiki_id != "") {
        var wiki_stem = "https://en.wikipedia.org/wiki/";
        profiles = profiles + '<a href="' + wiki_stem + wiki_id + '" target="_blank" title="Profile at Wikipedia">Wikipedia</a> | '  ;
        }
        
    if (profiles != '') {
        biotable = biotable + '<tr><td>Profile: ' + profiles.slice(0,-3) + '</td><td>&nbsp;</td></tr>';
        } 
    else {
        biotable = biotable + '<tr><td>&nbsp;</td></tr>'; 
        } 

    // if picture (and maybe in general) need to move ranking history link and titles/finals out of this box
    //var rhlink = '<a href="https://tennisabstract.herokuapp.com/ATP/RankHistory/' + fullname.replace(/ /g, "_") + '/YearEndDate/Points/">Ranking history and highlights</a>';
    var titlelink = '<span id="titleclick" class="likelink">Titles/Finals</span>';
    //biotable = biotable + '<tr><td>' + rhlink + '</td></tr><tr><td>' + titlelink + '</td></tr>';
    biotable = biotable + '<tr><td>' + titlelink + '</td></tr>';

    biotable = biotable + '<tr><td>' + '<i>Photo: <a target="_blank" href="' + photog_link + '">' + photog_credit + '</a></i></td></tr>';

    $("#bio").html(biotable + '</table></td><td>&nbsp;&nbsp;</td></tr></table></p>');
    }

function insertBio() {
    var plname = '<span style="fontsize:24px"><b>' + fullname + ' [' + country + ']</b></span>';
    if (typeof dob === 'undefined') {var birthdate = '';}
    else {
        var bd = dob.toString();
        var birthdate = 'Date of birth: ' + bd.slice(6) + '-' + months[bd.slice(4, 6)] + '-' + bd.slice(0, 4);
        }
    var handed;
    if (hand == 'R') {handed = 'Plays: Right-handed';}
    else if (hand == 'L') {handed = 'Plays: Left-handed';}
    else {handed = '';}
    if (typeof backhand != 'undefined' && backhand != '') {handed = handed.slice(0,-7) + ' (' + bhdict[backhand] + '-handed backhand)';}
    if (currentrank == '') {var crank = '';}
    else {var crank = 'Current rank: <b>'+currentrank.toString()+'</b>'}; 
    // if (typeof liverank != 'undefined' && liverank != '') {var lrank = '&nbsp;&nbsp;&nbsp;<a target="_blank" href="https://live-tennis.eu/"><i>Live: ' + liverank.toString() + '</i></a>';}
    // else {var lrank = '';}
    var lrank = '';
    if (peakrank != 'UNR') {var prank = 'Peak rank: <b>' + peakrank.toString()+'</b>';}
    else {var prank = '';}
    if (peakfirst != '') {
    	var pf = peakfirst.toString();
    	prank = prank + ' (' + pf.slice(6) + '-' + months[pf.slice(4, 6)] + '-' + pf.slice(0, 4) + ')';
    	}
    //if (typeof twitter != 'undefined' && twitter != "") {var tline = 'Twitter: <a href="https://twitter.com/' + twitter + '" target="_blank">@' + twitter + '</a>';}
    if (typeof twitter != 'undefined' && twitter != "") {var tline = '<a href="https://twitter.com/' + twitter + '" target="_blank">@' + twitter + '</a>';}
    else {var tline = '';}
    var biotable = '<p id="biog"><table cellpadding=1 cellspacing=1><tr><td>' + plname + fourspaces + fourspaces + '</td><td>' + tline + '</td></tr>';
    if (birthdate != '') {var rowtwo = '<tr><td>' + birthdate + fourspaces + fourspaces + '</td><td>' + handed + '</td></tr>';}
    else {var rowtwo = '<tr><td>' + handed + '</td><td>&nbsp;</td></tr>';}
    if (crank != '') {var rowthree = '<tr><td>' + crank + lrank + '</td><td>' + prank + '</td></tr>';}
    else {var rowthree = '<tr><td>' + prank + '</td><td>&nbsp;</td></tr>';}
    
    var profiles = '';
    // if (typeof atp_id != 'undefined' && atp_id != "") {
    //     var atp_stem = "https://www.atpworldtour.com/en/players/";
    //     profiles = profiles + '<a href="' + atp_stem + atp_id + '/overview" target="_blank" title="Profile at atpworldtour.com">ATP</a> | ';
    //     }   
    // if (typeof itf_id != 'undefined' && itf_id != "") {
    //     var itf_stem = "https://www.itftennis.com/procircuit/players/player/profile.aspx?playerid=";
    //     profiles = profiles + '<a href="' + itf_stem + itf_id + '" target="_blank" title="Profile at the ITF website">ITF</a> | ';
    //     }
    // if (typeof dc_id != 'undefined' && dc_id != "") {
    //     var dc_stem = "https://www.daviscup.com/en/players/player.aspx?id=";
    //     profiles = profiles + '<a href="' + dc_stem + dc_id + '" target="_blank" title="Profile at Davis Cup website">DC</a> | ';
    //     }
    if (typeof wiki_id != 'undefined' && wiki_id != "") {
        var wiki_stem = "https://en.wikipedia.org/wiki/";
        profiles = profiles + '<a href="' + wiki_stem + wiki_id + '" target="_blank" title="Profile at Wikipedia">Wikipedia</a> | '  ;
        }
        
    if (profiles != '') {
        var profile_row = '<tr><td>Profile: ' + profiles.slice(0,-3) + '</td><td>&nbsp;</td></tr>';
        } 
    else {var profile_row = '';}      

    var rhlink = '&nbsp;' // '<a href="https://tennisabstract.herokuapp.com/ATP/RankHistory/' + fullname.replace(/ /g, "_") + '/YearEndDate/Points/">Ranking history and highlights</a>';
    var titlelink = '<span id="titleclick" class="likelink">Titles/Finals</span>'
    var rowfour =  '<tr><td>' + titlelink + '</td><td>' + rhlink + '</td></tr>'; 
    $("#bio").html(biotable + rowtwo + rowthree + profile_row + rowfour + '</table></p>');
    }

function choiceClick(choiceid, filt, ctrl) {
    //var menudef = 0;
    // if click is on default -- shift doesn't matter, presets don't matter; select default and deselect others
    // (possible exception of 'span' menu?
    if (choiceid.slice(-3) == 'def') {
        $("." + filt + "choice").removeClass("selected").removeClass(filt + "selected");
        $('#' + choiceid).addClass("selected").addClass(filt + "selected");
        }
    // if click on choice that is already selected [shift doesn't matter]
    else if ($('#' + choiceid).hasClass('selected')) {
        // - if it's the only one, go back to default
        if ($('.' + filt + 'selected').length == 1) {
            $('#' + filt + 'def').addClass("selected").addClass(filt + "selected");
            }
        $('#' + choiceid).removeClass("selected").removeClass(filt + "selected");
        }
    // if choice not already selected, and shift, then select new choice
    else if (ctrl == 1) {
        $('#' + choiceid).addClass("selected").addClass(filt + "selected");
        }
    // choice not already selected, not shift: take away all, make this selection
    else {
        $("." + filt + "choice").removeClass("selected").removeClass(filt + "selected");
        $('#' + choiceid).addClass("selected").addClass(filt + "selected");
        }
    if (choiceid.slice(-8) == 'Customqq') {return;}
    makeMatchTable({}, 0);
    }

function setPlayerFilter(player, make, defSort) {
    $('.h2hchoice').removeClass('selected').removeClass('h2hselected');
    var playerid = '#' + 'h2h' + player.replace(/ /g, '');
    if ($(playerid).length == 0) { // new player to the list
        $newcell = $('<td>').text(fourspaces + fourspaces + player.replace(/ /g, '\u00a0'));
        $newrow = $('<tr>').attr('class', 'h2hselected h2hchoice selected inmenu').attr('id', playerid.slice(1));
        $newrow.append($newcell);
        $('#nothead').before($newrow);
        if ($('#h2hhead').hasClass('open')) {$newrow.toggle();}
        $(playerid).click(function () {
            //var choiceid = $(this).attr('id')
            if (event.ctrlKey) {var ctrl=1;}
            else {var ctrl=0;}
            choiceClick(playerid.slice(1), 'h2h', ctrl);
            });
        }
    else {$(playerid).addClass('selected').addClass('h2hselected');}
    //set time span to career
    if (make==1) {makeMatchTable({}, defSort);}
    }
    
function setPartnerFilter(player, make, defSort) {
    $('.partnerchoice').removeClass('selected').removeClass('partnerselected');
    var playerid = '#' + 'partner' + player.replace(/ /g, '');
    if ($(playerid).length == 0) { // new player to the list
        $newcell = $('<td>').text(fourspaces + fourspaces + player.replace(/ /g, '\u00a0'));
        $newrow = $('<tr>').attr('class', 'partnerselected partnerchoice selected inmenu').attr('id', playerid.slice(1));
        $newrow.append($newcell);
        $('#opphead').before($newrow);
        if ($('#partnerhead').hasClass('open')) {$newrow.toggle();}
        $(playerid).click(function () {
            //var choiceid = $(this).attr('id')
            if (event.ctrlKey) {var ctrl=1;}
            else {var ctrl=0;}
            choiceClick(playerid.slice(1), 'partner', ctrl);
            });
        }
    else {$(playerid).addClass('selected').addClass('partnerselected');}
    //set time span to career
    if (make==1) {makeMatchTable({}, defSort);}
    }
    
function setOpponentFilter(player, make, defSort) {
    $('.oppchoice').removeClass('selected').removeClass('oppselected');
    var playerid = '#' + 'opp' + player.replace(/ /g, '');
    if ($(playerid).length == 0) { // new player to the list
        $newcell = $('<td>').text(fourspaces + fourspaces + player.replace(/ /g, '\u00a0'));
        $newrow = $('<tr>').attr('class', 'oppselected oppchoice selected inmenu').attr('id', playerid.slice(1));
        $newrow.append($newcell);
        $('#oppteamhead').before($newrow);
        if ($('#opphead').hasClass('open')) {$newrow.toggle();}
        $(playerid).click(function () {
            //var choiceid = $(this).attr('id')
            if (event.ctrlKey) {var ctrl=1;}
            else {var ctrl=0;}
            choiceClick(playerid.slice(1), 'opp', ctrl);
            });
        }
    else {$(playerid).addClass('selected').addClass('oppselected');}
    //set time span to career
    if (make==1) {makeMatchTable({}, defSort);}
    }
    
function setOppteamFilter(player, make, defSort) {
    $('.oppteamchoice').removeClass('selected').removeClass('oppteamselected');
    var playerid = '#' + 'oppteam' + player.replace(/ /g, '');
    if ($(playerid).length == 0) { // new player to the list
        var slash_replace = '/<br/>' + fourspaces + "&nbsp;" + fourspaces
        $newcell = $('<td>').html(fourspaces + fourspaces + player.replace(/ /g, '\u00a0').replace('/', slash_replace));
        $newrow = $('<tr>').attr('class', 'oppteamselected oppteamchoice selected inmenu').attr('id', playerid.slice(1));
        $newrow.append($newcell);
        $('#spanhead').before($newrow);
        if ($('#oppteamhead').hasClass('open')) {$newrow.toggle();}
        $(playerid).click(function () {
            //var choiceid = $(this).attr('id')
            if (event.ctrlKey) {var ctrl=1;}
            else {var ctrl=0;}
            choiceClick(playerid.slice(1), 'oppteam', ctrl);
            });
        }
    else {$(playerid).addClass('selected').addClass('oppteamselected');}
    //set time span to career
    if (make==1) {makeMatchTable({}, defSort);}
    }

function setNotPlayerFilter(player, make) {
    $('.notchoice').removeClass('selected').removeClass('notselected');
    var playerid = '#' + 'not' + player.replace(/ /g, '');
    if ($(playerid).length == 0) { // new player to the list
        $newcell = $('<td>').text(fourspaces + fourspaces + player.replace(/ /g, '\u00a0'));
        $newrow = $('<tr>').attr('class', 'notselected notchoice selected inmenu').attr('id', playerid.slice(1));
        $newrow.append($newcell);
        $('#spanhead').before($newrow);
        if ($('#nothead').hasClass('open')) {$newrow.toggle();}
        $(playerid).click(function () {
            //var choiceid = $(this).attr('id')
            if (event.ctrlKey) {var ctrl=1;}
            else {var ctrl=0;}
            choiceClick(playerid.slice(1), 'not', ctrl);
            });
        }
    else {$(playerid).addClass('selected').addClass('notselected');}
    //set time span to career
    if (make==1) {makeMatchTable({}, 0);}
    }

function fHeaderClick(choiceid) {
    var filt = choiceid.slice(0, -4);
    $("." + filt + "choice").toggle();
    if ($("#" + filt + "head").hasClass("closed")) {$("#" + filt + "head").removeClass("closed").addClass("open");}
    else {$("#" + filt + "head").removeClass("open").addClass("closed");}
    if ($("." + filt + "choice").is(':visible') == false && $("#" + filt + "def").hasClass("selected") == false) {
        // check if default is selected
        $("#" + filt + "head").addClass("selected");
        }
    else {$("#" + filt + "head").removeClass("selected");}
    }
    
var defParams = ''    
window.onpopstate = function (event) {
    if (event.state == null) {
        var prefs = 0;
        for (pf in prefilters) {prefs += 1;}
        if (prefs == 0) {newPrefilters(defParams);}
        }
    else if (event.state.new_text.indexOf('.cgi') != -1) {
        newPrefilters(defParams);
        }
    else {
        //alert('event state '+event.state.slug);
        newPrefilters(event.state.new_text);
        new_text = event.state.new_text;
        }
    };
    
var startdate = '', enddate = '';
var lowrank = '', highrank = '';
var statchoice = '', statoperatorchoice = '', statinput = '';
var statlist = ['Dom Ratio', 'Ace Perc', 'DF Perc', '1st In', '1st WPc', '2nd WPc', 'BP Svd Pc', 'BP Saved', 'BPC Faced',
                    'Time', 'TPW', 'RPW', 'vAce Pc', 'v1st WPc', 'v2nd WPc', 'BP Cnv Pc', 'BP Conv', 'BP Chncs', 'Tot Pts',
                    'Aces', 'DFs', 'Sv Pts', '1Sv Pts', '2Sv Pts', 'vAces'];
var statpercs = {'Ace Perc': 1, 'DF Perc': 1, '1st In': 1, '1st WPc': 1, '2nd WPc': 1, 'BP Svd Pc': 1, 
                     'TPW': 1, 'RPW': 1, 'vAce Pc': 1, 'v1st WPc': 1, 'v2nd WPc': 1, 'BP Cnv Pc': 1}

$(document).ready(function() { 

    if (typeof navbar !== 'undefined') {
        $("#navbar").html(navbar);
        } 

    //var pparams = getPermalinkParams();
    var thisurl = window.location.href
    if (thisurl.indexOf('&') == -1) {var pparams = '';}
    else {var pparams = thisurl.slice(thisurl.indexOf('&')).replace("&f=", "");}
    //else {var pparams = '';}
    if (typeof(history.replaceState) !== "undefined") {
        history.replaceState({
           //old_text: old_text.val(),
           new_text: pparams,
           slug: location.pathname.replace("/", "")
        }, null, null);
    }

    if (typeof photog == 'undefined' || photog == '') {
        insertBio();
        }
    else {
        insertPictureBio();
        }

    // add chart agg link to span id="shotsHere"
    if (typeof chartagg != 'undefined' && chartagg == 1) {
        $ca_span = $('<span />').addClass('tablink').addClass('tabview');
        $ca_span.css('background-color', '#e6EEEE').css('position', 'relative').css('top', '5px');
        var ca_link = 'https://www.tennisabstract.com/charting/' + fullname.replace(/ /g, '') + '.html'
        var ihtml = '&nbsp;<b><a href="' + ca_link + '" target="_blank" style="text-decoration:none">Shot-by-Shot Stats</a></b>&nbsp;';
        $ca_span.html(ihtml);
        $("#shotsHere").append($ca_span);
        // $('<br />').insertBefore($ca_span);
        }
   
    // if (typeof playernews === 'undefined') {var pnewsrows = '';} //|| playernews == ''
    // else if (playernews == '') {var pnewsrows = '';}
    // else {
    //     var pnewsrows = '';
    //     for (j=0; j<playernews.length; j++) {
    //         pnewsrows = pnewsrows + '<br/>' + playernews[j];
    //         }
    //     if (playernews.length > 0) {pnewsrows = pnewsrows + '<br/>&nbsp;';}
    //     }

    // if (typeof upcoming === 'undefined') {var upcomingrow = '';}
    // else if (upcoming == '') {var upcomingrow = '';}
    // else {
    //     if (month < 10) {var udate = day + ' ' + months['0'+month+''];}
    //     else {var udate = day + ' ' + months[month+''];}
    //     var upcomingrow = '<br/><b>' + udate + '</b> Upcoming Tournaments: ' + upcoming;} // add date dynamically
    //     //if (pnewsrows == '') {pnewsrows = '<br/>&nbsp;';}
    // if (pnewsrows == '' && upcomingrow == '') {} //  && upcomingrow == ''
    // else {
    //     var newsanalysis = '<span style="background-color:#e6EEEE;"><b>News and Analysis</b></span>'
    //     var yourlinkhere = '<i><a href="https://tennisabstract.com/main/sitesubmit.html">your link here?</a></i>'
    //     var pnews = '&nbsp;<br/>' + newsanalysis + fourspaces + yourlinkhere + upcomingrow + pnewsrows; // upcomingrow + pnewsrows;
    //     $("#playernews").html(pnews);
    //     }
    
    if (typeof careerjs_dubs === 'undefined') {  
        // in case doubles data didn't load / doesn't exist  
        $("#tabDubs").hide();
        $("#tabDubsSpacer").hide();
        careerjs_dubs = 0;
        view = "";
        }        
    else if (view == "") {  // check ranks / peak ranks to see if should default to dubs view
        if (typeof currentrank === 'undefined' || currentrank == "" || currentrank == "UNR") {currentrank = 3000;}
        if (typeof peakrank === 'undefined' || peakrank == "") {peakrank = 3000;}
        if (typeof current_dubs === 'undefined' || current_dubs == "" || current_dubs == "UNR") {current_dubs = 3000;}
        if (typeof peak_dubs === 'undefined' || peak_dubs == "") {peak_dubs = 3000;}
        if (currentrank <= 50 || peakrank <= 10) {}
        else if (currentrank > (current_dubs * 5)) {view = "doubles";}
        else if (currentrank == "" && peakrank > (peak_dubs * 5)) {view = "doubles";}
        else if (currentrank == 3000 && peakrank > (peak_dubs * 5)) {view = "doubles";}
        // can do this server-side...
        }
    
    if (view == "doubles") {
        makeSplitsTable(doubles=1);
        prefilters['overview'] = 1; // default, show ranks and full names
        filteropts['span'] = ychoices_dubs;
        filteropts['tourney'] = tchoices_dubs;
        filteropts['asrank'] = rchoices_dubs;     
        }
    else {
        makeSplitsTable()
        }
    
//    if (typeof photog != 'undefined' && photog != '') {
//        $(".moresplits").toggle();
//        }
        
    makeMenus();

    applyPrefilters();
    $("#tabHead").click(function () {
        // if switching from doubles, change menus:
        if (!$('#tabDubs').hasClass("tablink")) {
            makeSplitsTable();
            //if (typeof photog != 'undefined' && photog != '') {
            //    $(".moresplits").toggle();
            //    }
            filteropts['span'] = ychoices;
            filteropts['tourney'] = tchoices;
            filteropts['asrank'] = rchoices;
            makeMenus();
            }
        $(".tabview").addClass("tablink");
        $("#tabHead").removeClass("tablink");
        resetFilters();
        if ($("#spanhead").hasClass("closed")) {
            $("#spanhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".spanchoice").toggle();
            }
        $(".spanchoice").removeClass("selected").removeClass('spanselected');
        $("#spanCareerqq").addClass('selected').addClass('spanselected'); 
        // show all filters (heads + choices), then hide minimum
        $(".header").show();
        $("#h2hhead").hide();
        $(".h2hchoice").hide();
        $("#nothead").hide();
        $(".notchoice").hide();
        $("#minyearshead").hide(); 
        $(".minyearschoice").hide();
        $("#partnerhead").hide();
        $(".partnerchoice").hide();
        $("#opphead").hide();
        $(".oppchoice").hide();
        $("#oppteamhead").hide();
        $(".oppteamchoice").hide();
        $("#handshead").hide();
        $(".handschoice").hide(); 
        $("#prankhead").hide();
        $(".prankchoice").hide();
        $("#phandhead").hide();
        $(".phandchoice").hide();
        makeMatchTable({}, 1);
        })
    $("#tabEvents").click(function () {
        // if switching from doubles, change menus:
        if (!$('#tabDubs').hasClass("tablink")) {
            makeSplitsTable();
            filteropts['span'] = ychoices;
            filteropts['tourney'] = tchoices;
            filteropts['asrank'] = rchoices;
            makeMenus();
            }
        $(".tabview").addClass("tablink");
        $("#tabEvents").removeClass("tablink");
        resetFilters();
        if ($("#spanhead").hasClass("closed")) {
            $("#spanhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".spanchoice").toggle();
            }
        $(".spanchoice").removeClass("selected").removeClass('spanselected');
        $("#spanCareerqq").addClass('selected').addClass('spanselected'); 
        // show all filters (heads + choices), then hide minimum
        $(".header").show();
        $("#h2hhead").hide();
        $(".h2hchoice").hide();
        $("#nothead").hide();
        $(".notchoice").hide();
        $("#partnerhead").hide();
        $(".partnerchoice").hide();
        $("#opphead").hide();
        $(".oppchoice").hide();
        $("#oppteamhead").hide();
        $(".oppteamchoice").hide();
        $("#handshead").hide();
        $(".handschoice").hide(); 
        $("#prankhead").hide();
        $(".prankchoice").hide();
        $("#phandhead").hide();
        $(".phandchoice").hide();
        makeMatchTable({}, 1);
        })        
    $("#tabResults").click(function () {
        // if switching from doubles, change menus:
        if (!$('#tabDubs').hasClass("tablink")) {
            makeSplitsTable();
            prefilters['overall'] = 1; // default, show serving stats
            filteropts['span'] = ychoices;
            filteropts['tourney'] = tchoices;
            filteropts['asrank'] = rchoices;
            makeMenus();
            }
        $(".tabview").addClass("tablink");
        $("#tabResults").removeClass("tablink");
        resetFilters();
        if ($("#spanhead").hasClass("closed")) {
            $("#spanhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".spanchoice").toggle();
            }
        $(".spanchoice").removeClass("selected").removeClass('spanselected');
        $("#spandef").addClass('selected').addClass('spanselected'); 
        // show all filters (heads + choices), then hide h2h, not ... more?
        $(".header").show();
        $("#minimumhead").hide(); 
        $(".minimumchoice").hide(); 
        $("#minyearshead").hide(); 
        $(".minyearschoice").hide();  
        $("#partnerhead").hide();
        $(".partnerchoice").hide();
        $("#opphead").hide();
        $(".oppchoice").hide();
        $("#oppteamhead").hide();
        $(".oppteamchoice").hide();
        $("#handshead").hide();
        $(".handschoice").hide();   
        $("#prankhead").hide();
        $(".prankchoice").hide();
        $("#phandhead").hide();
        $(".phandchoice").hide();  
        makeMatchTable({}, 1);
        })          
    $("#tabDubs").click(function () {
        prefilters['overview'] = 1; // default, show ranks and full names
        // switching from singles, so change menus:
        makeSplitsTable(doubles=1);
        filteropts['span'] = ychoices_dubs;
        filteropts['tourney'] = tchoices_dubs;
        filteropts['asrank'] = rchoices_dubs;
        makeMenus();
        $(".tabview").addClass("tablink");
        $("#tabDubs").removeClass("tablink");
        $(".header").show();
        $("#h2hhead").hide();
        $("#nothead").hide(); 
        $("#minimumhead").hide();
        $(".minimumchoice").hide();
        $("#minyearshead").hide();
        $(".minyearschoice").hide();
        $("#crankhead").hide();
        $(".crankchoice").hide();
        $("#handhead").hide();
        $(".handchoice").hide();	
        $("#agehead").hide();
        $(".agechoice").hide();
        $("#heighthead").hide();
        $(".heightchoice").hide();
        $("#countryhead").hide();
        $(".countrychoice").hide();      
        makeMatchTable({}, 1);
        })       
    $(".stattab").click(function () {
        $(".stattab").addClass("likelink");
        $(this).removeClass("likelink");
        makeMatchTable({}, 1);
        })
    $(".revscore").click(function () {
        hidePermalink();
        if ($(".revscore").text() == 'Reverse Loss Scores') {
            $(".revscore").html('Standard Scores');
            makeMatchTable({}, 0);
            }
        else {
            $(".revscore").html('Reverse Loss Scores');
            makeMatchTable({}, 0);
            }
        })
    if (careerjs == 1 && keep_loading == 1) {
        if (view != "doubles" && 'span' in prefilters && (prefilters['span'] != '1' && prefilters['span'] != '2')) {matchmx = matchmx.concat(morematchmx);}  
        else {
            var careerurl = 'https://www.minorleaguesplits.com/tennisabstract/cgi-bin/jsmatches/' + nameparam + 'Career.js';
            $.getScript(careerurl, function() {
                matchmx = matchmx.concat(morematchmx);
                })
            }
        }
    if (careerjs_dubs == 1 && keep_loading == 1) {
        if (view == "doubles" && 'span' in prefilters && (prefilters['span'] != '1' && prefilters['span'] != '2')) {matchmx_dubs = matchmx_dubs.concat(morematchmx_dubs);}  
        else {
            var careerurl = 'https://www.minorleaguesplits.com/tennisabstract/cgi-bin/jsdoubles/' + nameparam + 'Career.js';
            $.getScript(careerurl, function() {
                matchmx_dubs = matchmx_dubs.concat(morematchmx_dubs);
                })
            }
        }
    makeMatchTable({}, 0);
    $.getScript("https://www.tennisabstract.com/jquery.ui.core.js", function() {});
    $.getScript("https://www.tennisabstract.com/jquery.ui.position.js", function() {});
    $.getScript("https://www.tennisabstract.com/jquery.ui.widget.js", function() {});
    $.getScript("https://www.tennisabstract.com/mwplayerlist.js", function() {}); 
    $.getScript("https://www.tennisabstract.com/jquery.ui.autocomplete.js", function() {});    
    $('#playersearch').append($('<input>').attr('id', 'tags'));

    var searchbox = "Player Search";		
    $("#tags").val(searchbox);
    $("#tags").focus(function() {
        if ($(this).val() == searchbox) {$(this).val("");}
        $( "#tags" ).autocomplete({
                source: playerlist,
                minLength: 2,
                select: function(e, ui) {
                    var playerselect = ui.item.value;
                    var player = playerselect.slice(4);
                    var mw = playerselect.slice(1,2);
                    if (mw == 'M') {
                        var playerurl = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + player.replace(/ /g, '');
                        }
                    else {
                        var playerurl = 'https://www.tennisabstract.com/cgi-bin/wplayer.cgi?p=' + player.replace(/ /g, '');
                        }                        
                    window.open(playerurl, "_self");
                    }
            });
        }); 
    })

</script>
</head>
<body>

<div id="header">

<div id="navbar">
</div>

<table width=1240px>
<tr><td>&nbsp;</td><td>&nbsp;</td>
</tr>

<tr>
<td align="left" style="vertical-align:top"><span id="bio">&nbsp;</span>

<span id="tabResults" style="background-color:#e6EEEE;" class="tabview">&nbsp;<b>Singles Results</b>&nbsp;</span>&nbsp;
<span id="tabHead" style="background-color:#e6EEEE;" class="tablink tabview">&nbsp;<b>Head-to-Heads</b>&nbsp;</span>&nbsp;
<span id="tabEvents" style="background-color:#e6EEEE;" class="tablink tabview">&nbsp;<b>Event Records</b>&nbsp;</span>
<br/><span id="tabDubs" style="background-color:#e6EEEE; position:relative; top:5px" class="tablink tabview">&nbsp;<b>Doubles Results</b>&nbsp;</span><span id="tabDubsSpacer">&nbsp;&nbsp;</span>
<span id="shotsHere">
</span>
</td>
<td id="wonloss" align="right" style="vertical-align:top">&nbsp;</td>
</tr>
<tr>
<td id="tabmenu" align="left" style="vertical-align:top">
&nbsp;
</td>
<td>&nbsp;</td>
</tr>
<tr>
<td colspan=2 id="playernews">&nbsp;</td>
</tr>
</tr></table>
</div>

<div id="main">

<table width="1240px" id="maintable">
<tr id="tabletoggles">
<td>&nbsp;</td>
<td id="tablelabel">&nbsp;</td>
<td id="abovestats" class="abovestats" align="right">
&nbsp;&nbsp;&nbsp;<span class="revscore likelink"></span>
&nbsp;&nbsp;&nbsp;<b>Stats:</b>&nbsp;
<span class="statsa stattab">Overview</span><span class="statspacer">&nbsp;|&nbsp;</span><span class="statso stattab">Serve</span>&nbsp;|&nbsp;<span class="statsr stattab likelink">Return</span>&nbsp;|&nbsp;<span class="statsw stattab likelink">Raw</span>
</td></tr>
<tr>
<td id="footer" class="footer">&nbsp;</td>
<td colspan="2" id="stats" class="stats"><table id="matches"></table></td>
</tr>
<tr>
<td id="belowmenus">&nbsp;<br/>&nbsp;<br/>&nbsp;<br/>&nbsp;<br/>&nbsp;</td>
<td colspan="2" id="belowmatches">&nbsp;</td>
</tr>
</table></div>
</div>

</body>

