
<html><head>
<title>Tennis Abstract: Mate Delic Match Results, Splits, and Analysis</title>
<link rel="stylesheet" href="https://www.tennisabstract.com/blue/style.css" type="text/css">
<script type="text/javascript" src="https://www.tennisabstract.com/jquery-1.7.1-min.js"></script>
<script type="text/javascript" src="https://www.tennisabstract.com/jquery.tablesorter.js"></script>
<script type="text/javascript" src="https://www.tennisabstract.com/navbar.js"></script>
<script type="text/javascript" src="https://www.minorleaguesplits.com/tennisabstract/cgi-bin/jsplayers/curr_rank_atp.js"></script>

<script language="JavaScript">
var currentTime = new Date();
var month = currentTime.getMonth() + 1;
var day = currentTime.getDate();
var year = currentTime.getFullYear().toString();
var mm, dd;
if (month < 10) {mm = '0' + month.toString();}
else {mm = month.toString();}
if (day < 10) {dd = '0' + day.toString();}
else {dd = day.toString();}
var today = year + mm + dd;
var one_day=1000*60*60*24;
var nameparam = 'MateDelic';
var prefilters = {};
var opponent="";
var exclude="";
var opp_team="";
var partner="";
var view="";
var keep_loading = 0;
var fullname = 'Mate Delic';
var lastname = 'Delic';
var currentrank = 595;
var peakrank = 150;
var peakfirst = 20150105;
var peaklast = 20150105;
var dob = 19930929;
var ht = '';
var hand = 'R';
var backhand = '2';
var country = 'CRO';
var shortlist = 0;
var careerjs = 0;
var active = 1;
var lastdate = 0;
var twitter = '';
var current_dubs = "UNR";
var peak_dubs = 348;
var peakfirst_dubs = 20131028;
var liverank = "";
var chartagg = 0;
var photog = '';
var photog_credit = '';
var photog_link = '';
var itf_id = '100123996';
var atp_id = 'mate-delic/da89';
var dc_id = '800292963';
var wiki_id = '';
var ychoices=["Time Span", "Last 52", "Career", "2018", "2017", "2016", "2015", "2014", "2013", "2012", "2011", "2010"];
var tchoices=["Event", "All", "Australian Open", "Roland Garros", "US Open", "Wimbledon", "Bergamo CH", "Bratislava CH", "Brescia CH", "Caltanissetta CH", "Como CH", "Cordenons CH", "Dusseldorf", "Geneva CH", "Genova CH", "Guadalajara CH", "Hamburg", "Kitzbuhel", "Leon CH", "Liberec CH", "Mersin CH", "Mestre CH", "Miami Masters", "Milan CH", "Napoli CH", "Ostrava CH", "Perugia CH", "Portoroz CH", "Prague CH", "Raanana CH", "Recanati CH", "Rennes CH", "Rome CH", "San Benedetto Del Tronto CH", "San Benedetto del Tronto CH", "San Luis Potosi CH", "San Marino CH", "Sibiu CH", "Stuttgart", "Szczecin CH", "Todi CH", "Trnava CH", "Tunis CH", "Umag", "Vercelli CH", "Vienna", "Wroclaw CH", "Zagreb"];
var cchoices=["vs Country", "All", "ARG", "AUS", "AUT", "BEL", "BIH", "BLR", "BOL", "BRA", "BUL", "CAN", "CHI", "CHN", "COL", "CRO", "CZE", "DOM", "ESA", "ESP", "FRA", "GBR", "GER", "GRE", "HUN", "IND", "ISR", "ITA", "JPN", "KAZ", "KOR", "MDA", "MEX", "MKD", "MNE", "NED", "NOR", "PER", "POL", "POR", "ROU", "RUS", "SLO", "SRB", "SUI", "SVK", "SWE", "TPE", "TUN", "TUR", "UKR", "URU", "USA"];
var rchoices=["as Rank", "All"];
var ochoices=["Aaron Addison", "Juan Ignacio Galarza", "Alessandro Petrone", "Marc Rath", "Yannick Jankovits", "Simone Bolelli", "Victor Poncelet", "Yannik Reuter", "Antoine Escoffier", "Amir Weintraub", "Blaz Rola", "Stefan Vujic", "Denys Molchanov", "Roberto Carballes Baena", "Pedro Sakamoto", "Mate Pavic", "Javier Marti", "Tal Goldengoren", "Ilija Bozoljac", "Andreas Mies", "Luis Patino", "Salvatore Caruso", "Danilo Petrovic", "Domagoj Biljesko", "Aljaz Bedene", "Patrik Rikl", "Ben Fatael", "Gijs Brouwer", "Kristijan Mesaros", "Maxim Ratniuk", "Ivo Klec", "Dennis Novak", "Thomas Statzberger", "Pascal Brunner", "George Von Massow", "Johan Sebastien Tatlot", "Kirill Kivattsev", "Pedro Cachin", "Joao Pedro Sorgi", "Alexandar Lazarov", "Marc Sieber", "Thomas Giraudeau", "Elmar Ejupovic", "Andrea Arnaboldi", "Janez Semrajc", "Michal Pazicky", "Riccardo Bonadio", "Ante Pavic", "Viktor Troicki", "Nicholas Horton", "James Marsalek", "Nikola Cacic", "Corentin Moutet", "Andriej Kapas", "Attila Balazs", "Giacomo Oradini", "Louroi Martinez", "Yannick Mertens", "Inigo Cervantes Huegun", "Filip Veger", "Oleksander Byelinskyy", "Marco Cecchinato", "Fabrizio Ornago", "Marcelo Arevalo", "Gleb Alekseenko", "Gerard Granollers", "Maciej Rajski", "Michal Schmid", "Christian Hirschmueller", "Alexander Bury", "Mike Urbanija", "Franjo Raspudic", "Gokberk Ergeneman", "Roko Horvat", "Anton Zaitsev", "Viktor Galovic", "Dustin Brown", "Damien Bayard", "Marko Miladinovic", "Pedja Krstin", "Ergi Kirkin", "Matija Pecotic", "Tom Kocevar Desman", "Federico Zeballos", "Tomas Toman", "Norbert Gombos", "Keisuke Numajiri", "Levente Godry", "Andreas Neykov", "Adrian Bodmer", "Valentin Vanta", "Matteo Marfia", "Vitaly Kozyukov", "Ameur Ben Hassen", "Max Raditschnigg", "Bernd Kossler", "Marc Giner", "Kevin Kaczynski", "Vadym Ursu", "Rrezart Cungu", "Hernan Casanova", "Alberto Brizzi", "Nerman Fatic", "Daniel Gimeno Traver", "Maximilian Marterer", "Juan Pablo Varillas Patino Samudio", "Leny Mitjana", "Davy Sum", "Maxime Pauwels", "Gianluca Naso", "Patrick Ofner", "Luca Margaroli", "Alexey Vatutin", "Alexander Rumyantsev", "Nikoloz Basilashvili", "Joao Souza", "Alessandro Ceppellini", "Pavel Nejedly", "Germain Gigounon", "Cheong Eui Kim", "Jakob Schnaitter", "Aaron Cortes Alcaraz", "Johan Nikles", "Martin Vaisse", "Guillermo Olaso", "Tak Khunn Wang", "Mor Bulis", "Damir Dzumhur", "Tomislav Brkic", "Alessandro Giannessi", "Julian Reister", "Marsel Ilhan", "Jordi Samper Montana", "Mateo Faber", "Boris Butulija", "Julien Cagnina", "Alexander Bublik", "Duje Kekez", "Alexander Zhurbin", "Zdenek Kolar", "Vadim Alekseenko", "Ante Bilic", "Paul Henri Mathieu", "Tuna Altuna", "Jason Kubler", "Jozef Kovalik", "Ze Zhang", "Taro Daniel", "Mirza Basic", "Liang Yu Richard Lin", "Michal Przysiezny", "Alexander Boborykin", "Jack Carpenter", "Jules Okala", "Fatih Taha Erun", "Pere Riba", "Pablo Andujar", "Anil Yuksel", "Marinko Matosevic", "Michal Milko", "Julien Obry", "Thiago Seyboth Wild", "Albert Ramos", "Lorenzo Giustino", "Alexey Aleshchev", "Dario Maturi", "Marvin Moeller", "Henri Laaksonen", "Dusan Lajovic", "Liam Broady", "Maciej Smola", "Facundo Bagnis", "Martin Cuevas", "Josko Topic", "Alejandro Ortega Palacios", "David Poljak", "Santiago Giraldo", "Aleksandr Nedovyesov", "Goran Markovic", "Paride Mangiaterra", "Cem Ilkel", "Nicolae Frunza", "Daniel Uhlig", "Haadin Bava", "Scott Nicolas", "Christian Lindell", "Gianluca Mager", "Dennis Bogaert", "Felipe Martinez Sarrasague", "Dominic Weidinger", "Bar Tzuf Botzer", "Francesco Vilardo", "Tomislav Jotovski", "Nino Serdarusic", "Jules Marie", "Roman Safiullin", "Denys Klok", "Ismar Gorcic", "Jeroen Vanneste", "Petr Hajek", "Nikola Mektic", "Jan Hajek", "Marko Goles Babic", "Marton Fucsovics", "Joao Lucas Magalhaes Hueb De Menezes", "Karol Beck", "Juan Lizariturry", "Mats Moraing", "Aldin Setkic", "Albano Olivetti", "Philipp Petzschner", "Stefan Kozlov", "Neil Oberleitner", "Davide Galoppini", "Bastian Trinker", "Gabriel Donev", "Renta Tokuda", "Luca Vanni", "Andreas Beck", "Andrea Collarini", "Ivan Dodig", "Evan Song", "Igor Sobolta", "Hugo Nys", "Winston Lin", "Tallon Griekspoor", "Peter Torebko", "Philipp Kohlschreiber", "Omar Giacalone", "Pablo Cuevas", "Nico Matic", "Marek Gengel", "Radu Albot", "Pavel Krainik", "Nebojsa Milenkovic", "Facundo Arguello", "Toby Martin", "Zdravko Divic", "David Guez", "Muhammet Haylaz", "Vit Kopriva", "Jaroslav Pospisil", "Yaraslau Shyla", "Lukas Klein", "Charalampos Kapogiannis", "Alexandros Jakupovic", "Adrian Menendez Maceiras", "Marin Cilic", "Miljan Zekic", "Nik Razborsek", "Felipe Meligeni Rodrigues Alves", "Alexandre Muller", "Juan Pablo Ficovich", "Anze Kapun", "Federico Gaio", "Altug Celikbilek", "Ronald Slobodchikov", "Filippo Volandri", "Paolo Lorenzi", "Peter Nagy", "Matteo Donati", "Pietro Licciardi", "Adrian Ungur", "Ivan Davydov", "Zhe Li", "Dimitar Kuzmanov", "Chase Buchanan", "Ljubomir Celebic", "Marvin Netuschil", "Stefano Travaglia", "Liang Chi Huang", "Sarp Agabigun", "Marek Semjan", "Gastao Elias", "Jaime Pulgar Garcia", "Andrej Martin", "Filip Krajinovic", "Kevin Krawietz", "Ivan Sabanov", "Austin Krajicek", "Sebastian Ofner", "Steve Darcis", "Viktor Durasovic", "Jose Hernandez", "Marko Mijacevic", "Christian Garin", "Alexander Ward", "Artem Dubrivnyy", "Riccardo Bellotti", "Tristan Samuel Weissborn", "Andraz Bedene", "Marcus Willis", "Theodoros Angelinos", "Bjorn Propst", "Baris Erguden", "Milan Drinic", "Ryusei Makiguchi", "Jaume Munar", "Uladzimir Ignatik", "Victor Hanescu", "Darko Jandric"];
var tdates=["20100816", "20101025", "20110214", "20110221", "20110328", "20110404", "20110725", "20110815", "20110822", "20110919", "20110926", "20111010", "20111017", "20111024", "20120123", "20120213", "20120220", "20120312", "20120319", "20120326", "20120402", "20120507", "20120514", "20120521", "20120528", "20120618", "20120625", "20120709", "20120716", "20120730", "20120806", "20120813", "20120820", "20120827", "20120903", "20121008", "20121015", "20121022", "20121105", "20121112", "20121126", "20121203", "20121210", "20130204", "20130211", "20130225", "20130304", "20130325", "20130408", "20130415", "20130422", "20130513", "20130520", "20130527", "20130617", "20130701", "20130812", "20130819", "20130826", "20130916", "20130923", "20131007", "20131014", "20131021", "20140113", "20140120", "20140127", "20140203", "20140324", "20140331", "20140407", "20140421", "20140428", "20140505", "20140518", "20140609", "20140623", "20140707", "20140714", "20140721", "20140727", "20140804", "20140825", "20140902", "20140915", "20141006", "20141013", "20141027", "20141103", "20141110", "20150119", "20150202", "20150209", "20150216", "20150325", "20150331", "20150413", "20150420", "20150427", "20150504", "20150524", "20150602", "20150608", "20150622", "20150720", "20150803", "20150831", "20150908", "20150928", "20151012", "20151019", "20151026", "20151109", "20151116", "20160111", "20160222", "20160314", "20160321", "20160328", "20160404", "20160425", "20160509", "20160516", "20160523", "20160613", "20160711", "20160718", "20160801", "20160808", "20160815", "20160829", "20160905", "20160926", "20161003", "20161017", "20161031", "20161107", "20170109", "20170116", "20170123", "20170213", "20170220", "20170306", "20170313", "20170327", "20170410", "20170417", "20170424", "20170605", "20170703", "20170717", "20170724", "20170731", "20170814", "20170828", "20170904", "20170918", "20170925", "20171002", "20171009", "20171030", "20171106", "20171113", "20180108", "20180115", "20180122", "20180212", "20180219", "20180305", "20180312", "20180319", "20180409", "20180416", "20180430", "20180507", "20180514", "20180709", "20180730", "20180806", "20180903"];
var vranks=["29", "34", "37", "60", "65", "70", "78", "81", "83", "86", "87", "92", "95", "98", "102", "104", "106", "109", "112", "113", "115", "119", "125", "135", "138", "139", "144", "149", "150", "152", "154", "157", "159", "165", "166", "175", "179", "180", "182", "184", "187", "188", "189", "190", "191", "203", "215", "217", "218", "223", "224", "226", "228", "232", "233", "234", "238", "241", "248", "249", "250", "253", "254", "255", "259", "260", "262", "263", "265", "266", "268", "269", "271", "272", "278", "280", "284", "285", "287", "291", "292", "295", "296", "310", "315", "317", "320", "324", "325", "329", "330", "331", "332", "333", "334", "335", "336", "341", "342", "344", "347", "348", "350", "353", "358", "362", "368", "371", "373", "377", "378", "379", "380", "383", "385", "386", "387", "391", "394", "396", "397", "401", "404", "408", "413", "419", "423", "425", "428", "429", "430", "433", "435", "436", "437", "438", "441", "448", "452", "461", "463", "464", "469", "474", "477", "478", "482", "483", "486", "488", "490", "493", "496", "504", "507", "510", "511", "512", "514", "517", "523", "535", "538", "543", "547", "549", "558", "560", "561", "563", "566", "567", "568", "573", "581", "583", "585", "589", "592", "594", "596", "597", "600", "603", "609", "610", "615", "618", "619", "622", "625", "632", "637", "639", "640", "641", "649", "650", "653", "654", "655", "664", "666", "668", "674", "676", "684", "700", "703", "707", "715", "718", "720", "726", "729", "743", "747", "748", "752", "756", "762", "763", "765", "768", "771", "772", "778", "780", "791", "793", "802", "804", "807", "810", "811", "828", "833", "834", "851", "852", "853", "854", "861", "867", "870", "872", "878", "886", "891", "893", "896", "901", "904", "906", "913", "935", "945", "949", "953", "956", "957", "965", "967", "974", "977", "987", "1000", "1011", "1012", "1013", "1019", "1028", "1039", "1042", "1043", "1045", "1047", "1050", "1055", "1062", "1070", "1079", "1104", "1105", "1118", "1124", "1129", "1133", "1140", "1141", "1146", "1152", "1159", "1160", "1164", "1181", "1183", "1186", "1195", "1202", "1206", "1240", "1253", "1261", "1276", "1292", "1322", "1370", "1387", "1393", "1398", "1439", "1497", "1505", "1538", "1565", "1582", "1584", "1668", "1711", "1714", "1721", "1758", "1784", "1790", "1799", "1844", "1885", "1919", "1977", "2035", "2213"];
var playernews=[];
var upcoming = "";
var matchmx = [["20180903", "Genova CH", "Clay", "C", "L", "433", "", "", "Q2", "6-2 7-5", "3", "Joao Souza", "394", "", "", "R", "30.250513347", "193", "BRA", "0", "62", "1", "0", "58", "39", "24", "10", "10", "2", "5", "12", "1", "50", "36", "30", "10", "10", "0", "0", "2", "", "", "", "2018-1763-248", "", "", ""],
          ["20180806", "Portoroz CH", "Hard", "C", "L", "414", "6", "", "Q2", "6-4 7-6(5)", "3", "Albano Olivetti", "507", "", "", "R", "26.6995208761", "203", "FRA", "0", "85", "5", "1", "72", "48", "36", "15", "11", "2", "3", "17", "2", "72", "44", "37", "17", "11", "2", "2", "1", "", "", "", "2018-6787-247", "", "", ""],
          ["20180730", "Liberec CH", "Clay", "C", "L", "415", "", "", "Q1", "6-3 6-1", "3", "Marvin Moeller", "504", "", "", "U", "19.5290896646", "", "GER", "0", "71", "0", "1", "59", "37", "14", "14", "8", "5", "10", "5", "5", "60", "25", "16", "21", "8", "8", "9", "", "", "", "", "2018-6795-241", "", "", ""],
          ["20180709", "Perugia CH", "Clay", "C", "L", "396", "", "", "Q2", "6-2 6-4", "3", "Ante Pavic", "269", "3", "", "R", "29.3196440794", "", "CRO", "0", "60", "6", "0", "52", "37", "25", "6", "9", "2", "5", "6", "1", "46", "27", "23", "13", "9", "0", "0", "2", "", "", "", "2018-9001-246", "", "", ""],
          ["20180709", "Perugia CH", "Clay", "C", "W", "396", "", "", "Q1", "4-6 6-3 7-5", "3", "Juan Pablo Varillas Patino Samudio", "469", "", "", "R", "22.7378507871", "", "PER", "0", "133", "5", "1", "89", "52", "40", "25", "16", "0", "1", "8", "6", "103", "68", "51", "15", "15", "10", "12", "2", "", "", "", "2018-9001-233", "", "", ""],
          ["20180514", "Bosnia &amp; Herzegovina F1", "Clay", "S", "L", "416", "2", "", "QF", "6-2 6-3", "3", "Nerman Fatic", "747", "", "", "U", "23.5537303217", "", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-BIH-01A-2018-028", "", "3", "3"],
          ["20180514", "Bosnia &amp; Herzegovina F1", "Clay", "S", "W", "416", "2", "", "R16", "7-6(5) 7-5", "3", "Petr Hajek", "935", "", "", "U", "21.1718001369", "", "CZE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-BIH-01A-2018-024", "", "2", "2"],
          ["20180514", "Bosnia &amp; Herzegovina F1", "Clay", "S", "W", "416", "2", "", "R32", "6-0 6-1", "3", "Valentin Vanta", "", "", "", "U", "20.6242299795", "", "ROU", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-BIH-01A-2018-016", "", "1", "1"],
          ["20180507", "Turkey F18", "Clay", "S", "L", "465", "4", "", "SF", "6-4 6-4", "3", "Jules Okala", "581", "", "", "U", "20.7173169062", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-TUR-18A-2018-030", "", "", ""],
          ["20180507", "Turkey F18", "Clay", "S", "W", "465", "4", "", "QF", "6-3 7-5", "3", "Alexander Boborykin", "1393", "", "WC", "U", "21.9247091034", "", "RUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-TUR-18A-2018-027", "", "3", "3"],
          ["20180507", "Turkey F18", "Clay", "S", "W", "465", "4", "", "R16", "6-1 6-0", "3", "Ivan Davydov", "987", "", "", "R", "21.5496235455", "", "RUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2018-M-FU-TUR-18A-2018-022", "", "2", "2"],
          ["20180507", "Turkey F18", "Clay", "S", "W", "465", "4", "", "R32", "6-4 6-2", "3", "Vadim Alekseenko", "1582", "", "", "R", "34.9678302533", "", "UKR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2018-M-FU-TUR-18A-2018-012", "", "1", "1"],
          ["20180430", "Turkey F17", "Clay", "S", "W", "463", "4", "", "F", "6-0 6-4", "3", "Gijs Brouwer", "482", "5", "", "L", "22.1273100616", "", "NED", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2018-M-FU-TUR-17A-2018-031", "", "", ""],
          ["20180430", "Turkey F17", "Clay", "S", "W", "463", "4", "", "SF", "7-6(7) 6-3", "3", "Jules Okala", "589", "", "", "U", "20.6981519507", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-TUR-17A-2018-030", "", "", ""],
          ["20180430", "Turkey F17", "Clay", "S", "W", "463", "4", "", "QF", "6-1 6-2", "3", "Tak Khunn Wang", "609", "", "", "R", "26.5489390828", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2018-M-FU-TUR-17A-2018-027", "", "3", "3"],
          ["20180430", "Turkey F17", "Clay", "S", "W", "463", "4", "", "R16", "3-6 7-6(2) 6-0", "3", "Marko Miladinovic", "901", "", "", "U", "17.3935660507", "", "SRB", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-TUR-17A-2018-022", "", "2", "2"],
          ["20180430", "Turkey F17", "Clay", "S", "W", "463", "4", "", "R32", "6-4 7-6(4)", "3", "Louroi Martinez", "1538", "", "", "U", "19.5783709788", "", "SUI", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-TUR-17A-2018-012", "", "1", "1"],
          ["20180416", "Italy F8", "Clay", "S", "L", "411", "", "", "QF", "6-4 6-4", "3", "Tomislav Brkic", "260", "", "", "R", "28.1040383299", "", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2018-M-FU-ITA-08A-2018-026", "", "3", "3"],
          ["20180416", "Italy F8", "Clay", "S", "W", "411", "", "", "R16", "7-5 6-1", "3", "Patrik Rikl", "650", "", "", "R", "19.2744695414", "", "CZE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2018-M-FU-ITA-08A-2018-020", "", "2", "2"],
          ["20180416", "Italy F8", "Clay", "S", "W", "411", "", "", "R32", "6-4 3-6 6-3", "3", "Juan Ignacio Galarza", "344", "7", "", "R", "24.0793976728", "", "ARG", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2018-M-FU-ITA-08A-2018-008", "", "1", "1"],
          ["20180409", "Italy F7", "Clay", "S", "L", "414", "", "", "R32", "6-4 6-2", "3", "Maciej Smola", "804", "", "Q", "R", "25.0431211499", "", "POL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2018-M-FU-ITA-07A-2018-006", "", "1", "1"],
          ["20180319", "Croatia F3", "Clay", "S", "L", "399", "4", "", "QF", "6-4 2-6 6-3", "3", "Peter Nagy", "543", "", "", "U", "26.0041067762", "", "HUN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-CRO-03A-2018-027", "", "3", "3"],
          ["20180319", "Croatia F3", "Clay", "S", "W", "399", "4", "", "R16", "2-6 6-2 6-4", "3", "Ivan Sabanov", "1387", "", "LL", "R", "25.5633127995", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-CRO-03A-2018-022", "", "2", "2"],
          ["20180319", "Croatia F3", "Clay", "S", "W", "399", "4", "", "R32", "6-3 3-6 6-4", "3", "Alexandar Lazarov", "743", "", "", "R", "20.3641341547", "", "BUL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-CRO-03A-2018-012", "", "1", "1"],
          ["20180312", "Croatia F2", "Clay", "S", "L", "403", "", "", "R32", "7-5 2-6 6-4", "3", "Mike Urbanija", "1012", "", "Q", "R", "28.1889117043", "", "SLO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-CRO-02A-2018-013", "", "1", "1"],
          ["20180305", "Croatia F1", "Clay", "S", "L", "403", "5", "", "SF", "7-5 6-3", "3", "Nino Serdarusic", "287", "", "", "U", "21.2238193018", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-CRO-01A-2018-029", "", "", ""],
          ["20180305", "Croatia F1", "Clay", "S", "W", "403", "5", "", "QF", "6-3 6-1", "3", "Tomislav Jotovski", "547", "", "", "R", "27.3538672142", "", "MKD", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2018-M-FU-CRO-01A-2018-025", "", "3", "3"],
          ["20180305", "Croatia F1", "Clay", "S", "W", "403", "5", "", "R16", "6-4 3-6 6-3", "3", "Pavel Nejedly", "726", "", "", "U", "25.054072553", "", "CZE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-CRO-01A-2018-018", "", "2", "2"],
          ["20180305", "Croatia F1", "Clay", "S", "W", "403", "5", "", "R32", "6-1 6-3", "3", "Roko Horvat", "", "", "", "U", "16.9308692676", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-CRO-01A-2018-004", "", "1", "1"],
          ["20180219", "Turkey F7", "Hard", "S", "L", "408", "6", "", "R32", "6-3 2-6 6-3", "3", "Damien Bayard", "1181", "", "", "U", "21.9739904175", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-TUR-07A-2018-004", "", "1", "1"],
          ["20180212", "Turkey F6", "Hard", "S", "L", "408", "4", "", "R16", "6-3 6-2", "3", "Damien Bayard", "1186", "", "Q", "U", "21.954825462", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-TUR-06A-2018-022", "", "2", "2"],
          ["20180212", "Turkey F6", "Hard", "S", "W", "408", "4", "", "R32", "7-5 6-3", "3", "Omar Giacalone", "597", "", "", "R", "26.0889801506", "", "ITA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2018-M-FU-TUR-06A-2018-012", "", "1", "1"],
          ["20180122", "Turkey F3", "Hard", "S", "L", "428", "", "", "F", "6-3 6-4", "3", "Dimitar Kuzmanov", "386", "", "", "R", "24.4681724846", "", "BUL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2018-M-FU-TUR-03A-2018-031", "", "", ""],
          ["20180122", "Turkey F3", "Hard", "S", "W", "428", "", "", "SF", "6-4 5-7 6-1", "3", "Cheong Eui Kim", "391", "", "", "R", "27.8165639973", "", "KOR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2018-M-FU-TUR-03A-2018-030", "", "", ""],
          ["20180122", "Turkey F3", "Hard", "S", "W", "428", "", "", "QF", "7-5 6-2", "3", "Maxim Ratniuk", "861", "", "", "U", "21.7166324435", "", "UKR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-TUR-03A-2018-027", "", "3", "3"],
          ["20180122", "Turkey F3", "Hard", "S", "W", "428", "", "", "R16", "6-3 7-6(0)", "3", "Vitaly Kozyukov", "752", "", "", "R", "23.6221765914", "", "RUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2018-M-FU-TUR-03A-2018-021", "", "2", "2"],
          ["20180122", "Turkey F3", "Hard", "S", "W", "428", "", "", "R32", "6-4 6-1", "3", "Milan Drinic", "674", "", "", "R", "20.2491444216", "", "SRB", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-TUR-03A-2018-009", "", "1", "1"],
          ["20180115", "Turkey F2", "Hard", "S", "L", "428", "", "", "R32", "7-6(8) 6-4", "3", "Antoine Escoffier", "377", "", "", "U", "25.87816564", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-TUR-02A-2018-005", "", "1", "1"],
          ["20180108", "Turkey F1", "Hard", "S", "L", "430", "", "", "QF", "3-6 6-2 6-2", "3", "Altug Celikbilek", "428", "4", "", "U", "21.3360711841", "", "TUR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-TUR-01A-2018-027", "", "3", "3"],
          ["20180108", "Turkey F1", "Hard", "S", "W", "430", "", "", "R16", "6-4 6-2", "3", "Ergi Kirkin", "1039", "", "", "R", "18.9486652977", "", "TUR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2018-M-FU-TUR-01A-2018-021", "", "2", "2"],
          ["20180108", "Turkey F1", "Hard", "S", "W", "430", "", "", "R32", "7-6(4) 6-3", "3", "Denys Klok", "853", "", "", "U", "19.6221765914", "", "UKR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-TUR-01A-2018-009", "", "1", "1"],
          ["20171113", "Turkey F43", "Clay", "S", "L", "450", "", "", "QF", "6-4 7-6(5)", "3", "Riccardo Bonadio", "477", "5", "", "U", "24.3367556468", "", "ITA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2017-M-FU-TUR-43A-2017-026", "", "3", "3"],
          ["20171113", "Turkey F43", "Clay", "S", "W", "450", "", "", "R16", "6-2 7-6(3)", "3", "Boris Butulija", "", "", "WC", "U", "18.8583162218", "", "SRB", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2017-M-FU-TUR-43A-2017-019", "", "2", "2"],
          ["20171113", "Turkey F43", "Clay", "S", "W", "450", "", "", "R32", "6-0 6-1", "3", "Liang Yu Richard Lin", "", "", "Q", "U", "19.9671457906", "", "TPE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2017-M-FU-TUR-43A-2017-005", "", "1", "1"],
          ["20171106", "Turkey F42", "Clay", "S", "L", "446", "", "", "SF", "6-2 7-5", "3", "Thiago Seyboth Wild", "852", "", "", "R", "17.659137577", "", "BRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2017-M-FU-TUR-42A-2017-029", "", "", ""],
          ["20171106", "Turkey F42", "Clay", "S", "W", "446", "", "", "QF", "6-3 6-4", "3", "Peter Torebko", "581", "6", "", "R", "29.7385352498", "", "GER", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2017-M-FU-TUR-42A-2017-026", "", "3", "3"],
          ["20171106", "Turkey F42", "Clay", "S", "W", "446", "", "", "R16", "6-2 6-1", "3", "Maxim Ratniuk", "891", "", "", "U", "21.5249828884", "", "UKR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2017-M-FU-TUR-42A-2017-019", "", "2", "2"],
          ["20171106", "Turkey F42", "Clay", "S", "W", "446", "", "", "R32", "6-3 6-3", "3", "Stefan Vujic", "", "", "WC", "R", "19.6030116359", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2017-M-FU-TUR-42A-2017-005", "", "1", "1"],
          ["20171030", "Turkey F41", "Clay", "S", "L", "448", "", "", "R16", "6-3 6-7(5) 6-4", "3", "Thiago Seyboth Wild", "851", "", "", "R", "17.6399726215", "", "BRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2017-M-FU-TUR-41A-2017-021", "", "2", "2"],
          ["20171030", "Turkey F41", "Clay", "S", "W", "448", "", "", "R32", "6-3 7-5", "3", "Pavel Krainik", "945", "", "", "R", "25.0869267625", "", "CAN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2017-M-FU-TUR-41A-2017-009", "", "1", "1"],
          ["20171009", "Turkey F38", "Clay", "S", "L", "489", "", "", "R16", "3-6 7-5 7-5", "3", "Davide Galoppini", "641", "", "", "R", "22.9596167009", "", "ITA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2017-M-FU-TUR-38B-2017-019", "", "2", "2"],
          ["20171009", "Turkey F38", "Clay", "S", "W", "489", "", "", "R32", "6-0 6-1", "3", "Juan Pablo Varillas Patino Samudio", "419", "", "", "R", "22.0095824778", "", "PER", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2017-M-FU-TUR-38B-2017-005", "", "1", "1"],
          ["20171002", "Turkey F37", "Clay", "S", "L", "499", "7", "Q", "F", "6-2 6-2", "3", "Peter Torebko", "664", "", "", "R", "29.6427104723", "", "GER", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2017-M-FU-TUR-37A-2017-031", "", "", ""],
          ["20171002", "Turkey F37", "Clay", "S", "W", "499", "7", "Q", "SF", "7-5 6-3", "3", "Alessandro Petrone", "483", "5", "", "R", "26.7761806982", "", "ITA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2017-M-FU-TUR-37A-2017-029", "", "", ""],
          ["20171002", "Turkey F37", "Clay", "S", "W", "499", "7", "Q", "QF", "7-6(6) 6-4", "3", "Jeroen Vanneste", "649", "", "", "R", "23.7070499658", "", "BEL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2017-M-FU-TUR-37A-2017-025", "", "3", "3"],
          ["20171002", "Turkey F37", "Clay", "S", "W", "499", "7", "Q", "R16", "6-3 6-4", "3", "Ronald Slobodchikov", "707", "", "", "R", "23.8275154004", "", "RUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2017-M-FU-TUR-37A-2017-018", "", "2", "2"],
          ["20171002", "Turkey F37", "Clay", "S", "W", "499", "7", "Q", "R32", "7-6(5) 6-2", "3", "Nicholas Horton", "1565", "", "", "R", "22.5434633812", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2017-M-FU-TUR-37A-2017-004", "", "1", "1"],
          ["20170925", "Turkey F36", "Clay", "S", "L", "517", "6", "", "F", "6-3 6-4", "3", "Dennis Novak", "315", "3", "", "R", "24.076659822", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2017-M-FU-TUR-36A-2017-031", "", "", ""],
          ["20170925", "Turkey F36", "Clay", "S", "W", "517", "6", "", "SF", "6-0 6-2", "3", "Jeroen Vanneste", "653", "", "", "R", "23.6878850103", "", "BEL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2017-M-FU-TUR-36A-2017-029", "", "", ""],
          ["20170925", "Turkey F36", "Clay", "S", "W", "517", "6", "", "QF", "6-4 6-3", "3", "Renta Tokuda", "640", "", "", "U", "19.4934976044", "", "JPN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2017-M-FU-TUR-36A-2017-025", "", "3", "3"],
          ["20170925", "Turkey F36", "Clay", "S", "W", "517", "6", "", "R16", "7-5 6-2", "3", "Felipe Meligeni Rodrigues Alves", "1129", "", "Q", "R", "19.5975359343", "", "BRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2017-M-FU-TUR-36A-2017-018", "", "2", "2"],
          ["20170925", "Turkey F36", "Clay", "S", "W", "517", "6", "", "R32", "6-4 6-2", "3", "Germain Gigounon", "625", "", "", "R", "28.4325804244", "", "BEL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2017-M-FU-TUR-36A-2017-004", "", "1", "1"],
          ["20170918", "Turkey F35", "Clay", "S", "L", "518", "5", "", "SF", "6-1 6-3", "3", "Julien Cagnina", "265", "1", "", "R", "23.2908966461", "", "BEL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2017-M-FU-TUR-35A-2017-029", "", "", ""],
          ["20170918", "Turkey F35", "Clay", "S", "W", "518", "5", "", "QF", "6-4 6-4", "3", "Kevin Kaczynski", "", "", "Q", "R", "23.4524298426", "", "GER", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2017-M-FU-TUR-35A-2017-026", "", "3", "3"],
          ["20170918", "Turkey F35", "Clay", "S", "W", "518", "5", "", "R16", "6-1 6-1", "3", "Maxime Pauwels", "1045", "", "Q", "U", "19.1348391513", "", "BEL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2017-M-FU-TUR-35A-2017-020", "", "2", "2"],
          ["20170918", "Turkey F35", "Clay", "S", "W", "518", "5", "", "R32", "6-3 6-1", "3", "Alexey Aleshchev", "1885", "", "WC", "R", "18.7241615332", "", "RUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2017-M-FU-TUR-35A-2017-008", "", "1", "1"],
          ["20170904", "Italy F28", "Clay", "S", "L", "522", "5", "", "R32", "3-6 6-0 6-1", "3", "Kirill Kivattsev", "778", "", "", "U", "19.8822724162", "", "RUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2017-M-FU-ITA-28A-2017-004", "", "1", "1"],
          ["20170828", "Hungary F7", "Clay", "S", "L", "522", "7", "", "R16", "2-6 6-2 6-2", "3", "Dominic Weidinger", "913", "", "", "R", "22.6283367556", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "1", "2017-M-FU-HUN-07A-2017-020", "", "2", "2"],
          ["20170828", "Hungary F7", "Clay", "S", "W", "522", "7", "", "R32", "6-2 4-6 6-4", "3", "Artem Dubrivnyy", "906", "", "", "U", "18.5735797399", "", "RUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2017-M-FU-HUN-07A-2017-008", "", "1", "1"],
          ["20170814", "Serbia F2", "Clay", "S", "L", "491", "6", "", "R32", "6-2 6-3", "3", "Joao Lucas Magalhaes Hueb De Menezes", "715", "", "", "R", "20.6570841889", "", "BRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "1", "2017-M-FU-SRB-02A-2017-009", "", "1", "1"],
          ["20170731", "Austria F5", "Clay", "S", "L", "508", "4", "", "SF", "6-4 6-4", "3", "Dennis Novak", "353", "1", "WC", "R", "23.923340178", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2017-M-FU-AUT-05A-2017-029", "", "", ""],
          ["20170731", "Austria F5", "Clay", "S", "W", "508", "4", "", "QF", "6-3 6-3", "3", "Felipe Martinez Sarrasague", "1055", "", "", "U", "20.3285420945", "", "ARG", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "0", "2017-M-FU-AUT-05A-2017-026", "", "3", "3"],
          ["20170731", "Austria F5", "Clay", "S", "W", "508", "4", "", "R16", "6-2 6-2", "3", "Domagoj Biljesko", "1202", "", "", "U", "20.090349076", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2017-M-FU-AUT-05A-2017-019", "", "2", "2"],
          ["20170731", "Austria F5", "Clay", "S", "W", "508", "4", "", "R32", "6-3 6-0", "3", "Bernd Kossler", "1000", "", "", "R", "24.0492813142", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2017-M-FU-AUT-05A-2017-005", "", "1", "1"],
          ["20170724", "Prague CH", "Clay", "C", "L", "508", "7", "", "Q2", "6-1 6-2", "3", "Marek Gengel", "632", "", "", "R", "21.85078713", "", "CZE", "0", "45", "3", "3", "51", "31", "20", "5", "8", "4", "9", "8", "0", "42", "25", "23", "8", "7", "3", "3", "2", "", "", "", "2017-0600-243", "", "", ""],
          ["20170717", "San Benedetto Del Tronto CH", "Clay", "C", "L", "482", "", "Q", "R32", "3-6 6-3 6-2", "3", "Jose Hernandez", "272", "", "", "U", "27.34565366", "", "DOM", "0", "92", "5", "1", "90", "53", "33", "20", "13", "6", "10", "5", "2", "69", "42", "31", "16", "13", "0", "2", "", "", "", "0", "2017-3945-280", "", "1", "1"],
          ["20170717", "San Benedetto Del Tronto CH", "Clay", "C", "W", "482", "8", "", "Q3", "4-6 6-3 7-6(3)", "3", "Luca Margaroli", "720", "", "", "R", "25.41820671", "", "SUI", "0", "123", "7", "3", "108", "67", "48", "23", "16", "2", "5", "5", "1", "90", "63", "44", "16", "15", "2", "5", "", "", "", "", "2017-3945-252", "", "", ""],
          ["20170717", "San Benedetto Del Tronto CH", "Clay", "C", "W", "482", "8", "", "Q1", "6-3 3-6 6-3", "3", "Alexander Zhurbin", "583", "", "", "U", "25.50581793", "", "RUS", "0", "92", "7", "1", "85", "50", "35", "17", "14", "5", "8", "6", "3", "77", "46", "30", "17", "13", "8", "12", "", "", "", "", "2017-3945-231", "", "", ""],
          ["20170703", "Austria F1", "Clay", "S", "L", "501", "3", "", "SF", "6-4 6-3", "3", "Pascal Brunner", "828", "", "", "R", "28.0602327173", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2017-M-FU-AUT-01A-2017-030", "", "", ""],
          ["20170703", "Austria F1", "Clay", "S", "W", "501", "3", "", "QF", "7-6(1) 3-6 6-3", "3", "Adrian Bodmer", "639", "8", "", "U", "22.3271731691", "", "SUI", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2017-M-FU-AUT-01A-2017-027", "", "3", "3"],
          ["20170703", "Austria F1", "Clay", "S", "W", "501", "3", "", "R16", "6-0 6-1", "3", "Toby Martin", "1195", "", "", "R", "24.3668720055", "", "GBR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "0", "2017-M-FU-AUT-01A-2017-022", "", "2", "2"],
          ["20170703", "Austria F1", "Clay", "S", "W", "501", "3", "", "R32", "4-6 6-1 6-1", "3", "Neil Oberleitner", "", "", "Q", "R", "17.9110198494", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "0", "2017-M-FU-AUT-01A-2017-012", "", "1", "1"],
          ["20170605", "Bosnia &amp; Herzegovina F3", "Clay", "S", "L", "486", "6", "", "R16", "6-1 6-2", "3", "Rrezart Cungu", "1183", "", "", "R", "18.8637919233", "", "MNE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2017-M-FU-BIH-03A-2017-021", "", "2", "2"],
          ["20170605", "Bosnia &amp; Herzegovina F3", "Clay", "S", "W", "486", "6", "", "R32", "6-1 6-3", "3", "Aaron Addison", "1141", "", "", "R", "21.5441478439", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "1", "2017-M-FU-BIH-03A-2017-009", "", "1", "1"],
          ["20170424", "Turkey F16", "Clay", "S", "L", "522", "", "", "R32", "3-6 1-0 RET", "3", "Roman Safiullin", "413", "5", "", "U", "19.7125256674", "", "RUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2017-M-FU-TUR-16A-2017-008", "", "1", "1"],
          ["20170417", "Turkey F15", "Clay", "S", "L", "570", "", "", "F", "4-6 6-4 6-1", "3", "Martin Cuevas", "592", "", "", "R", "25.2566735113", "", "URU", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2017-M-FU-TUR-15A-2017-031", "", "", ""],
          ["20170417", "Turkey F15", "Clay", "S", "W", "570", "", "", "SF", "6-7(4) 7-5 6-2", "3", "Pedro Sakamoto", "594", "", "Q", "U", "23.8001368925", "", "BRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2017-M-FU-TUR-15A-2017-029", "", "", ""],
          ["20170417", "Turkey F15", "Clay", "S", "W", "570", "", "", "QF", "6-3 6-4", "3", "Andrea Collarini", "350", "8", "", "L", "25.2101300479", "", "ARG", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "1", "2017-M-FU-TUR-15A-2017-025", "", "3", "3"],
          ["20170417", "Turkey F15", "Clay", "S", "W", "570", "", "", "R16", "7-5 6-3", "3", "Yannik Reuter", "217", "1", "", "R", "26.1163586585", "", "BEL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "1", "2017-M-FU-TUR-15A-2017-017", "", "2", "2"],
          ["20170417", "Turkey F15", "Clay", "S", "W", "570", "", "", "R32", "6-1 6-2", "3", "Ryusei Makiguchi", "718", "", "", "U", "25.9575633128", "", "BOL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2017-M-FU-TUR-15A-2017-002", "", "1", "1"],
          ["20170410", "Turkey F14", "Clay", "S", "L", "565", "", "", "F", "6-2 7-5", "3", "Marsel Ilhan", "280", "4", "", "R", "29.8316221766", "190", "TUR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2017-M-FU-TUR-14A-2017-031", "", "", ""],
          ["20170410", "Turkey F14", "Clay", "S", "W", "565", "", "", "SF", "6-2 6-2", "3", "Altug Celikbilek", "452", "7", "WC", "U", "20.5886379192", "", "TUR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2017-M-FU-TUR-14A-2017-030", "", "", ""],
          ["20170410", "Turkey F14", "Clay", "S", "W", "565", "", "", "QF", "6-1 3-6 6-2", "3", "Thomas Statzberger", "886", "", "Q", "R", "24.5338809035", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2017-M-FU-TUR-14A-2017-027", "", "3", "3"],
          ["20170410", "Turkey F14", "Clay", "S", "W", "565", "", "", "R16", "6-3 6-7(6) 7-5", "3", "Dennis Novak", "284", "3", "", "R", "23.6167008898", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2017-M-FU-TUR-14A-2017-022", "", "2", "2"],
          ["20170410", "Turkey F14", "Clay", "S", "W", "565", "", "", "R32", "6-4 6-3", "3", "Aaron Cortes Alcaraz", "1013", "", "Q", "U", "22.4366872005", "", "ESP", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2017-M-FU-TUR-14A-2017-011", "", "1", "1"],
          ["20170327", "Croatia F4", "Clay", "S", "L", "586", "8", "WC", "QF", "6-3 6-4", "3", "Zdenek Kolar", "255", "2", "", "U", "20.4435318275", "", "CZE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2017-M-FU-CRO-04A-2017-028", "", "3", "3"],
          ["20170327", "Croatia F4", "Clay", "S", "W", "586", "8", "WC", "R16", "7-6(6) 6-1", "3", "Fabrizio Ornago", "668", "", "", "U", "24.9034907598", "", "ITA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "0", "2017-M-FU-CRO-04A-2017-023", "", "2", "2"],
          ["20170327", "Croatia F4", "Clay", "S", "W", "586", "8", "WC", "R32", "7-5 6-1", "3", "Pascal Brunner", "729", "", "", "R", "27.7727583847", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2017-M-FU-CRO-04A-2017-013", "", "1", "1"],
          ["20170313", "Croatia F2", "Clay", "S", "L", "624", "", "", "QF", "6-3 3-6 6-3", "3", "Riccardo Bellotti", "215", "1", "", "R", "25.5852156057", "", "ITA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "1", "2017-M-FU-CRO-02A-2017-025", "", "3", "3"],
          ["20170313", "Croatia F2", "Clay", "S", "W", "624", "", "", "R16", "6-3 3-6 7-6(5)", "3", "Alexey Vatutin", "295", "5", "", "U", "24.3559206023", "", "RUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2017-M-FU-CRO-02A-2017-018", "", "2", "2"],
          ["20170313", "Croatia F2", "Clay", "S", "W", "624", "", "", "R32", "7-6(3) 2-6 7-5", "3", "Juan Pablo Ficovich", "610", "", "", "R", "20.1122518823", "", "ARG", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2017-M-FU-CRO-02A-2017-003", "", "1", "1"],
          ["20170306", "Croatia F1", "Clay", "S", "L", "624", "", "", "SF", "6-4 7-6(6)", "3", "Pere Riba", "287", "4", "", "R", "28.9117043121", "183", "ESP", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "0", "2017-M-FU-CRO-01A-2017-030", "", "", ""],
          ["20170306", "Croatia F1", "Clay", "S", "W", "624", "", "", "QF", "7-6(4) 6-7(4) 7-5", "3", "Zdenek Kolar", "238", "2", "", "U", "20.4052019165", "", "CZE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "0", "2017-M-FU-CRO-01A-2017-028", "", "3", "3"],
          ["20170306", "Croatia F1", "Clay", "S", "W", "624", "", "", "R16", "6-4 6-3", "3", "Hernan Casanova", "490", "7", "", "U", "23.0773442847", "", "ARG", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2017-M-FU-CRO-01A-2017-023", "", "2", "2"],
          ["20170306", "Croatia F1", "Clay", "S", "W", "624", "", "", "R32", "6-1 3-6 6-3", "3", "Franjo Raspudic", "957", "", "WC", "R", "26.3052703628", "", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2017-M-FU-CRO-01A-2017-014", "", "1", "1"],
          ["20170220", "Egypt F6", "Hard", "S", "L", "627", "8", "", "R16", "7-5 7-5", "3", "Lukas Klein", "1070", "", "Q", "U", "18.9185489391", "", "SVK", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "0", "2017-M-FU-EGY-06A-2017-021", "", "2", "2"],
          ["20170220", "Egypt F6", "Hard", "S", "W", "627", "8", "", "R32", "6-4 6-2", "3", "Oleksander Byelinskyy", "768", "", "", "U", "22.8090349076", "", "UKR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2017-M-FU-EGY-06A-2017-009", "", "1", "1"],
          ["20170213", "Egypt F5", "Hard", "S", "L", "629", "", "", "R16", "6-1 6-3", "3", "Zdenek Kolar", "241", "1", "", "U", "20.34770705", "", "CZE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2017-M-FU-EGY-05A-2017-017", "", "2", "2"],
          ["20170213", "Egypt F5", "Hard", "S", "W", "629", "", "", "R32", "6-2 6-7(3) 6-2", "3", "Victor Poncelet", "1159", "", "Q", "U", "19.1348391513", "", "BEL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2017-M-FU-EGY-05A-2017-002", "", "1", "1"],
          ["20170123", "Turkey F3", "Hard", "S", "L", "597", "", "", "R32", "7-5 4-6 7-6(6)", "3", "Viktor Durasovic", "622", "", "", "U", "19.8302532512", "", "NOR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2017-M-FU-TUR-03A-2017-007", "", "1", "1"],
          ["20170116", "Turkey F2", "Hard", "S", "L", "597", "", "", "QF", "6-4 3-6 6-0", "3", "Tallon Griekspoor", "348", "7", "", "R", "20.5420944559", "", "NED", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2017-M-FU-TUR-02A-2017-026", "", "3", "3"],
          ["20170116", "Turkey F2", "Hard", "S", "W", "597", "", "", "R16", "6-2 7-5", "3", "Anton Zaitsev", "560", "", "", "U", "29.4893908282", "", "RUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "0", "2017-M-FU-TUR-02A-2017-019", "", "2", "2"],
          ["20170116", "Turkey F2", "Hard", "S", "W", "597", "", "", "R32", "3-6 6-3 6-3", "3", "Anil Yuksel", "511", "", "", "L", "26.6639288159", "", "TUR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2017-M-FU-TUR-02A-2017-006", "", "1", "1"],
          ["20170109", "Turkey F1", "Hard", "S", "L", "551", "", "", "R16", "1-6 6-4 6-0", "3", "Marc Sieber", "254", "1", "", "L", "28.8651608487", "178", "GER", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2017-M-FU-TUR-01A-2017-017", "", "2", "2"],
          ["20170109", "Turkey F1", "Hard", "S", "W", "551", "", "", "R32", "6-1 6-4", "3", "Muhammet Haylaz", "771", "", "WC", "U", "21.2073921971", "", "TUR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2017-M-FU-TUR-01A-2017-002", "", "1", "1"],
          ["20161107", "Greece F9", "Hard", "S", "L", "480", "6", "", "R16", "6-2 7-5", "3", "Christian Hirschmueller", "1050", "", "", "R", "23.6605065024", "", "GER", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2016-M-FU-GRE-09A-2016-023", "", "2", "2"],
          ["20161107", "Greece F9", "Hard", "S", "W", "480", "6", "", "R32", "6-3 7-5", "3", "Dennis Bogaert", "1160", "", "Q", "R", "24.6735112936", "", "BEL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2016-M-FU-GRE-09A-2016-013", "", "1", "1"],
          ["20161031", "Greece F8", "Hard", "S", "L", "479", "5", "", "QF", "6-2 6-4", "3", "Alexandre Muller", "386", "4", "", "U", "19.7453798768", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "0", "2016-M-FU-GRE-08B-2016-027", "", "3", "3"],
          ["20161031", "Greece F8", "Hard", "S", "W", "479", "5", "", "R16", "4-6 6-3 6-2", "3", "Charalampos Kapogiannis", "1497", "", "Q", "R", "26.7980835044", "", "GRE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2016-M-FU-GRE-08B-2016-021", "", "2", "2"],
          ["20161031", "Greece F8", "Hard", "S", "W", "479", "5", "", "R32", "2-6 7-5 7-6(6)", "3", "Johan Nikles", "653", "", "", "R", "19.6084873374", "", "SUI", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2016-M-FU-GRE-08B-2016-009", "", "1", "1"],
          ["20161017", "Croatia F11", "Clay", "S", "L", "439", "4", "", "R32", "6-2 6-2", "3", "James Marsalek", "762", "", "", "U", "24.5338809035", "", "GBR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2016-M-FU-CRO-11A-2016-012", "", "1", "1"],
          ["20161003", "Croatia F9", "Clay", "S", "L", "453", "4", "", "R32", "6-2 2-6 6-3", "3", "Johan Nikles", "666", "", "", "R", "19.5318275154", "", "SUI", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2016-M-FU-CRO-09A-2016-012", "", "1", "1"],
          ["20160926", "Croatia F8", "Clay", "S", "L", "454", "2", "", "SF", "4-6 7-6(1) 7-6(5)", "3", "Nino Serdarusic", "561", "5", "", "U", "19.7864476386", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2016-M-FU-CRO-08A-2016-030", "", "", ""],
          ["20160926", "Croatia F8", "Clay", "S", "W", "454", "2", "", "QF", "6-2 6-1", "3", "Rrezart Cungu", "1977", "", "Q", "R", "18.1930184805", "", "MNE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "0", "2016-M-FU-CRO-08A-2016-028", "", "3", "3"],
          ["20160926", "Croatia F8", "Clay", "S", "W", "454", "2", "", "R16", "7-6(5) 6-3", "3", "Darko Jandric", "870", "", "", "R", "22.0670773443", "", "SRB", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "0", "2016-M-FU-CRO-08A-2016-024", "", "2", "2"],
          ["20160926", "Croatia F8", "Clay", "S", "W", "454", "2", "", "R32", "6-1 6-3", "3", "Zdravko Divic", "", "", "WC", "U", "27.1594798084", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2016-M-FU-CRO-08A-2016-016", "", "1", "1"],
          ["20160905", "Genova CH", "Clay", "C", "L", "455", "", "", "Q2", "7-6(4) 7-6(0)", "3", "Gianluca Mager", "336", "4", "", "R", "21.7440109514", "", "ITA", "0", "94", "10", "1", "73", "51", "38", "7", "12", "3", "5", "11", "6", "89", "56", "43", "15", "12", "6", "8", "2", "", "", "", "2016-1763-259", "", "", ""],
          ["20160905", "Genova CH", "Clay", "C", "W", "455", "", "", "Q1", "6-1 6-2", "3", "Alessandro Ceppellini", "2035", "", "WC", "R", "19.8932238193", "", "ITA", "0", "54", "2", "1", "49", "28", "25", "10", "8", "3", "3", "3", "3", "51", "25", "14", "11", "7", "0", "4", "2", "", "", "", "2016-1763-244", "", "", ""],
          ["20160829", "Como CH", "Clay", "C", "L", "455", "", "", "Q1", "7-6(4) 6-1", "3", "Pedro Cachin", "296", "2", "", "R", "21.3826146475", "", "ARG", "0", "74", "1", "1", "51", "33", "19", "7", "9", "1", "5", "3", "1", "59", "27", "20", "18", "10", "0", "2", "2", "", "", "", "2016-3473-253", "", "", ""],
          ["20160815", "Serbia F5", "Clay", "S", "L", "487", "2", "WC", "SF", "6-7(2) 6-2 7-6(5)", "3", "Ljubomir Celebic", "573", "4", "", "U", "24.9171800137", "", "MNE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "0", "2016-M-FU-SRB-05A-2016-030", "", "", ""],
          ["20160815", "Serbia F5", "Clay", "S", "W", "487", "2", "WC", "QF", "6-3 6-3", "3", "Thomas Statzberger", "1028", "", "", "R", "23.8822724162", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2016-M-FU-SRB-05A-2016-028", "", "3", "3"],
          ["20160815", "Serbia F5", "Clay", "S", "W", "487", "2", "WC", "R16", "6-0 4-6 6-0", "3", "Boris Butulija", "1919", "", "Q", "U", "17.6125941136", "", "SRB", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2016-M-FU-SRB-05A-2016-024", "", "2", "2"],
          ["20160815", "Serbia F5", "Clay", "S", "W", "487", "2", "WC", "R32", "6-3 6-0", "3", "Nebojsa Milenkovic", "", "", "WC", "U", "20.2655715264", "", "SRB", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2016-M-FU-SRB-05A-2016-016", "", "1", "1"],
          ["20160808", "Austria F5", "Clay", "S", "L", "484", "1", "", "SF", "7-5 6-2", "3", "Sebastian Ofner", "478", "3", "", "R", "20.2409308693", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "1", "2016-M-FU-AUT-05A-2016-029", "", "", ""],
          ["20160808", "Austria F5", "Clay", "S", "W", "484", "1", "", "QF", "6-7(2) 7-5 5-0 RET", "3", "Patrick Ofner", "1011", "", "", "R", "23.2580424367", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2016-M-FU-AUT-05A-2016-025", "", "3", "3"],
          ["20160808", "Austria F5", "Clay", "S", "W", "484", "1", "", "R16", "6-1 7-6(3)", "3", "Jakob Schnaitter", "1799", "", "Q", "R", "20.4216290212", "", "GER", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "1", "2016-M-FU-AUT-05A-2016-017", "", "2", "2"],
          ["20160808", "Austria F5", "Clay", "S", "W", "484", "1", "", "R32", "4-6 6-3 6-4", "3", "Johan Sebastien Tatlot", "780", "", "", "U", "20.3696098563", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2016-M-FU-AUT-05A-2016-001", "", "1", "1"],
          ["20160801", "Liberec CH", "Clay", "C", "L", "457", "", "", "Q1", "6-4 6-4", "3", "Tom Kocevar Desman", "676", "", "", "R", "26.0616016427", "", "SLO", "0", "59", "8", "0", "51", "29", "22", "13", "10", "0", "2", "10", "1", "59", "30", "26", "16", "10", "1", "1", "2", "", "", "", "2016-6795-252", "", "", ""],
          ["20160718", "Recanati CH", "Hard", "C", "L", "488", "", "Q", "R16", "6-1 7-5", "3", "Marton Fucsovics", "166", "3", "", "R", "24.4407939767", "", "HUN", "0", "64", "4", "2", "58", "38", "21", "12", "10", "6", "10", "3", "1", "50", "29", "24", "13", "9", "1", "1", "2", "", "", "0", "2016-1743-288", "", "2", "2"],
          ["20160718", "Recanati CH", "Hard", "C", "W", "488", "", "Q", "R32", "7-6(5) 3-6 7-6(5)", "3", "Gianluca Mager", "310", "", "SE", "R", "21.6290212183", "", "ITA", "0", "123", "14", "0", "95", "68", "56", "17", "16", "2", "3", "23", "5", "118", "67", "59", "25", "17", "2", "2", "2", "", "", "1", "2016-1743-275", "", "1", "1"],
          ["20160718", "Recanati CH", "Hard", "C", "W", "488", "4", "", "Q3", "6-4 6-2", "3", "Francesco Vilardo", "504", "5", "", "R", "26.5544147844", "", "ITA", "0", "62", "6", "1", "53", "46", "28", "5", "9", "3", "5", "3", "2", "50", "25", "16", "9", "9", "3", "8", "", "", "", "", "2016-1743-266", "", "", ""],
          ["20160718", "Recanati CH", "Hard", "C", "W", "488", "4", "", "Q2", "6-4 6-2", "3", "Paride Mangiaterra", "", "", "WC", "U", "", "", "ITA", "0", "54", "7", "0", "46", "29", "24", "13", "9", "0", "0", "0", "7", "62", "30", "18", "17", "9", "7", "10", "", "", "", "", "2016-1743-259", "", "", ""],
          ["20160711", "San Benedetto del Tronto CH", "Clay", "C", "L", "488", "", "", "Q1", "7-6(7) 6-3", "3", "Joao Pedro Sorgi", "517", "", "", "R", "22.7296372348", "", "BRA", "0", "96", "10", "1", "82", "48", "32", "17", "10", "5", "7", "7", "2", "64", "42", "34", "12", "11", "0", "1", "2", "", "", "", "2016-3945-256", "", "", ""],
          ["20160613", "Turkey F24", "Hard", "S", "L", "483", "4", "", "R16", "6-2 3-6 6-3", "3", "Sarp Agabigun", "956", "", "WC", "R", "19.0034223135", "", "TUR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2016-M-FU-TUR-24A-2016-022", "", "2", "2"],
          ["20160613", "Turkey F24", "Hard", "S", "W", "483", "4", "", "R32", "6-1 6-1", "3", "Keisuke Numajiri", "1133", "", "", "R", "20.7173169062", "", "JPN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2016-M-FU-TUR-24A-2016-012", "", "1", "1"],
          ["20160523", "Bosnia &amp; Herzegovina F3", "Clay", "S", "L", "497", "5", "", "QF", "6-3 6-4", "3", "Christian Lindell", "268", "1", "", "R", "24.5065023956", "", "SWE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "0", "2016-M-FU-BIH-03A-2016-025", "", "3", "3"],
          ["20160523", "Bosnia &amp; Herzegovina F3", "Clay", "S", "W", "497", "5", "", "R16", "6-4 7-6(3)", "3", "Elmar Ejupovic", "748", "", "", "R", "23.3045859001", "", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2016-M-FU-BIH-03A-2016-018", "", "2", "2"],
          ["20160523", "Bosnia &amp; Herzegovina F3", "Clay", "S", "W", "497", "5", "", "R32", "7-6(5) 7-6(1)", "3", "Nerman Fatic", "655", "", "", "U", "21.5797399042", "", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2016-M-FU-BIH-03A-2016-004", "", "1", "1"],
          ["20160516", "Croatia F7", "Clay", "S", "L", "504", "6", "", "QF", "6-2 6-3", "3", "Ljubomir Celebic", "618", "", "", "U", "24.6680355921", "", "MNE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "0", "2016-M-FU-CRO-07A-2016-027", "", "3", "3"],
          ["20160516", "Croatia F7", "Clay", "S", "W", "504", "6", "", "R16", "6-3 6-1", "3", "Alejandro Ortega Palacios", "1714", "", "Q", "U", "19.2854209446", "", "ESP", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "2016-M-FU-CRO-07A-2016-021", "", "2", "2"],
          ["20160516", "Croatia F7", "Clay", "S", "W", "504", "6", "", "R32", "6-2 6-3", "3", "Winston Lin", "772", "", "", "U", "23.0581793292", "", "USA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2016-M-FU-CRO-07A-2016-009", "", "1", "1"],
          ["20160509", "Croatia F6", "Clay", "S", "L", "505", "5", "", "R16", "6-1 6-2", "3", "Corentin Moutet", "967", "", "Q", "U", "17.0568104038", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2016-M-FU-CRO-06A-2016-021", "", "2", "2"],
          ["20160509", "Croatia F6", "Clay", "S", "W", "505", "5", "", "R32", "6-3 6-3", "3", "Toby Martin", "765", "", "", "R", "23.2169746749", "", "GBR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "1", "2016-M-FU-CRO-06A-2016-009", "", "1", "1"],
          ["20160425", "Ostrava CH", "Clay", "C", "L", "458", "", "", "Q1", "W/O", "3", "Jaroslav Pospisil", "488", "", "", "R", "35.2060232717", "", "CZE", "0", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2016-1797-251", "", "", ""],
          ["20160404", "Napoli CH", "Clay", "C", "L", "448", "", "", "Q1", "7-6(2) 7-6(1)", "3", "Jaume Munar", "433", "", "", "U", "18.9158110883", "", "ESP", "0", "108", "5", "1", "88", "47", "32", "23", "12", "4", "6", "2", "3", "84", "53", "40", "17", "12", "4", "6", "", "", "", "", "2016-7239-247", "", "", ""],
          ["20160328", "Leon CH", "Hard", "C", "L", "428", "", "", "Q2", "6-4 2-6 6-2", "3", "Marinko Matosevic", "373", "8", "", "R", "30.6173853525", "194", "AUS", "0", "88", "8", "2", "79", "43", "28", "23", "13", "5", "8", "7", "2", "76", "48", "38", "12", "13", "3", "5", "2", "", "", "", "2016-1539-260", "", "", ""],
          ["20160328", "Leon CH", "Hard", "C", "W", "428", "", "", "Q1", "6-2 6-7(5) 6-2", "3", "Luis Patino", "811", "", "", "R", "22.4558521561", "", "MEX", "0", "94", "19", "2", "88", "53", "42", "22", "14", "5", "5", "9", "2", "100", "62", "38", "21", "14", "7", "11", "2", "", "", "", "2016-1539-247", "", "", ""],
          ["20160321", "San Luis Potosi CH", "Clay", "C", "L", "428", "", "", "Q3", "2-6 6-4 6-2", "3", "Marcelo Arevalo", "291", "4", "", "R", "25.4264202601", "", "ESA", "0", "104", "6", "6", "79", "47", "34", "15", "13", "4", "7", "9", "10", "88", "48", "39", "17", "13", "4", "6", "2", "", "", "", "2016-0213-266", "", "", ""],
          ["20160321", "San Luis Potosi CH", "Clay", "C", "W", "428", "", "", "Q2", "6-2 6-3", "3", "Gianluca Mager", "335", "8", "", "R", "21.3032169747", "", "ITA", "0", "59", "2", "2", "56", "28", "24", "16", "9", "3", "3", "4", "3", "50", "16", "13", "17", "8", "7", "10", "2", "", "", "", "2016-0213-258", "", "", ""],
          ["20160321", "San Luis Potosi CH", "Clay", "C", "W", "428", "", "", "Q1", "1-6 6-4 6-2", "3", "Federico Zeballos", "563", "", "", "U", "27.8083504449", "", "BOL", "0", "83", "8", "3", "67", "37", "30", "15", "13", "0", "3", "7", "2", "68", "35", "26", "15", "12", "3", "6", "", "", "", "", "2016-0213-243", "", "", ""],
          ["20160314", "Guadalajara CH", "Hard", "C", "L", "422", "", "", "Q1", "6-3 7-6(5)", "3", "Joao Souza", "253", "6", "", "R", "27.7782340862", "193", "BRA", "0", "79", "9", "5", "72", "40", "32", "15", "11", "3", "5", "5", "0", "56", "34", "33", "13", "10", "0", "0", "2", "", "", "", "2016-6284-254", "", "", ""],
          ["20160222", "Turkey F8", "Hard", "S", "L", "395", "3", "", "R16", "5-7 6-3 6-4", "3", "Muhammet Haylaz", "1261", "", "WC", "U", "20.3258042437", "", "TUR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "0", "2016-M-FU-TUR-08A-2016-019", "", "2", "2"],
          ["20160222", "Turkey F8", "Hard", "S", "W", "395", "3", "", "R32", "6-1 7-6(3)", "3", "Goran Markovic", "1206", "", "Q", "R", "20.4325804244", "", "SRB", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2016-M-FU-TUR-08A-2016-005", "", "1", "1"],
          ["20160111", "Turkey F2", "Hard", "S", "L", "440", "3", "", "F", "6-0 6-4", "3", "Vadym Ursu", "1042", "", "", "R", "19.0253251198", "", "UKR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "0", "2016-M-FU-TUR-02A-2016-031", "", "", ""],
          ["20160111", "Turkey F2", "Hard", "S", "W", "440", "3", "", "SF", "6-2 6-3", "3", "Altug Celikbilek", "603", "8", "", "U", "19.3429158111", "", "TUR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "0", "2016-M-FU-TUR-02A-2016-030", "", "", ""],
          ["20160111", "Turkey F2", "Hard", "S", "W", "440", "3", "", "QF", "5-1 RET", "3", "Jules Okala", "1186", "", "SE", "U", "18.3983572895", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2016-M-FU-TUR-02A-2016-027", "", "3", "3"],
          ["20160111", "Turkey F2", "Hard", "S", "W", "440", "3", "", "R16", "2-6 6-3 6-2", "3", "Leny Mitjana", "1398", "", "Q", "R", "21.4455852156", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2016-M-FU-TUR-02A-2016-022", "", "2", "2"],
          ["20160111", "Turkey F2", "Hard", "S", "W", "440", "3", "", "R32", "6-0 6-1", "3", "Fatih Taha Erun", "1565", "", "WC", "U", "21.5195071869", "", "TUR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2016-M-FU-TUR-02A-2016-012", "", "1", "1"],
          ["20151116", "Turkey F46", "Clay", "S", "L", "496", "5", "", "QF", "6-4 6-4", "3", "Javier Marti", "292", "1", "", "R", "23.8466803559", "", "ESP", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "", "", "", "2015-M-FU-TUR-46A-2015-025", "", "3", "3"],
          ["20151116", "Turkey F46", "Clay", "S", "W", "496", "5", "", "R16", "4-6 7-6(5) 7-6(4)", "3", "George Von Massow", "807", "", "", "R", "25.6563997262", "", "GER", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-M-FU-TUR-46A-2015-018", "", "2", "2"],
          ["20151116", "Turkey F46", "Clay", "S", "W", "496", "5", "", "R32", "7-6(2) 6-4", "3", "Maciej Rajski", "715", "", "", "U", "24.5393566051", "", "POL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2015-M-FU-TUR-46A-2015-004", "", "1", "1"],
          ["20151109", "Turkey F45", "Clay", "S", "W", "468", "7", "", "F", "3-6 6-4 6-1", "3", "Tomislav Brkic", "341", "3", "", "R", "25.6700889802", "", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-M-FU-TUR-45A-2015-031", "", "", ""],
          ["20151109", "Turkey F45", "Clay", "S", "W", "468", "7", "", "SF", "5-7 6-4 6-2", "3", "Maciej Rajski", "763", "", "", "U", "24.5201916496", "", "POL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2015-M-FU-TUR-45A-2015-029", "", "", ""],
          ["20151109", "Turkey F45", "Clay", "S", "W", "468", "7", "", "QF", "6-2 3-1 RET", "3", "Yaraslau Shyla", "429", "4", "", "R", "22.6803559206", "", "BLR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-M-FU-TUR-45A-2015-026", "", "3", "3"],
          ["20151109", "Turkey F45", "Clay", "S", "W", "468", "7", "", "R16", "7-6(5) 6-2", "3", "Artem Dubrivnyy", "1047", "", "Q", "U", "16.772073922", "", "RUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2015-M-FU-TUR-45A-2015-020", "", "2", "2"],
          ["20151109", "Turkey F45", "Clay", "S", "W", "468", "7", "", "R32", "6-2 6-3", "3", "Gleb Alekseenko", "953", "", "", "R", "32.476386037", "", "UKR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-M-FU-TUR-45A-2015-008", "", "1", "1"],
          ["20151026", "Turkey F43", "Hard", "S", "L", "500", "4", "", "R32", "6-2 6-3", "3", "Alexander Bublik", "977", "", "", "R", "18.3572895277", "", "RUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-M-FU-TUR-43A-2015-012", "", "1", "1"],
          ["20151019", "Turkey F42", "Hard", "S", "L", "498", "5", "", "F", "0-6 7-6(8) 6-1", "3", "Dimitar Kuzmanov", "330", "1", "", "R", "22.2258726899", "", "BUL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-M-FU-TUR-42A-2015-031", "", "", ""],
          ["20151019", "Turkey F42", "Hard", "S", "W", "498", "5", "", "SF", "4-6 7-6(3) 6-1", "3", "Vit Kopriva", "", "", "Q", "U", "18.3436002738", "", "CZE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2015-M-FU-TUR-42A-2015-030", "", "", ""],
          ["20151019", "Turkey F42", "Hard", "S", "W", "498", "5", "", "QF", "6-3 6-2", "3", "Nicolae Frunza", "1370", "", "", "R", "17.9247091034", "", "ROU", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2015-M-FU-TUR-42A-2015-027", "", "3", "3"],
          ["20151019", "Turkey F42", "Hard", "S", "W", "498", "5", "", "R16", "6-4 6-0", "3", "Haadin Bava", "2213", "", "Q", "U", "20.8761122519", "", "IND", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2015-M-FU-TUR-42A-2015-021", "", "2", "2"],
          ["20151019", "Turkey F42", "Hard", "S", "W", "498", "5", "", "R32", "6-0 6-2", "3", "Fatih Taha Erun", "1758", "", "", "U", "21.2895277207", "", "TUR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2015-M-FU-TUR-42A-2015-009", "", "1", "1"],
          ["20151012", "Turkey F41", "Hard", "S", "L", "495", "7", "Q", "R16", "1-6 7-6(5) 6-4", "3", "Anil Yuksel", "700", "", "", "L", "25.3990417522", "", "TUR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-M-FU-TUR-41A-2015-018", "", "2", "2"],
          ["20151012", "Turkey F41", "Hard", "S", "W", "495", "7", "Q", "R32", "6-1 6-2", "3", "Gokberk Ergeneman", "1240", "", "WC", "U", "20.1122518823", "", "TUR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2015-M-FU-TUR-41A-2015-004", "", "1", "1"],
          ["20150928", "Croatia F18", "Clay", "S", "L", "500", "5", "WC", "QF", "6-4 1-6 7-6(5)", "3", "Stefan Kozlov", "368", "1", "", "R", "17.6536618754", "", "USA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-M-FU-CRO-18A-2015-025", "", "3", "3"],
          ["20150928", "Croatia F18", "Clay", "S", "W", "500", "5", "WC", "R16", "4-6 7-6(3) 6-2", "3", "Tomas Toman", "", "", "Q", "R", "26.0616016427", "", "CZE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2015-M-FU-CRO-18A-2015-018", "", "2", "2"],
          ["20150928", "Croatia F18", "Clay", "S", "W", "500", "5", "WC", "R32", "6-0 6-0", "3", "Mike Urbanija", "867", "", "", "R", "25.7549623546", "", "SLO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2015-M-FU-CRO-18A-2015-004", "", "1", "1"],
          ["20150908", "Genova CH", "Clay", "C", "L", "317", "", "", "R32", "6-2 6-4", "3", "Paolo Lorenzi", "83", "3", "", "R", "33.7084188912", "183", "ITA", "0", "", "6", "4", "53", "28", "21", "10", "9", "1", "4", "6", "4", "52", "20", "20", "19", "9", "2", "2", "2", "", "", "0", "2015-1763-005", "", "1", "1"],
          ["20150831", "Como CH", "Clay", "C", "L", "317", "", "Q", "R32", "3-6 6-3 7-5", "3", "Roberto Carballes Baena", "159", "8", "", "R", "22.4394250513", "", "ESP", "0", "", "2", "4", "102", "57", "34", "17", "15", "11", "18", "4", "4", "99", "53", "30", "24", "15", "4", "10", "2", "", "", "0", "2015-3473-004", "", "1", "1"],
          ["20150803", "Liberec CH", "Clay", "C", "L", "325", "", "Q", "R16", "6-1 2-6 6-3", "3", "Andrej Martin", "175", "", "", "R", "25.8672142368", "180", "SVK", "0", "", "3", "0", "82", "49", "30", "16", "12", "5", "9", "3", "2", "70", "49", "36", "10", "12", "1", "3", "2", "", "", "0", "2015-6795-017", "", "2", "2"],
          ["20150803", "Liberec CH", "Clay", "C", "W", "325", "", "Q", "R32", "6-1 6-4", "3", "Steve Darcis", "65", "1", "", "R", "31.3894592745", "178", "BEL", "0", "", "8", "3", "55", "28", "23", "16", "9", "2", "2", "3", "1", "49", "32", "22", "5", "8", "1", "4", "1", "", "", "1", "2015-6795-001", "", "1", "1"],
          ["20150720", "Umag", "Clay", "A", "L", "326", "", "WC", "R32", "6-4 6-3", "3", "Aljaz Bedene", "70", "", "", "R", "26.0041067762", "181", "SLO", "0", "", "6", "3", "52", "25", "19", "11", "9", "0", "3", "10", "2", "62", "36", "26", "16", "10", "6", "7", "2", "", "", "1", "2015-439-011", "", "1", "1"],
          ["20150622", "Milan CH", "Clay", "C", "L", "295", "", "", "R32", "6-1 6-3", "3", "Federico Gaio", "253", "", "", "R", "23.2963723477", "", "ITA", "0", "", "0", "5", "62", "26", "15", "12", "8", "8", "13", "6", "1", "42", "26", "20", "10", "8", "0", "1", "1", "", "", "0", "2015-3463-002", "", "1", "1"],
          ["20150608", "Caltanissetta CH", "Clay", "C", "L", "265", "", "", "R32", "7-6(1) 6-1", "3", "Andrea Arnaboldi", "180", "", "", "L", "27.446954141", "", "ITA", "0", "", "3", "3", "84", "36", "24", "21", "9", "12", "15", "3", "3", "73", "40", "32", "16", "10", "2", "3", "1", "", "", "0", "2015-5049-006", "", "1", "1"],
          ["20150602", "Mestre CH", "Clay", "C", "L", "266", "", "", "R32", "6-4 7-5", "3", "Gastao Elias", "152", "7", "", "R", "24.4982888433", "178", "POR", "0", "99", "0", "9", "89", "51", "31", "15", "11", "8", "12", "5", "4", "79", "37", "27", "21", "11", "7", "9", "2", "", "", "0", "2015-7021-013", "", "1", "1"],
          ["20150524", "Roland Garros Q", "Clay", "Q", "L", "266", "", "", "Q1", "6-4 5-7 7-5", "3", "David Guez", "249", "", "", "R", "32.4599589322", "185", "FRA", "0", "136", "14", "3", "103", "59", "42", "17", "17", "7", "13", "3", "2", "106", "60", "36", "27", "17", "6", "11", "2", "", "", "", "2015-989-019", "", "", ""],
          ["20150504", "Rome CH", "Clay", "C", "L", "195", "", "", "R16", "6-2 6-4", "3", "Dustin Brown", "104", "2", "", "R", "30.4010951403", "196", "GER", "0", "53", "6", "2", "60", "33", "19", "14", "9", "7", "10", "5", "0", "45", "33", "28", "9", "9", "0", "0", "2", "", "", "0", "2015-2151-024", "", "2", "2"],
          ["20150504", "Rome CH", "Clay", "C", "W", "195", "", "", "R32", "7-6(4) 6-3", "3", "Andrea Arnaboldi", "203", "", "", "L", "27.3511293634", "", "ITA", "0", "89", "11", "3", "82", "51", "40", "15", "11", "9", "10", "6", "3", "66", "38", "30", "12", "10", "9", "11", "1", "", "", "0", "2015-2151-015", "", "1", "1"],
          ["20150427", "Ostrava CH", "Clay", "C", "L", "176", "4", "", "R16", "6-2 7-5", "3", "Jozef Kovalik", "241", "", "", "R", "22.4750171116", "", "SVK", "0", "68", "3", "7", "59", "32", "24", "12", "10", "6", "9", "4", "1", "55", "31", "28", "14", "10", "2", "2", "2", "", "", "0", "2015-1797-022", "", "2", "2"],
          ["20150427", "Ostrava CH", "Clay", "C", "W", "176", "4", "", "R32", "6-2 6-4", "3", "David Poljak", "1584", "", "WC", "U", "18.9431895962", "", "CZE", "0", "60", "4", "0", "52", "30", "25", "13", "9", "3", "3", "0", "4", "67", "32", "21", "16", "9", "7", "10", "", "", "", "1", "2015-1797-012", "", "1", "1"],
          ["20150420", "Vercelli CH", "Clay", "C", "L", "159", "7", "", "R32", "3-6 7-5 6-1", "3", "Andrej Martin", "187", "", "", "R", "25.5797399042", "180", "SVK", "0", "105", "1", "6", "86", "48", "29", "14", "14", "7", "14", "5", "4", "89", "53", "35", "17", "14", "7", "12", "2", "", "", "0", "2015-7006-008", "", "1", "1"],
          ["20150413", "Mersin CH", "Clay", "C", "L", "162", "", "", "R16", "6-3 6-1", "3", "Inigo Cervantes Huegun", "233", "", "Q", "R", "25.3661875428", "", "ESP", "0", "56", "3", "5", "53", "30", "15", "6", "8", "5", "11", "4", "2", "39", "19", "16", "11", "8", "0", "2", "2", "", "", "0", "2015-6488-023", "", "2", "2"],
          ["20150413", "Mersin CH", "Clay", "C", "W", "162", "", "", "R32", "7-6(3) 6-3", "3", "Aldin Setkic", "226", "", "", "R", "27.3100616016", "193", "BIH", "0", "78", "7", "2", "56", "39", "29", "12", "10", "0", "1", "3", "3", "73", "52", "32", "10", "11", "5", "8", "2", "", "", "1", "2015-6488-014", "", "1", "1"],
          ["20150331", "Raanana CH", "Hard", "C", "L", "156", "", "", "R32", "6-2 6-3", "3", "Liam Broady", "184", "", "", "L", "21.2128678987", "", "GBR", "0", "51", "1", "2", "42", "16", "8", "15", "8", "0", "3", "8", "1", "44", "31", "26", "11", "9", "0", "0", "2", "", "", "1", "2015-7237-011", "", "1", "1"],
          ["20150325", "Miami Masters Q", "Hard", "Q", "L", "156", "", "", "Q2", "6-4 6-2", "3", "Damir Dzumhur", "92", "5", "", "R", "22.8391512663", "172", "BIH", "0", "59", "5", "3", "67", "45", "25", "13", "9", "6", "9", "1", "0", "44", "31", "27", "9", "9", "0", "0", "2", "", "", "0", "2015-864-029", "", "", ""],
          ["20150325", "Miami Masters Q", "Hard", "Q", "W", "156", "", "", "Q1", "7-6(5) 7-6(3)", "3", "Luca Vanni", "115", "18", "", "R", "29.7987679671", "", "ITA", "0", "99", "4", "7", "97", "51", "35", "24", "12", "12", "15", "4", "5", "77", "36", "31", "17", "12", "2", "5", "2", "", "", "1", "2015-864-010", "", "", ""],
          ["20150216", "Wroclaw CH", "Hard", "C", "L", "157", "", "", "R32", "6-4 6-2", "3", "Andriej Kapas", "437", "", "WC", "R", "25.5167693361", "", "POL", "0", "54", "5", "5", "54", "31", "23", "7", "9", "1", "4", "4", "1", "48", "34", "31", "7", "9", "0", "0", "2", "", "", "0", "2015-7205-006", "", "1", "1"],
          ["20150209", "Bergamo CH", "Hard", "C", "L", "159", "7", "", "R32", "7-5 3-6 6-3", "3", "Philipp Petzschner", "378", "", "", "R", "30.8802190281", "185", "GER", "0", "106", "10", "2", "100", "67", "46", "19", "15", "3", "5", "14", "2", "97", "60", "48", "20", "15", "3", "4", "1", "", "", "0", "2015-854-013", "", "1", "1"],
          ["20150202", "Zagreb", "Hard", "A", "L", "152", "", "WC", "R32", "6-2 6-3", "3", "Ivan Dodig", "86", "", "", "R", "30.083504449", "183", "CRO", "0", "53", "4", "3", "53", "33", "23", "7", "8", "7", "10", "11", "0", "44", "31", "28", "9", "9", "0", "0", "2", "", "", "1", "2015-2276-011", "", "1", "1"],
          ["20150119", "Australian Open Q", "Hard", "Q", "L", "153", "32", "", "Q2", "4-6 6-1 6-4", "3", "Chase Buchanan", "179", "", "", "R", "23.627652293", "", "USA", "0", "90", "5", "2", "82", "53", "33", "13", "13", "3", "7", "9", "1", "81", "53", "39", "13", "14", "3", "5", "2", "", "", "1", "2015-987-094", "", "", ""],
          ["20150119", "Australian Open Q", "Hard", "Q", "W", "153", "32", "", "Q1", "3-6 7-6(4) 8-6", "3", "Nikoloz Basilashvili", "157", "", "", "R", "22.9048596851", "", "RUS", "0", "125", "14", "5", "128", "84", "58", "26", "18", "8", "10", "2", "5", "112", "78", "61", "16", "17", "6", "7", "2", "", "", "1", "2015-987-060", "", "", ""],
          ["20141110", "Brescia CH", "Hard", "C", "L", "160", "", "", "R16", "7-6(3) 7-6(2)", "3", "Austin Krajicek", "154", "", "", "L", "24.4024640657", "", "USA", "0", "77", "17", "2", "72", "52", "43", "12", "12", "3", "3", "18", "0", "66", "55", "50", "7", "12", "0", "0", "2", "", "", "0", "2014-7121-021", "", "2", "2"],
          ["20141110", "Brescia CH", "Hard", "C", "W", "160", "", "", "R32", "6-1 7-6(3)", "3", "Daniel Gimeno Traver", "112", "6", "", "R", "29.2594113621", "185", "ESP", "0", "67", "15", "1", "57", "40", "34", "10", "10", "0", "0", "4", "3", "67", "41", "29", "10", "9", "5", "7", "2", "", "", "1", "2014-7121-009", "", "1", "1"],
          ["20141103", "Bratislava CH", "Hard", "C", "L", "159", "", "", "R32", "6-7(2) 6-1 6-4", "3", "Viktor Troicki", "106", "8", "", "R", "28.7282683094", "193", "SRB", "0", "91", "8", "2", "97", "69", "47", "11", "14", "3", "6", "19", "1", "81", "57", "48", "14", "15", "1", "1", "2", "", "", "0", "2014-444-009", "", "1", "1"],
          ["20141027", "Geneva CH", "Hard", "C", "L", "160", "", "", "R32", "7-6(2) 3-6 6-3", "3", "Radu Albot", "190", "", "Q", "R", "24.9582477755", "", "MDA", "0", "126", "5", "1", "106", "61", "42", "22", "15", "10", "14", "3", "3", "94", "64", "41", "17", "15", "1", "5", "2", "", "", "1", "2014-471-006", "", "1", "1"],
          ["20141013", "Vienna Q", "Hard", "Q", "L", "158", "", "", "Q1", "4-6 6-2 6-3", "3", "Norbert Gombos", "138", "", "", "R", "24.167008898", "", "SVK", "0", "93", "7", "4", "71", "40", "28", "16", "13", "4", "7", "7", "3", "83", "50", "41", "19", "14", "5", "6", "2", "", "", "1", "2014-896-010", "", "", ""],
          ["20141006", "Rennes CH", "Hard", "C", "L", "160", "", "", "R32", "7-5 5-7 6-3", "3", "Paul Henri Mathieu", "81", "3", "", "R", "32.7310061602", "185", "FRA", "0", "123", "12", "3", "100", "74", "52", "14", "16", "7", "9", "20", "4", "102", "57", "49", "23", "17", "2", "3", "2", "", "", "1", "2014-3503-005", "", "1", "1"],
          ["20140915", "Trnava CH", "Clay", "C", "L", "153", "", "", "R32", "7-5 6-2", "3", "Victor Hanescu", "139", "8", "", "R", "33.1526351814", "198", "ROU", "0", "74", "6", "2", "64", "36", "21", "14", "10", "6", "10", "6", "0", "59", "40", "31", "10", "10", "7", "8", "1", "", "", "1", "2014-3628-013", "", "1", "1"],
          ["20140902", "Genova CH", "Clay", "C", "L", "178", "", "", "F", "6-1 7-5", "3", "Albert Ramos", "95", "1", "", "L", "26.6036960986", "188", "ESP", "0", "73", "1", "2", "62", "35", "20", "13", "9", "5", "9", "2", "1", "48", "33", "28", "10", "10", "2", "3", "2", "", "", "1", "2014-1763-031", "", "", ""],
          ["20140902", "Genova CH", "Clay", "C", "W", "178", "", "", "SF", "6-4 7-5", "3", "Andreas Beck", "115", "5", "", "L", "28.5503080082", "190", "GER", "0", "88", "17", "2", "76", "52", "40", "13", "11", "5", "5", "5", "7", "64", "39", "31", "12", "11", "4", "6", "2", "", "", "0", "2014-1763-030", "", "", ""],
          ["20140902", "Genova CH", "Clay", "C", "W", "178", "", "", "QF", "7-6(6) 1-6 7-6(8)", "3", "Viktor Troicki", "408", "", "", "R", "28.5366187543", "193", "SRB", "0", "138", "4", "0", "117", "72", "50", "21", "16", "4", "7", "13", "4", "99", "53", "46", "24", "15", "1", "1", "2", "", "", "0", "2014-1763-028", "", "3", "3"],
          ["20140902", "Genova CH", "Clay", "C", "W", "178", "", "", "R16", "6-4 2-6 6-4", "3", "Damir Dzumhur", "119", "6", "", "R", "22.264202601", "172", "BIH", "0", "112", "2", "2", "88", "57", "38", "13", "14", "8", "13", "2", "1", "76", "48", "29", "14", "14", "4", "9", "2", "", "", "1", "2014-1763-023", "", "2", "2"],
          ["20140902", "Genova CH", "Clay", "C", "W", "178", "", "", "R32", "4-6 6-3 6-1", "3", "Viktor Galovic", "615", "", "Q", "R", "23.9315537303", "", "ITA", "0", "99", "5", "1", "73", "48", "34", "14", "13", "2", "4", "6", "4", "94", "57", "39", "12", "13", "12", "17", "2", "", "", "0", "2014-1763-014", "", "1", "1"],
          ["20140825", "Como CH", "Clay", "C", "L", "178", "", "", "R16", "7-6(4) 7-5", "3", "Ilija Bozoljac", "179", "", "", "R", "29.0622861054", "193", "SRB", "0", "108", "8", "1", "74", "51", "41", "12", "12", "2", "3", "21", "7", "88", "50", "44", "18", "12", "8", "8", "2", "", "", "0", "2014-3473-023", "", "2", "2"],
          ["20140825", "Como CH", "Clay", "C", "W", "178", "", "", "R32", "7-6(5) 1-6 6-3", "3", "Pietro Licciardi", "655", "", "WC", "L", "20.2737850787", "", "ITA", "0", "114", "6", "3", "84", "47", "37", "23", "14", "4", "6", "1", "3", "95", "60", "41", "22", "14", "3", "4", "", "", "", "1", "2014-3473-014", "", "1", "1"],
          ["20140825", "US Open Q", "Hard", "Q", "L", "178", "", "", "Q1", "6-2 6-2", "3", "Ze Zhang", "182", "", "", "R", "24.1423682409", "", "CHN", "0", "52", "4", "1", "54", "37", "20", "7", "8", "3", "7", "5", "1", "43", "33", "27", "7", "8", "0", "0", "2", "", "", "1", "2014-995-050", "", "", ""],
          ["20140804", "San Marino CH", "Clay", "C", "L", "185", "", "", "R16", "7-6(4) 6-4", "3", "Filip Krajinovic", "112", "7", "", "R", "22.4339493498", "185", "SRB", "0", "77", "16", "1", "74", "42", "37", "12", "11", "2", "3", "5", "0", "66", "36", "30", "19", "11", "0", "0", "2", "", "", "1", "2014-841-021", "", "2", "2"],
          ["20140804", "San Marino CH", "Clay", "C", "W", "185", "", "", "R32", "7-6(2) 6-2", "3", "Christian Garin", "330", "", "Q", "R", "18.1793292266", "", "CHI", "0", "67", "4", "1", "54", "38", "32", "9", "10", "1", "3", "2", "1", "61", "32", "21", "13", "10", "6", "10", "2", "", "", "1", "2014-841-010", "", "1", "1"],
          ["20140727", "Kitzbuhel Q", "Clay", "Q", "L", "182", "6", "", "Q1", "6-2 6-2", "3", "Mats Moraing", "637", "", "", "L", "22.1026694045", "", "GER", "0", "46", "3", "6", "51", "27", "16", "8", "8", "3", "8", "7", "2", "44", "20", "18", "13", "8", "1", "2", "2", "", "", "0", "2014-967-012", "", "", ""],
          ["20140721", "Umag", "Clay", "A", "L", "181", "", "WC", "R32", "4-6 6-4 6-4", "3", "Pablo Cuevas", "60", "", "Q", "R", "28.5503080082", "180", "URU", "0", "124", "7", "1", "105", "61", "43", "18", "15", "10", "15", "8", "6", "82", "54", "39", "11", "15", "1", "5", "1", "", "", "1", "2014-439-005", "", "1", "1"],
          ["20140714", "Hamburg", "Clay", "A", "L", "182", "", "Q", "R64", "6-4 6-2", "3", "Pablo Andujar", "78", "", "", "R", "28.4709103354", "180", "ESP", "0", "79", "1", "1", "55", "38", "23", "7", "9", "3", "7", "0", "0", "58", "40", "26", "12", "9", "2", "3", "2", "", "", "0", "2014-414-004", "", "1", "1"],
          ["20140714", "Hamburg Q", "Clay", "Q", "W", "182", "12", "", "Q2", "3-6 6-4 6-1", "3", "Facundo Bagnis", "113", "6", "", "L", "24.3750855578", "", "ARG", "0", "93", "6", "3", "70", "39", "27", "15", "13", "2", "6", "4", "4", "77", "44", "28", "12", "13", "5", "11", "2", "", "", "0", "2014-479-018", "", "", ""],
          ["20140714", "Hamburg Q", "Clay", "Q", "W", "182", "12", "", "Q1", "7-6(7) 6-4", "3", "Maximilian Marterer", "535", "", "WC", "L", "19.0800821355", "", "GER", "0", "84", "8", "0", "69", "52", "40", "8", "11", "2", "3", "5", "3", "72", "42", "32", "14", "11", "3", "5", "2", "", "", "1", "2014-479-012", "", "", ""],
          ["20140707", "Stuttgart", "Clay", "A", "L", "189", "", "Q", "R32", "6-4 6-2", "3", "Santiago Giraldo", "34", "7", "", "R", "26.6091718001", "188", "COL", "0", "62", "2", "0", "52", "31", "18", "11", "9", "2", "6", "2", "1", "52", "35", "26", "11", "9", "1", "2", "2", "", "", "0", "2014-321-003", "", "1", "1"],
          ["20140707", "Stuttgart Q", "Clay", "Q", "W", "189", "5", "", "Q3", "6-3 1-6 6-4", "3", "Henri Laaksonen", "259", "", "", "R", "22.2669404517", "", "SUI", "0", "92", "4", "4", "69", "40", "29", "13", "13", "2", "6", "2", "11", "89", "59", "36", "15", "13", "3", "7", "2", "", "", "", "2014-981-028", "", "", ""],
          ["20140707", "Stuttgart Q", "Clay", "Q", "W", "189", "5", "", "Q2", "6-4 6-2", "3", "Pedja Krstin", "250", "", "", "R", "19.8412046543", "", "SRB", "0", "69", "10", "0", "53", "36", "30", "9", "9", "0", "0", "2", "2", "61", "42", "27", "7", "9", "5", "8", "2", "", "", "1", "2014-981-024", "", "", ""],
          ["20140707", "Stuttgart Q", "Clay", "Q", "W", "189", "5", "", "Q1", "6-1 6-2", "3", "Joao Pedro Sorgi", "596", "", "", "R", "20.7173169062", "", "BRA", "0", "65", "8", "0", "61", "41", "31", "9", "8", "3", "3", "3", "4", "48", "23", "14", "9", "7", "2", "6", "2", "", "", "1", "2014-981-016", "", "", ""],
          ["20140623", "Wimbledon Q", "Grass", "Q", "L", "177", "", "", "Q1", "6-4 6-2", "3", "Filip Krajinovic", "135", "15", "", "R", "22.3189596167", "185", "SRB", "0", "65", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-990-057", "", "", ""],
          ["20140609", "Caltanissetta CH", "Clay", "C", "L", "185", "", "", "QF", "6-4 6-2", "3", "Joao Souza", "150", "", "", "R", "26.0342231348", "193", "BRA", "0", "69", "2", "1", "50", "32", "23", "5", "9", "2", "6", "5", "0", "51", "34", "24", "12", "9", "2", "3", "2", "", "", "0", "2014-5049-026", "", "3", "3"],
          ["20140609", "Caltanissetta CH", "Clay", "C", "W", "185", "", "", "R16", "6-0 7-6(9)", "3", "Filippo Volandri", "98", "4", "", "R", "32.758384668", "183", "ITA", "0", "88", "4", "0", "66", "40", "27", "14", "9", "3", "5", "0", "1", "76", "48", "22", "17", "9", "9", "14", "1", "", "", "1", "2014-5049-019", "", "2", "2"],
          ["20140609", "Caltanissetta CH", "Clay", "C", "W", "185", "", "", "R32", "6-7(2) 7-6(7) 6-1", "3", "Matteo Donati", "329", "", "WC", "R", "19.2772073922", "", "ITA", "0", "151", "11", "4", "120", "75", "49", "24", "15", "8", "11", "9", "5", "129", "69", "49", "25", "16", "10", "16", "2", "", "", "0", "2014-5049-006", "", "1", "1"],
          ["20140518", "Dusseldorf", "Clay", "A", "L", "211", "", "Q", "QF", "7-5 4-6 6-1", "3", "Philipp Kohlschreiber", "29", "1", "", "R", "30.5900068446", "178", "GER", "0", "104", "2", "1", "98", "68", "41", "18", "15", "5", "10", "9", "3", "82", "57", "42", "13", "14", "3", "5", "1", "", "", "0", "2014-6710-021", "", "3", "3"],
          ["20140518", "Dusseldorf", "Clay", "A", "W", "211", "", "Q", "R16", "6-3 6-0", "3", "Dustin Brown", "87", "", "WC", "R", "29.4428473648", "196", "GER", "0", "46", "2", "0", "49", "37", "26", "8", "8", "1", "1", "0", "4", "43", "24", "18", "3", "7", "2", "6", "2", "", "", "1", "2014-6710-014", "", "2", "2"],
          ["20140518", "Dusseldorf", "Clay", "A", "W", "211", "", "Q", "R32", "7-5 7-5", "3", "Michal Przysiezny", "102", "", "", "R", "30.2532511978", "185", "POL", "0", "80", "10", "2", "62", "41", "34", "12", "12", "2", "3", "5", "3", "74", "36", "30", "13", "12", "0", "3", "1", "", "", "", "2014-6710-002", "", "1", "1"],
          ["20140518", "Dusseldorf Q", "Clay", "Q", "W", "211", "7", "", "Q3", "6-4 7-5", "3", "Jozef Kovalik", "464", "", "", "R", "21.5359342916", "", "SVK", "0", "96", "3", "1", "71", "46", "35", "14", "11", "5", "6", "4", "1", "86", "42", "28", "20", "11", "3", "6", "2", "", "", "0", "2014-6711-026", "", "", ""],
          ["20140518", "Dusseldorf Q", "Clay", "Q", "W", "211", "7", "", "Q2", "7-5 6-4", "3", "Alexander Ward", "362", "", "", "U", "24.052019165", "", "GBR", "0", "76", "4", "1", "58", "36", "25", "12", "11", "0", "2", "3", "3", "63", "33", "24", "13", "11", "0", "4", "", "", "", "", "2014-6711-020", "", "", ""],
          ["20140518", "Dusseldorf Q", "Clay", "Q", "W", "211", "7", "", "Q1", "6-1 6-0", "3", "Scott Nicolas", "", "", "WC", "U", "17.7412731006", "", "BEL", "0", "47", "4", "0", "42", "34", "28", "4", "7", "4", "4", "0", "6", "41", "20", "11", "5", "6", "2", "7", "", "", "", "", "2014-6711-008", "", "", ""],
          ["20140505", "Rome CH", "Clay", "C", "L", "216", "", "", "R16", "6-1 6-2", "3", "Julian Reister", "112", "6", "", "R", "28.090349076", "188", "GER", "0", "58", "0", "2", "56", "33", "17", "8", "8", "3", "8", "2", "2", "37", "23", "21", "8", "7", "0", "0", "1", "", "", "0", "2014-2151-018", "", "2", "2"],
          ["20140505", "Rome CH", "Clay", "C", "W", "216", "", "", "R32", "7-6(2) 6-2", "3", "Kristijan Mesaros", "190", "", "", "R", "25.839835729", "", "CRO", "0", "89", "3", "1", "69", "52", "34", "9", "10", "6", "9", "0", "2", "63", "48", "27", "5", "10", "5", "10", "2", "", "", "1", "2014-2151-003", "", "1", "1"],
          ["20140428", "Tunis CH", "Clay", "C", "L", "264", "", "", "SF", "6-4 6-4", "3", "Simone Bolelli", "224", "", "", "R", "28.553045859", "183", "ITA", "0", "95", "2", "1", "66", "40", "28", "12", "10", "6", "9", "4", "1", "59", "41", "31", "9", "10", "5", "6", "1", "20140502-M-Tunis_CH-SF-Mate_Delic-Simone_Bolelli.html", "", "0", "2014-1541-029", "", "", ""],
          ["20140428", "Tunis CH", "Clay", "C", "W", "264", "", "", "QF", "6-4 6-1", "3", "Adrian Ungur", "109", "5", "", "R", "29.2539356605", "178", "ROU", "0", "66", "4", "0", "53", "41", "30", "8", "9", "3", "4", "1", "2", "49", "24", "12", "12", "8", "2", "6", "1", "", "", "1", "2014-1541-026", "", "3", "3"],
          ["20140428", "Tunis CH", "Clay", "C", "W", "264", "", "", "R16", "6-3 2-0 RET", "3", "Facundo Arguello", "115", "4", "", "R", "21.7303216975", "", "ARG", "0", "53", "1", "0", "34", "22", "18", "7", "6", "1", "1", "0", "4", "42", "21", "12", "9", "5", "4", "6", "2", "", "", "", "2014-1541-019", "", "2", "2"],
          ["20140428", "Tunis CH", "Clay", "C", "W", "264", "", "", "R32", "6-3 6-4", "3", "Ameur Ben Hassen", "", "", "WC", "R", "20.8323066393", "", "TUN", "0", "78", "4", "2", "59", "36", "28", "15", "10", "0", "1", "0", "2", "69", "42", "23", "16", "9", "11", "14", "2", "", "", "1", "2014-1541-006", "", "1", "1"],
          ["20140421", "Vercelli CH", "Clay", "C", "L", "343", "", "Q", "F", "6-2 6-2", "3", "Simone Bolelli", "332", "", "WC", "R", "28.5338809035", "183", "ITA", "0", "55", "3", "1", "44", "30", "20", "4", "8", "0", "4", "3", "0", "47", "30", "23", "12", "8", "1", "1", "1", "", "", "", "2014-7006-031", "", "", ""],
          ["20140421", "Vercelli CH", "Clay", "C", "W", "343", "", "Q", "SF", "5-7 7-6(5) 2-0 RET", "3", "Marco Cecchinato", "165", "", "", "R", "21.5550992471", "", "ITA", "0", "124", "6", "2", "80", "54", "40", "11", "13", "2", "5", "7", "6", "93", "52", "36", "21", "13", "6", "9", "1", "", "", "", "2014-7006-029", "", "", ""],
          ["20140421", "Vercelli CH", "Clay", "C", "W", "343", "", "Q", "QF", "4-6 7-5 6-0", "3", "Stefano Travaglia", "317", "", "WC", "U", "22.340862423", "", "ITA", "0", "108", "8", "1", "98", "71", "43", "18", "14", "11", "13", "6", "4", "70", "43", "29", "13", "14", "0", "5", "", "", "", "1", "2014-7006-026", "", "3", "3"],
          ["20140421", "Vercelli CH", "Clay", "C", "W", "343", "", "Q", "R16", "6-1 6-4", "3", "Jan Hajek", "125", "5", "", "R", "30.7049965777", "180", "CZE", "0", "69", "5", "1", "45", "33", "28", "6", "9", "1", "2", "1", "2", "75", "61", "30", "7", "8", "9", "13", "2", "", "", "1", "2014-7006-020", "", "2", "2"],
          ["20140421", "Vercelli CH", "Clay", "C", "W", "343", "", "Q", "R32", "6-0 6-4", "3", "Yannick Mertens", "249", "", "", "R", "26.8227241615", "", "BEL", "0", "62", "3", "0", "61", "38", "19", "15", "8", "3", "5", "0", "5", "54", "26", "13", "8", "8", "7", "13", "2", "", "", "1", "2014-7006-007", "", "1", "1"],
          ["20140407", "Turkey F11", "Hard", "S", "L", "371", "4", "Q", "QF", "6-4 6-4", "3", "Bastian Trinker", "419", "5", "", "R", "23.9069130732", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-TUR-11A-2014-026", "", "3", "3"],
          ["20140407", "Turkey F11", "Hard", "S", "W", "371", "4", "Q", "R16", "7-5 6-3", "3", "Dominic Weidinger", "1146", "", "Q", "R", "19.2361396304", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-TUR-11A-2014-019", "", "2", "2"],
          ["20140407", "Turkey F11", "Hard", "S", "W", "371", "4", "Q", "R32", "7-6(3) 6-1", "3", "Franjo Raspudic", "872", "", "Q", "R", "23.3921971253", "", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-TUR-11A-2014-005", "", "1", "1"],
          ["20140331", "Turkey F10", "Hard", "S", "L", "368", "3", "", "F", "7-6(5) 3-6 6-3", "3", "Karol Beck", "348", "5", "", "R", "31.9917864476", "180", "SVK", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-TUR-10A-2014-031", "", "", ""],
          ["20140331", "Turkey F10", "Hard", "S", "W", "368", "3", "", "SF", "3-6 6-4 6-4", "3", "Julien Obry", "438", "7", "", "R", "22.5708418891", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-TUR-10A-2014-029", "", "", ""],
          ["20140331", "Turkey F10", "Hard", "S", "W", "368", "3", "", "QF", "6-4 6-3", "3", "Franjo Raspudic", "893", "", "", "R", "23.3730321697", "", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-TUR-10A-2014-026", "", "3", "3"],
          ["20140331", "Turkey F10", "Hard", "S", "W", "368", "3", "", "R16", "6-3 6-4", "3", "Baris Erguden", "684", "", "", "R", "28.2436687201", "", "TUR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-TUR-10A-2014-019", "", "2", "2"],
          ["20140331", "Turkey F10", "Hard", "S", "W", "368", "3", "", "R32", "7-5 6-3", "3", "Andreas Mies", "851", "", "", "U", "23.6084873374", "", "GER", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-TUR-10A-2014-005", "", "1", "1"],
          ["20140324", "Croatia F5", "Clay", "S", "L", "365", "", "WC", "QF", "6-2 6-7(1) 6-3", "3", "Uladzimir Ignatik", "278", "7", "", "R", "23.6741957563", "", "BLR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-CRO-05A-2014-028", "", "3", "3"],
          ["20140324", "Croatia F5", "Clay", "S", "W", "365", "", "WC", "R16", "7-6(5) 2-6 7-6(9)", "3", "Gerard Granollers", "228", "2", "", "R", "25.1252566735", "", "ESP", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "", "", "", "2014-M-FU-CRO-05A-2014-024", "", "2", "2"],
          ["20140324", "Croatia F5", "Clay", "S", "W", "365", "", "WC", "R32", "6-1 3-6 7-5", "3", "Alexander Bury", "371", "", "", "R", "26.5051334702", "", "BLR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-CRO-05A-2014-015", "", "1", "1"],
          ["20140203", "Zagreb", "Hard", "A", "L", "370", "", "WC", "R32", "6-4 6-4", "3", "Marin Cilic", "37", "5", "", "R", "25.3497604381", "198", "CRO", "0", "71", "3", "1", "66", "46", "32", "9", "10", "3", "5", "14", "0", "50", "34", "31", "10", "10", "2", "2", "2", "", "", "0", "2014-2276-007", "", "1", "1"],
          ["20140127", "Israel F3", "Hard", "S", "L", "387", "5", "", "F", "6-4 6-2", "3", "Amir Weintraub", "241", "1", "", "R", "27.3648186174", "188", "ISR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "", "", "", "2014-M-FU-ISR-03A-2014-031", "", "", ""],
          ["20140127", "Israel F3", "Hard", "S", "W", "387", "5", "", "SF", "6-2 2-0 RET", "3", "Matija Pecotic", "1790", "", "Q", "U", "24.5694729637", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-ISR-03A-2014-030", "", "", ""],
          ["20140127", "Israel F3", "Hard", "S", "W", "387", "5", "", "QF", "6-3 7-5", "3", "Marcus Willis", "383", "3", "", "L", "23.3018480493", "", "GBR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-ISR-03A-2014-027", "", "3", "3"],
          ["20140127", "Israel F3", "Hard", "S", "W", "387", "5", "", "R16", "6-3 6-2", "3", "Tal Goldengoren", "1104", "", "", "U", "17.7823408624", "", "ISR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-ISR-03A-2014-021", "", "2", "2"],
          ["20140127", "Israel F3", "Hard", "S", "W", "387", "5", "", "R32", "6-2 7-6(3)", "3", "Mor Bulis", "1322", "", "WC", "U", "17.7768651608", "", "ISR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-ISR-03A-2014-009", "", "1", "1"],
          ["20140120", "Israel F2", "Hard", "S", "L", "401", "7", "", "SF", "6-2 7-6(5)", "3", "Amir Weintraub", "191", "1", "", "R", "27.3264887064", "188", "ISR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "", "", "", "2014-M-FU-ISR-02A-2014-029", "", "", ""],
          ["20140120", "Israel F2", "Hard", "S", "W", "401", "7", "", "QF", "6-1 6-1", "3", "Vadim Alekseenko", "610", "", "", "R", "30.6557152635", "", "UKR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-ISR-02A-2014-026", "", "3", "3"],
          ["20140120", "Israel F2", "Hard", "S", "W", "401", "7", "", "R16", "4-6 6-1 6-2", "3", "Luca Vanni", "833", "", "SE", "R", "28.6105407255", "", "ITA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-ISR-02A-2014-020", "", "2", "2"],
          ["20140120", "Israel F2", "Hard", "S", "W", "401", "7", "", "R32", "6-3 6-3", "3", "Matija Pecotic", "1668", "", "Q", "U", "24.5311430527", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-ISR-02A-2014-008", "", "1", "1"],
          ["20140113", "Israel F1", "Hard", "S", "L", "401", "7", "", "SF", "6-7(2) 6-1 6-4", "3", "Martin Vaisse", "380", "6", "", "U", "26.4257357974", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-ISR-01A-2014-030", "", "", ""],
          ["20140113", "Israel F1", "Hard", "S", "W", "401", "7", "", "QF", "4-6 6-3 6-2", "3", "Liang Chi Huang", "262", "2", "", "R", "21.8507871321", "", "TPE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-ISR-01A-2014-028", "", "3", "3"],
          ["20140113", "Israel F1", "Hard", "S", "W", "401", "7", "", "R16", "3-6 7-5 6-4", "3", "Evan Song", "854", "", "", "U", "21.6016427105", "", "USA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-ISR-01A-2014-023", "", "2", "2"],
          ["20140113", "Israel F1", "Hard", "S", "W", "401", "7", "", "R32", "7-6(8) 6-0", "3", "Ben Fatael", "1784", "", "WC", "U", "16.6160164271", "", "ISR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-ISR-01A-2014-013", "", "1", "1"],
          ["20131021", "Croatia F12", "Clay", "S", "L", "349", "5", "", "R32", "2-6 6-3 6-4", "3", "Bastian Trinker", "511", "", "", "R", "23.446954141", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-CRO-12A-2013-009", "", "1", "1"],
          ["20131014", "Croatia F11", "Clay", "S", "L", "363", "5", "", "R16", "6-1 2-6 7-6(7)", "3", "Duje Kekez", "619", "", "", "R", "20.5420944559", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-CRO-11A-2013-018", "", "2", "2"],
          ["20131014", "Croatia F11", "Clay", "S", "W", "363", "5", "", "R32", "4-6 6-1 6-4", "3", "Tomislav Brkic", "549", "", "", "R", "23.6002737851", "", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-CRO-11A-2013-004", "", "1", "1"],
          ["20131007", "Croatia F10", "Clay", "S", "L", "362", "1", "", "F", "7-6(5) 7-6(2)", "3", "Nikola Mektic", "358", "3", "", "R", "24.7857631759", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-CRO-10A-2013-031", "", "", ""],
          ["20131007", "Croatia F10", "Clay", "S", "W", "362", "1", "", "SF", "1-6 6-2 6-3", "3", "Janez Semrajc", "413", "4", "", "U", "24.205338809", "", "SLO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-CRO-10A-2013-029", "", "", ""],
          ["20131007", "Croatia F10", "Clay", "S", "W", "362", "1", "", "QF", "6-3 7-6(7)", "3", "Bastian Trinker", "512", "6", "", "R", "23.40862423", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-CRO-10A-2013-025", "", "3", "3"],
          ["20131007", "Croatia F10", "Clay", "S", "W", "362", "1", "", "R16", "3-6 6-2 6-4", "3", "Nik Razborsek", "703", "", "", "L", "20.0082135524", "", "SLO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-CRO-10A-2013-017", "", "2", "2"],
          ["20131007", "Croatia F10", "Clay", "S", "W", "362", "1", "", "R32", "6-0 6-4", "3", "Mateo Faber", "", "", "WC", "L", "19.5017111567", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-CRO-10A-2013-001", "", "1", "1"],
          ["20130923", "Sibiu CH", "Clay", "C", "L", "386", "", "Q", "R16", "6-2 6-1", "3", "Marco Cecchinato", "184", "8", "", "R", "20.9801505818", "", "ITA", "0", "61", "4", "2", "51", "25", "14", "9", "8", "2", "7", "4", "5", "54", "28", "22", "13", "7", "3", "3", "1", "", "", "", "2013-6590-020", "", "2", "2"],
          ["20130923", "Sibiu CH", "Clay", "C", "W", "386", "", "Q", "R32", "6-3 6-2", "3", "Theodoros Angelinos", "324", "", "", "U", "29.3196440794", "", "GRE", "0", "61", "5", "3", "50", "31", "24", "12", "9", "0", "1", "1", "4", "49", "24", "12", "11", "8", "4", "8", "", "", "", "", "2013-6590-007", "", "1", "1"],
          ["20130916", "Szczecin CH", "Clay", "C", "L", "434", "", "Q", "R16", "3-6 6-3 6-0", "3", "Aleksandr Nedovyesov", "150", "7", "", "R", "26.5845311431", "", "KAZ", "0", "100", "4", "2", "92", "65", "38", "13", "12", "8", "12", "4", "0", "70", "48", "34", "15", "12", "2", "3", "2", "", "", "0", "2013-448-020", "", "2", "2"],
          ["20130916", "Szczecin CH", "Clay", "C", "W", "434", "", "Q", "R32", "6-4 6-1", "3", "Denys Molchanov", "226", "", "", "R", "26.3381245722", "", "UKR", "0", "59", "3", "0", "50", "32", "27", "12", "9", "2", "2", "2", "2", "48", "32", "21", "4", "8", "0", "3", "2", "", "", "1", "2013-448-007", "", "1", "1"],
          ["20130826", "Como CH", "Clay", "C", "L", "408", "", "LL", "R32", "6-7(6) 6-4 7-6(6)", "3", "Dusan Lajovic", "144", "4", "", "R", "23.1567419576", "180", "SRB", "0", "133", "4", "2", "117", "74", "56", "24", "17", "7", "9", "14", "3", "118", "77", "56", "25", "17", "3", "4", "1", "", "", "0", "2013-3473-012", "", "1", "1"],
          ["20130819", "Italy F22", "Clay", "S", "L", "409", "", "", "R16", "6-3 6-3", "3", "Alexander Ward", "342", "", "", "U", "23.3045859001", "", "GBR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-ITA-22A-2013-022", "", "2", "2"],
          ["20130819", "Italy F22", "Clay", "S", "W", "409", "", "", "R32", "6-3 7-5", "3", "Roberto Carballes Baena", "234", "4", "", "R", "20.4079397673", "", "ESP", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-ITA-22A-2013-012", "", "1", "1"],
          ["20130812", "Cordenons CH", "Clay", "C", "L", "417", "", "Q", "R32", "6-2 6-4", "3", "Salvatore Caruso", "347", "", "Q", "R", "20.6570841889", "", "ITA", "0", "85", "4", "1", "65", "45", "22", "9", "9", "6", "11", "3", "2", "62", "35", "23", "16", "9", "5", "7", "2", "", "", "0", "2013-2120-006", "", "1", "1"],
          ["20130701", "Todi CH", "Clay", "C", "L", "465", "", "Q", "R16", "6-4 6-4", "3", "Andrej Martin", "149", "6", "", "R", "23.7590691307", "180", "SVK", "0", "73", "0", "2", "60", "44", "29", "9", "10", "3", "5", "6", "4", "60", "35", "30", "14", "10", "0", "0", "2", "", "", "0", "2013-3627-018", "", "2", "2"],
          ["20130701", "Todi CH", "Clay", "C", "W", "465", "", "Q", "R32", "6-1 6-2", "3", "Marc Giner", "263", "", "", "R", "22.0177960301", "", "ESP", "0", "62", "3", "1", "50", "32", "27", "9", "8", "5", "5", "0", "1", "45", "23", "12", "9", "7", "4", "8", "2", "", "", "1", "2013-3627-003", "", "1", "1"],
          ["20130617", "Bosnia & Herzegovina F4", "Clay", "S", "W", "460", "2", "", "F", "7-5 6-2", "3", "Damir Dzumhur", "266", "1", "", "R", "21.0759753593", "172", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-BIH-04A-2013-031", "", "", ""],
          ["20130617", "Bosnia & Herzegovina F4", "Clay", "S", "W", "460", "2", "", "SF", "4-0 RET", "3", "Ismar Gorcic", "", "", "", "R", "30.0725530459", "", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-BIH-04A-2013-030", "", "", ""],
          ["20130617", "Bosnia & Herzegovina F4", "Clay", "S", "W", "460", "2", "", "QF", "6-0 6-1", "3", "Ljubomir Celebic", "1253", "", "Q", "U", "21.7549623546", "", "MNE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-BIH-04A-2013-028", "", "3", "3"],
          ["20130617", "Bosnia & Herzegovina F4", "Clay", "S", "W", "460", "2", "", "R16", "4-6 6-2 6-0", "3", "Franjo Raspudic", "1043", "", "WC", "R", "22.5872689938", "", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-BIH-04A-2013-024", "", "2", "2"],
          ["20130617", "Bosnia & Herzegovina F4", "Clay", "S", "W", "460", "2", "", "R32", "6-1 6-2", "3", "Nerman Fatic", "1124", "", "WC", "U", "18.6475017112", "", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-BIH-04A-2013-016", "", "1", "1"],
          ["20130527", "Bosnia & Herzegovina F1", "Clay", "S", "L", "505", "3", "", "R32", "6-2 6-3", "3", "Franjo Raspudic", "1140", "", "", "R", "22.5297741273", "", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-BIH-01A-2013-005", "", "1", "1"],
          ["20130520", "Turkey F20", "Hard", "S", "W", "506", "2", "", "F", "3-6 7-5 6-4", "3", "Hugo Nys", "600", "4", "", "R", "22.2559890486", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "", "", "", "2013-M-FU-TUR-20A-2013-031", "", "", ""],
          ["20130520", "Turkey F20", "Hard", "S", "W", "506", "2", "", "SF", "6-1 6-2", "3", "Davy Sum", "594", "3", "", "R", "23.8412046543", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-TUR-20A-2013-030", "", "", ""],
          ["20130520", "Turkey F20", "Hard", "S", "W", "506", "2", "", "QF", "6-4 6-2", "3", "Bastian Trinker", "640", "5", "", "R", "23.0253251198", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-TUR-20A-2013-028", "", "3", "3"],
          ["20130520", "Turkey F20", "Hard", "S", "W", "506", "2", "", "R16", "6-1 6-1", "3", "Matteo Marfia", "1276", "", "", "L", "26.2067077344", "", "ITA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-TUR-20A-2013-024", "", "2", "2"],
          ["20130520", "Turkey F20", "Hard", "S", "W", "506", "2", "", "R32", "7-5 6-2", "3", "Igor Sobolta", "", "", "Q", "L", "24.1204654346", "", "UKR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-TUR-20A-2013-016", "", "1", "1"],
          ["20130513", "Bulgaria F1", "Clay", "S", "L", "505", "4", "", "QF", "6-1 7-6(4)", "3", "Dimitar Kuzmanov", "496", "6", "", "R", "19.7919233402", "", "BUL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-BUL-01A-2013-026", "", "3", "3"],
          ["20130513", "Bulgaria F1", "Clay", "S", "W", "505", "4", "", "R16", "6-1 6-0", "3", "Andreas Neykov", "", "", "Q", "R", "21.8288843258", "", "BUL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-BUL-01A-2013-019", "", "2", "2"],
          ["20130513", "Bulgaria F1", "Clay", "S", "W", "505", "4", "", "R32", "6-1 6-1", "3", "Gabriel Donev", "", "", "Q", "U", "16.8706365503", "", "BUL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-BUL-01A-2013-005", "", "1", "1"],
          ["20130422", "Italy F5", "Clay", "S", "L", "510", "", "", "R16", "6-1 6-3", "3", "Nikola Cacic", "567", "", "Q", "R", "22.3737166324", "", "SRB", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-ITA-05A-2013-021", "", "2", "2"],
          ["20130422", "Italy F5", "Clay", "S", "W", "510", "", "", "R32", "6-1 6-3", "3", "Giacomo Oradini", "793", "", "Q", "U", "22.9130732375", "", "ITA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-ITA-05A-2013-010", "", "1", "1"],
          ["20130415", "Italy F4", "Clay", "S", "L", "509", "", "", "R32", "6-3 6-4", "3", "Josko Topic", "639", "", "Q", "U", "29.3524982888", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-ITA-04A-2013-011", "", "1", "1"],
          ["20130408", "Italy F3", "Clay", "S", "L", "512", "", "", "R32", "6-4 2-6 7-6(8)", "3", "Alberto Brizzi", "320", "6", "", "R", "29.0349075975", "", "ITA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-ITA-03A-2013-009", "", "1", "1"],
          ["20130325", "Croatia F6", "Clay", "S", "L", "527", "", "", "QF", "6-1 6-2", "3", "Pere Riba", "974", "", "Q", "R", "24.9445585216", "183", "ESP", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-CRO-06A-2013-028", "", "3", "3"],
          ["20130325", "Croatia F6", "Clay", "S", "W", "527", "", "", "R16", "3-6 6-3 6-3", "3", "Marc Sieber", "512", "", "", "L", "25.0513347023", "178", "GER", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-CRO-06A-2013-024", "", "2", "2"],
          ["20130325", "Croatia F6", "Clay", "S", "W", "527", "", "", "R32", "7-6(4) 6-2", "3", "Attila Balazs", "248", "2", "", "R", "24.4709103354", "180", "HUN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-CRO-06A-2013-016", "", "1", "1"],
          ["20130304", "Turkey F9", "Hard", "S", "L", "532", "", "", "R32", "6-4 6-2", "3", "Lorenzo Giustino", "514", "", "", "R", "21.4811772758", "", "ITA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-TUR-09A-2013-006", "", "1", "1"],
          ["20130225", "Turkey F8", "Hard", "S", "L", "532", "", "", "QF", "6-3 3-6 6-1", "3", "Radu Albot", "223", "2", "", "R", "23.2908966461", "", "MDA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-TUR-08A-2013-028", "", "3", "3"],
          ["20130225", "Turkey F8", "Hard", "S", "W", "532", "", "", "R16", "6-4 7-5", "3", "Tuna Altuna", "965", "", "WC", "R", "24.0711841205", "", "TUR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-TUR-08A-2013-023", "", "2", "2"],
          ["20130225", "Turkey F8", "Hard", "S", "W", "532", "", "", "R32", "6-3 6-3", "3", "Zhe Li", "404", "5", "", "R", "26.4339493498", "", "CHN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-TUR-08A-2013-013", "", "1", "1"],
          ["20130211", "Turkey F6", "Hard", "S", "L", "528", "", "", "R16", "5-7 6-2 6-4", "3", "Jordi Samper Montana", "334", "5", "", "U", "22.855578371", "", "ESP", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-TUR-06A-2013-021", "", "2", "2"],
          ["20130211", "Turkey F6", "Hard", "S", "W", "528", "", "", "R32", "6-1 6-2", "3", "Zhe Li", "401", "", "", "R", "26.3956194387", "", "CHN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-TUR-06A-2013-010", "", "1", "1"],
          ["20130204", "Zagreb Q", "Hard", "Q", "L", "532", "", "", "Q1", "6-4 6-4", "3", "Ilija Bozoljac", "379", "", "", "R", "27.5099247091", "193", "SRB", "0", "74", "7", "2", "71", "50", "35", "9", "10", "6", "8", "7", "3", "61", "42", "34", "9", "10", "1", "1", "2", "", "", "0", "2013-2277-011", "", "", ""],
          ["20121210", "Turkey F48", "Hard", "S", "L", "537", "", "", "QF", "0-6 6-4 6-4", "3", "Guillermo Olaso", "396", "5", "", "U", "24.7118412047", "", "ESP", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-TUR-48A-2012-027", "", "3", "3"],
          ["20121210", "Turkey F48", "Hard", "S", "W", "537", "", "", "R16", "6-3 4-6 6-0", "3", "Nico Matic", "834", "", "LL", "R", "20.9418206708", "", "GER", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-TUR-48A-2012-022", "", "2", "2"],
          ["20121210", "Turkey F48", "Hard", "S", "W", "537", "", "", "R32", "6-1 7-5", "3", "Cem Ilkel", "1844", "", "WC", "R", "17.3059548255", "", "TUR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-TUR-48A-2012-011", "", "1", "1"],
          ["20121203", "Turkey F47", "Hard", "S", "L", "543", "", "", "R16", "6-4 6-7(7) 6-2", "3", "Marvin Netuschil", "878", "", "Q", "R", "21.4236824093", "", "GER", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-TUR-47A-2012-024", "", "2", "2"],
          ["20121203", "Turkey F47", "Hard", "S", "W", "543", "", "", "R32", "6-3 6-1", "3", "Tomislav Brkic", "387", "2", "", "R", "22.7378507871", "", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-TUR-47A-2012-016", "", "1", "1"],
          ["20121126", "Turkey F46", "Hard", "S", "L", "545", "", "", "R16", "6-7(5) 7-5 7-6(4)", "3", "Marsel Ilhan", "218", "2", "WC", "R", "25.4620123203", "190", "TUR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-TUR-46A-2012-024", "", "2", "2"],
          ["20121126", "Turkey F46", "Hard", "S", "W", "545", "", "", "R32", "6-4 6-1", "3", "Lorenzo Giustino", "504", "", "", "R", "21.2128678987", "", "ITA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-TUR-46A-2012-015", "", "1", "1"],
          ["20121112", "Greece F7", "Carpet", "S", "W", "638", "", "", "F", "6-4 7-6(3)", "3", "Nikola Cacic", "488", "4", "", "R", "21.9329226557", "", "SRB", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-GRE-07A-2012-031", "", "", ""],
          ["20121112", "Greece F7", "Carpet", "S", "W", "638", "", "", "SF", "4-6 6-1 6-2", "3", "Alexandros Jakupovic", "568", "7", "", "R", "30.9130732375", "", "GRE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-GRE-07A-2012-030", "", "", ""],
          ["20121112", "Greece F7", "Carpet", "S", "W", "638", "", "", "QF", "6-3 7-5", "3", "Viktor Galovic", "425", "3", "", "R", "22.1492128679", "", "ITA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-GRE-07A-2012-027", "", "3", "3"],
          ["20121112", "Greece F7", "Carpet", "S", "W", "638", "", "", "R16", "7-5 7-6(4)", "3", "Jaime Pulgar Garcia", "791", "", "", "U", "23.6057494867", "", "ESP", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-GRE-07A-2012-021", "", "2", "2"],
          ["20121112", "Greece F7", "Carpet", "S", "W", "638", "", "", "R32", "6-4 6-1", "3", "Bastian Trinker", "615", "8", "", "R", "22.507871321", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-GRE-07A-2012-009", "", "1", "1"],
          ["20121105", "Greece F6", "Carpet", "S", "L", "632", "", "", "R32", "7-6(10) 7-5", "3", "Alexandros Jakupovic", "566", "7", "", "R", "30.893908282", "", "GRE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-GRE-06A-2012-013", "", "1", "1"],
          ["20121022", "Croatia F12", "Clay", "S", "L", "626", "", "", "R32", "6-0 7-5", "3", "Jaroslav Pospisil", "448", "", "", "R", "31.6988364134", "", "CZE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-CRO-12A-2012-002", "", "1", "1"],
          ["20121015", "Croatia F11", "Clay", "S", "L", "639", "", "", "R32", "6-4 6-2", "3", "Aldin Setkic", "285", "4", "", "R", "24.8186173854", "193", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-CRO-11A-2012-012", "", "1", "1"],
          ["20121008", "Croatia F10", "Clay", "S", "L", "637", "", "", "QF", "6-2 6-4", "3", "Jaroslav Pospisil", "493", "", "", "R", "31.6605065024", "", "CZE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-CRO-10A-2012-027", "", "3", "3"],
          ["20121008", "Croatia F10", "Clay", "S", "W", "637", "", "", "R16", "2-6 6-1 7-5", "3", "Blaz Rola", "397", "5", "", "L", "22.0095824778", "", "SLO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-CRO-10A-2012-021", "", "2", "2"],
          ["20121008", "Croatia F10", "Clay", "S", "W", "637", "", "", "R32", "6-3 6-4", "3", "Ante Bilic", "", "", "WC", "R", "23.5893223819", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-CRO-10A-2012-010", "", "1", "1"],
          ["20120903", "Serbia F11", "Clay", "S", "L", "723", "6", "", "QF", "7-6(5) 6-0", "3", "Aldin Setkic", "333", "1", "", "R", "24.6844626968", "193", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-SRB-11A-2012-025", "", "3", "3"],
          ["20120903", "Serbia F11", "Clay", "S", "W", "723", "6", "", "R16", "4-6 6-4 7-5", "3", "Filip Veger", "904", "", "", "R", "17.6837782341", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-SRB-11A-2012-018", "", "2", "2"],
          ["20120903", "Serbia F11", "Clay", "S", "W", "723", "6", "", "R32", "7-5 6-2", "3", "Thomas Giraudeau", "1105", "", "", "U", "20.7529089665", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-SRB-11A-2012-004", "", "1", "1"],
          ["20120827", "Croatia F9", "Clay", "S", "L", "723", "7", "", "QF", "6-3 6-4", "3", "Tomislav Brkic", "436", "3", "WC", "R", "22.46954141", "", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-CRO-09A-2012-026", "", "3", "3"],
          ["20120827", "Croatia F9", "Clay", "S", "W", "723", "7", "", "R16", "6-2 6-1", "3", "Michal Milko", "1164", "", "", "L", "27.498973306", "", "SVK", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-CRO-09A-2012-020", "", "2", "2"],
          ["20120827", "Croatia F9", "Clay", "S", "W", "723", "7", "", "R32", "7-6(2) 6-4", "3", "Marko Mijacevic", "1062", "", "", "R", "23.9890485969", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-CRO-09A-2012-008", "", "1", "1"],
          ["20120820", "Croatia F8", "Clay", "S", "L", "721", "8", "", "SF", "6-3 1-6 6-4", "3", "Blaz Rola", "486", "4", "", "L", "21.8754277892", "", "SLO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-CRO-08A-2012-029", "", "", ""],
          ["20120820", "Croatia F8", "Clay", "S", "W", "721", "8", "", "QF", "6-2 6-2", "3", "Aldin Setkic", "331", "1", "", "R", "24.6652977413", "193", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-CRO-08A-2012-025", "", "3", "3"],
          ["20120820", "Croatia F8", "Clay", "S", "W", "721", "8", "", "R16", "6-3 6-2", "3", "Franjo Raspudic", "1152", "", "", "R", "21.7631759069", "", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-CRO-08A-2012-018", "", "2", "2"],
          ["20120820", "Croatia F8", "Clay", "S", "W", "721", "8", "", "R32", "6-3 6-2", "3", "Marko Goles Babic", "", "", "WC", "R", "17.9822039699", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-CRO-08A-2012-004", "", "1", "1"],
          ["20120813", "Croatia F7", "Clay", "S", "L", "732", "7", "", "R32", "6-4 6-2", "3", "Andraz Bedene", "1019", "", "", "R", "23.0718685832", "", "SLO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-CRO-07A-2012-008", "", "1", "1"],
          ["20120806", "Austria F5", "Clay", "S", "L", "797", "", "", "R16", "7-6(5) 6-3", "3", "Marc Rath", "435", "3", "WC", "R", "21.6700889802", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUT-05A-2012-019", "", "2", "2"],
          ["20120806", "Austria F5", "Clay", "S", "W", "797", "", "", "R32", "6-4 6-4", "3", "Daniel Uhlig", "949", "", "", "U", "21.0266940452", "", "GER", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-AUT-05A-2012-006", "", "1", "1"],
          ["20120730", "Serbia F7", "Clay", "S", "L", "789", "", "", "SF", "7-6(3) 6-1", "3", "Aldin Setkic", "408", "4", "", "R", "24.6078028747", "193", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-SRB-07A-2012-029", "", "", ""],
          ["20120730", "Serbia F7", "Clay", "S", "W", "789", "", "", "QF", "6-3 6-7(3) 6-3", "3", "Attila Balazs", "232", "1", "", "R", "23.8384668036", "180", "HUN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-SRB-07A-2012-025", "", "3", "3"],
          ["20120730", "Serbia F7", "Clay", "S", "W", "789", "", "", "R16", "6-3 6-3", "3", "Danilo Petrovic", "461", "5", "", "R", "20.514715948", "", "SRB", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-SRB-07A-2012-018", "", "2", "2"],
          ["20120730", "Serbia F7", "Clay", "S", "W", "789", "", "", "R32", "6-0 6-1", "3", "Dario Maturi", "", "", "WC", "R", "19.9178644764", "", "ITA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-SRB-07A-2012-003", "", "1", "1"],
          ["20120716", "Austria F2", "Clay", "S", "L", "780", "", "", "R32", "7-5 5-2 RET", "3", "Tristan Samuel Weissborn", "684", "", "Q", "L", "20.7282683094", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUT-02A-2012-007", "", "1", "1"],
          ["20120709", "Umag Q", "Clay", "Q", "L", "776", "", "", "Q1", "3-6 7-6(6) 7-5", "3", "Adrian Menendez Maceiras", "189", "4", "", "R", "26.6967830253", "", "ESP", "0", "166", "4", "8", "125", "71", "48", "23", "17", "10", "14", "11", "5", "114", "69", "51", "18", "16", "9", "13", "2", "", "", "", "2012-42-013", "", "", ""],
          ["20120625", "Turkey F25", "Clay", "S", "L", "892", "", "Q", "SF", "6-2 6-3", "3", "Jason Kubler", "325", "2", "", "R", "19.1019849418", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-TUR-25A-2012-030", "", "", ""],
          ["20120625", "Turkey F25", "Clay", "S", "W", "892", "", "Q", "QF", "6-2 7-6(2)", "3", "Thomas Statzberger", "1721", "", "Q", "R", "19.742642026", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-TUR-25A-2012-027", "", "3", "3"],
          ["20120625", "Turkey F25", "Clay", "S", "W", "892", "", "Q", "R16", "7-6(12) 4-1 RET", "3", "Michal Schmid", "474", "4", "", "U", "23.5728952772", "", "CZE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-TUR-25A-2012-022", "", "2", "2"],
          ["20120625", "Turkey F25", "Clay", "S", "W", "892", "", "Q", "R32", "6-3 4-1 RET", "3", "Tuna Altuna", "896", "", "", "R", "23.4004106776", "", "TUR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-TUR-25A-2012-011", "", "1", "1"],
          ["20120618", "Turkey F24", "Clay", "S", "L", "884", "", "Q", "R16", "6-0 7-5", "3", "Yannick Jankovits", "510", "6", "", "R", "25.4483230664", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-TUR-24A-2012-023", "", "2", "2"],
          ["20120618", "Turkey F24", "Clay", "S", "W", "884", "", "Q", "R32", "6-2 6-7(2) 6-4", "3", "Lorenzo Giustino", "597", "", "", "R", "20.772073922", "", "ITA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-TUR-24A-2012-014", "", "1", "1"],
          ["20120528", "Bosnia & Herzegovina F5", "Clay", "S", "L", "1111", "", "Q", "SF", "6-2 6-2", "3", "Norbert Gombos", "423", "5", "", "R", "21.7905544148", "", "SVK", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-BIH-05A-2012-030", "", "", ""],
          ["20120528", "Bosnia & Herzegovina F5", "Clay", "S", "W", "1111", "", "Q", "QF", "4-6 6-3 6-0", "3", "Bjorn Propst", "1105", "", "Q", "R", "24.9801505818", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-BIH-05A-2012-028", "", "3", "3"],
          ["20120528", "Bosnia & Herzegovina F5", "Clay", "S", "W", "1111", "", "Q", "R16", "6-1 6-0", "3", "Peter Nagy", "1292", "", "Q", "U", "20.1971252567", "", "HUN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-BIH-05A-2012-024", "", "2", "2"],
          ["20120528", "Bosnia & Herzegovina F5", "Clay", "S", "W", "1111", "", "Q", "R32", "6-2 6-3", "3", "Jozef Kovalik", "387", "2", "", "R", "19.5619438741", "", "SVK", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-BIH-05A-2012-016", "", "1", "1"],
          ["20120521", "Bosnia & Herzegovina F4", "Clay", "S", "L", "1102", "", "Q", "R32", "6-3 6-4", "3", "Levente Godry", "1079", "", "Q", "R", "20.0930869268", "", "HUN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-BIH-04A-2012-007", "", "1", "1"],
          ["20120514", "Bosnia & Herzegovina F3", "Clay", "S", "L", "1101", "", "Q", "R32", "6-4 6-4", "3", "Nikola Mektic", "377", "4", "", "R", "23.3867214237", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-BIH-03A-2012-005", "", "1", "1"],
          ["20120507", "Bosnia & Herzegovina F2", "Clay", "S", "L", "1099", "", "Q", "R32", "4-6 7-6(5) 6-2", "3", "Michal Schmid", "436", "3", "", "U", "23.4387405886", "", "CZE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-BIH-02A-2012-012", "", "1", "1"],
          ["20120402", "Croatia F6", "Clay", "S", "L", "1083", "", "WC", "R32", "6-3 6-4", "3", "Alexander Rumyantsev", "523", "", "", "R", "19.627652293", "", "RUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-CRO-06A-2012-007", "", "1", "1"],
          ["20120326", "Croatia F5", "Clay", "S", "L", "1079", "", "WC", "R32", "3-6 6-2 6-1", "3", "Taro Daniel", "441", "", "", "R", "19.1403148528", "", "JPN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-CRO-05A-2012-014", "", "1", "1"],
          ["20120319", "Israel F5", "Hard", "S", "L", "1079", "", "Q", "R32", "6-3 6-3", "3", "Bar Tzuf Botzer", "1711", "", "WC", "R", "18.0479123888", "", "ISR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-ISR-05A-2012-007", "", "1", "1"],
          ["20120312", "Israel F4", "Hard", "S", "L", "1072", "", "Q", "R32", "7-6(4) 7-5", "3", "Marek Semjan", "1505", "", "", "U", "24.3258042437", "", "SVK", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-ISR-04A-2012-015", "", "1", "1"],
          ["20120220", "Croatia F2", "Hard", "S", "L", "1323", "", "WC", "R32", "6-0 6-2", "3", "Mirza Basic", "278", "1", "Q", "R", "20.6105407255", "", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-CRO-02A-2012-001", "", "1", "1"],
          ["20120213", "Croatia F1", "Hard", "S", "L", "1326", "", "WC", "QF", "6-2 3-6 6-4", "3", "Jules Marie", "810", "", "Q", "R", "20.4517453799", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-CRO-01A-2012-027", "", "3", "3"],
          ["20120213", "Croatia F1", "Hard", "S", "W", "1326", "", "WC", "R16", "6-4 6-4", "3", "Josko Topic", "802", "", "Q", "U", "28.1834360027", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-CRO-01A-2012-022", "", "2", "2"],
          ["20120213", "Croatia F1", "Hard", "S", "W", "1326", "", "WC", "R32", "6-1 6-2", "3", "Ivo Klec", "430", "", "", "R", "31.2087611225", "183", "SVK", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-CRO-01A-2012-011", "", "1", "1"],
          ["20120123", "Israel F3", "Hard", "S", "L", "1508", "", "Q", "R16", "6-3 6-2", "3", "Luca Vanni", "385", "5", "", "R", "26.6173853525", "", "ITA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-ISR-03A-2012-018", "", "2", "2"],
          ["20120123", "Israel F3", "Hard", "S", "W", "1508", "", "Q", "R32", "6-7(6) 6-1 6-4", "3", "Jack Carpenter", "1118", "", "Q", "U", "19.7645448323", "", "GBR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-ISR-03A-2012-003", "", "1", "1"],
          ["20111024", "Croatia F14", "Clay", "S", "L", "1945", "", "WC", "R16", "6-2 6-3", "3", "Marc Rath", "538", "", "", "R", "20.8843258042", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-CRO-14A-2011-019", "", "2", "2"],
          ["20111024", "Croatia F14", "Clay", "S", "W", "1945", "", "WC", "R32", "6-4 7-6(3)", "3", "Max Raditschnigg", "585", "", "", "L", "28.4681724846", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-CRO-14A-2011-006", "", "1", "1"],
          ["20111017", "Croatia F13", "Clay", "S", "L", "1948", "", "WC", "R32", "6-3 6-4", "3", "Miljan Zekic", "269", "4", "", "U", "23.2635181383", "", "SRB", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2011-M-FU-CRO-13A-2011-012", "", "1", "1"],
          ["20111010", "Croatia F12", "Clay", "S", "L", "1936", "", "WC", "R32", "6-4 6-2", "3", "Javier Marti", "188", "1", "", "R", "19.7453798768", "", "ESP", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "", "", "", "2011-M-FU-CRO-12A-2011-001", "", "1", "1"],
          ["20110926", "Croatia F10", "Clay", "S", "L", "", "", "WC", "R32", "6-3 6-3", "3", "Dusan Lajovic", "271", "4", "", "R", "21.2402464066", "180", "SRB", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "", "", "", "2011-M-FU-CRO-10A-2011-012", "", "1", "1"],
          ["20110919", "Croatia F9", "Clay", "S", "L", "", "", "WC", "R16", "6-4 6-4", "3", "Kevin Krawietz", "413", "3", "", "R", "19.65229295", "190", "GER", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-CRO-09A-2011-019", "", "2", "2"],
          ["20110919", "Croatia F9", "Clay", "S", "W", "", "", "WC", "R32", "6-4 6-0", "3", "Juan Lizariturry", "833", "", "", "U", "20.4161533196", "", "ESP", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2011-M-FU-CRO-09A-2011-006", "", "1", "1"],
          ["20110822", "Croatia F7", "Clay", "S", "L", "", "", "WC", "R32", "6-1 6-1", "3", "Tomislav Brkic", "558", "6", "", "R", "21.453798768", "", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-CRO-07A-2011-008", "", "1", "1"],
          ["20110815", "Croatia F6", "Clay", "S", "L", "", "", "WC", "R32", "6-3 2-6 6-4", "3", "Josko Topic", "756", "7", "", "U", "27.6851471595", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2011-M-FU-CRO-06A-2011-013", "", "1", "1"],
          ["20110725", "Umag", "Clay", "A", "L", "", "", "WC", "R32", "6-4 6-2", "3", "Gianluca Naso", "260", "", "Q", "R", "24.5475701574", "", "ITA", "0", "76", "3", "0", "68", "41", "25", "12", "9", "5", "8", "4", "4", "52", "22", "22", "16", "9", "4", "4", "2", "", "", "", "2011-439-011", "", "1", "1"],
          ["20110404", "Croatia F5", "Clay", "S", "L", "", "", "WC", "R32", "6-1 7-5", "3", "Kristijan Mesaros", "287", "3", "", "R", "22.7542778919", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-CRO-05A-2011-005", "", "1", "1"],
          ["20110328", "Croatia F4", "Clay", "S", "L", "", "", "WC", "R32", "6-4 3-6 6-3", "3", "Michal Pazicky", "654", "", "", "R", "23.2689938398", "", "SVK", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-CRO-04A-2011-003", "", "1", "1"],
          ["20110221", "Croatia F2", "Hard", "S", "L", "", "", "WC", "R32", "6-2 7-5", "3", "Mate Pavic", "1439", "", "WC", "L", "17.6344969199", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-CRO-02A-2011-014", "", "1", "1"],
          ["20110214", "Croatia F1", "Hard", "S", "L", "", "", "WC", "R32", "6-1 7-6(5)", "3", "Mirza Basic", "463", "", "Q", "R", "19.5947980835", "", "BIH", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-CRO-01A-2011-011", "", "1", "1"],
          ["20101025", "Croatia F8", "Clay", "S", "L", "", "", "WC", "R32", "1-6 6-3 RET", "3", "Alessandro Giannessi", "568", "", "", "L", "20.4052019165", "183", "ITA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2010-M-FU-CRO-08A-2010-002", "", "1", "1"],
          ["20100816", "Croatia F4", "Clay", "S", "L", "", "", "WC", "R32", "6-1 7-6(3)", "3", "Anze Kapun", "", "", "Q", "R", "25.7905544148", "", "SLO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2010-M-FU-CRO-04A-2010-015", "", "1", "1"]
          ];


var fourspaces = "\u00a0\u00a0\u00a0\u00a0";

var round_dict = { "R16": 9,
                   "W": 14,
                   "F": 13,
                   "RR": 8,
                   "R64": 6,
                   "R128": 5,
                   "QF": 10,
                   "SF": 11,
                   "R32": 7,
                   'Q1': 1,
                   'Q2': 2,
                   'Q3': 3,
                   'Q4': 4,
                   "": 0,
                   "BR": 12
                  };

// add parser through the tablesorter addParser method 
$.tablesorter.addParser({ 
    // set a unique id 
    id: 'rounds', 
    is: function(s) { 
        // return false so this parser is not auto detected 
        return false; 
    }, 
    format: function(s) { 
        // format your data for normalization 
        return round_dict[s]; 
    }, 
    // set type, either numeric or text 
    type: 'numeric'
});

$.tablesorter.addParser({ 
    id: 'roundsDesc', 
    is: function(s) {  
        return false; 
    }, 
    format: function(s) {  
        return 100 - round_dict[s]; 
    }, 
    type: 'numeric'
});

$.tablesorter.addParser({  
    id: 'scores', 
    is: function(s) {return false;}, 
    format: function(s) {
        if (s == 'W/O') {return 0;}
        if (s.slice(-3) == 'RET') {s = s.slice(0, -4);}        
        if (s == 'UNR') {return 2000;}
        else {return s;}
    },  
    type: 'numeric'
});

$.tablesorter.addParser({  
    id: 'ranks', 
    is: function(s) {return false;}, 
    format: function(s) { 
        if (s == 'UNR') {return 3000;}
        else if (s.indexOf('/') !== -1) {
            var dranks = s.split(/\//);
            if (dranks[0] == "UNR") {var rank1 = 3000;}
            else {rank1 = parseInt(dranks[0]);}
            if (dranks[1] == "UNR") {var rank2 = 3000;}
            else {rank2 = parseInt(dranks[1]);}
            return rank1 + rank2;
            }
        else {return s;} 
    },  
    type: 'numeric'
});

$.tablesorter.addParser({  
    id: 'ascNum', 
    is: function(s) {return false;}, 
    format: function(s) { 
        if (s == '' || s == '-') {return 1000;} 
        else if (s.indexOf("%") != -1) {return parseFloat(s.slice(0,-1));}
        else if (s.indexOf(":") != -1) {
            var hm = s.split(':');
            var minutes = (parseInt(hm[0])*60) + parseInt(hm[1]);
            return minutes;
            }
        else {return s;} 
    },  
    type: 'numeric'
});

$.tablesorter.addParser({  
    id: 'descNum', 
    is: function(s) {return false;}, 
    format: function(s) { 
        if (s == '' || s == '-') {return 1000;} 
        else if (s.indexOf("%") != -1) {return 1000 - parseFloat(s.slice(0,-1));}
        else if (s.indexOf(":") != -1) {
            var hm = s.split(':');
            var minutes = (parseInt(hm[0])*60) + parseInt(hm[1]);
            return 1000 - minutes;
            }        
        else {return 1000 - s;} 
    },  
    type: 'numeric'
});

$.tablesorter.addParser({  
    id: 'dates', 
    is: function(s) {return false;}, 
    format: function(s) { 
        // format your data for normalization
        var yyyy = s.slice(-4);
        var mm = rmonths[s.slice(-8, -5)];
        var day = s.slice(0, -9);
        if (day.length == 1) {
            var dd = '0' + day;
            }
        else {
            var dd = day;
            }
        return yyyy + mm + dd; 
    },  
    type: 'numeric'
}); 

$.tablesorter.addParser({ 
    id: 'datesDesc', 
    is: function(s) {return false;}, 
    format: function(s) { 
        var yyyy = s.slice(-4);
        var mm = rmonths[s.slice(-8, -5)];
        var day = s.slice(0, -9);
        if (day.length == 1) {
            var dd = '0' + day;
            }
        else {
            var dd = day;
            }
        var ymd = yyyy + mm + dd; 
        return 100000000 - parseInt(ymd);
    },  
    type: 'numeric'
});
 
function playeratt(pname, s, q, cc, lk) {
    // lk = 1 or 0
    var precede = ''
    if (s != '') {
        precede = '(' + s;
        if (q != '') {
            precede = precede + '/' + q;
            }
        precede = precede + ')';
        }
    else if (q != '') {
        precede = '(' + q + ')';
        }
    //var nlink = '<a href="http://www.tennisabstract.com/cgi-bin/player.cgi?p=' + pname.replace(/ /g, '') + '">' + pname + '</a>'
    if (cc == '') {var country = '';}
    else {var country = ' [' + cc + ']';}
    if (lk == 1) {return precede + nlink + country;}
    else {return precede + pname + country;}
    
    };

function alignRound(num, dec, perc) {
    if (perc == 1) {
        num = num*100;
        }
    var intrate = Math.round((num)*Math.pow(10, dec))/Math.pow(10, dec);
    var extra = intrate + Math.pow(10, -1*(dec+1));
    var strex = String(extra);
    var indexdot = strex.indexOf('.');
    var done;
    if (perc == 1) {done = strex.slice(0, (indexdot+dec+1)) + '%';}
    else {done = strex.slice(0, (indexdot+dec+1));}
    if (done[0] == 'N' || done[0] == '%') {return '-';}
    else if (done[0] == 'I') {return '-';} // infinity
    else if (dec == 0) {return done.slice(0, -2) + done.slice(-1);}
    else {return done;}
    };
                  
function make(tag, attr, cont) {
    if (arguments.length == 2 && (attr instanceof Array || typeof attr == "string")) {
        cont = attr;
        attributes = null;
        }
    var open = "<" + tag;
    var close = "</" + tag + ">";
    if (attr) {
	for(var name in attr) {
            attx = " " + name + '="' + attr[name] + '"';
	    open = open.concat(attx);
            }
        }
    open = open.concat(">");
    if (cont instanceof Array) {
	var content = cont.join("");
	}
    else {
	var content = cont;
	} 
    var elem = open + content + close;
    return elem;
    }

function sortRev(a,b) {return b - a;}

url2filter = {'K': 'hand',
              'E': 'round',
              'I': 'rank',
              'L': 'age',
              'C': 'level',
              'B': 'surface',
              'A': 'span', 
              'N': 'country', 
              'D': 'tourney', 
              'G': 'asrank',
              'H': 'entry',
              'J': 'oentry',
              'M': 'height',
              'F': 'results',
              'P': 'sets',
              'Q': 'scores',
              'T': 'stats',
              'X': 'extras',
              'U': 'minimum',
              'R': 'crank',
              'Y': 'minyears',
              's': 'sort',
              'r': 'return',
              'v': 'reverse',
              'o': 'overall',
              'w': 'raw',
              'z': 'hands',
              'S': 'prank',
              'V': 'phand'
              };

filter2url = {'hand': 'K',
              'round': 'E',
              'rank': 'I',
              'age': 'L',
              'level': 'C',
              'surface': 'B',
              'span': 'A', 
              'country': 'N', 
              'tourney': 'D', 
              'asrank': 'G',
              'entry': 'H',
              'oentry': 'J',
              'height': 'M',
              'results': 'F',
              'sets': 'P',
              'scores': 'Q',
              'stats': 'T',
              'extras': 'X',
              'minimum': 'U',
              'crank': 'R',
              'minyears': 'Y',
              'hands': 'Z',
              'prank': 'S',
              'phand': 'V'
              };

var filterlist = ['span', 'minyears', 'minimum', 'surface', 'level', 'tourney', 'round', 'results', 'sets', 'scores', 'asrank', 'entry',
              'rank', 'crank', 'oentry', 'hand', 'hands', 'age', 'height', 'country', 'phand', 'prank', 'stats']; //, 'extras'];

var filteropts = {'hand': ['vs Hand', 'All', 'Right', 'Left', 'One-hand BH', 'Two-hand BH'],
                  'phand': ['Partner Hand', 'All', 'Right', 'Left'],
                  'hands': ['vs Hands', 'All', 'Right/Right', 'Right/Left', 'Left/Left'],
                  'round': ['Round', 'All', 'Final', 'Semis', 'Quarters', 'R16', 'R32', 'R64', 'R128', "First Round", "Second Round", "Third Round", "First Match", "Second Match", "Third Match"],
                  'rank': ['vs Rank', 'All', 'Top 5', 'Top 10', 'Top 20', 'Top 50', 'Top 100', '11+', '21+', '51+', '101+', 'Higher', 'Lower'], 
                  'prank': ['Partner Rank', 'All', 'Top 5', 'Top 10', 'Top 20', 'Top 50', 'Top 100', '11+', '21+', '51+', '101+', 'Higher', 'Lower'], 
                  'age': ['vs Age', 'All', 'Younger', 'Older', 'Under 21', 'Under 23', '28 & Over', '30 & Over'],
                  'level': ['Level', 'All', 'Grand Slams', 'Masters', 'All ATP', 'Qualifying', 'Challengers', 'CH Qualies', 'Futures', 'Davis Cup', 'All Pro', 'Juniors'],
                  'surface': ['Surface', 'All', 'Hard', 'Clay', 'Grass', 'Carpet'], // add indoor!
                  'span': ychoices, 
                  'country': cchoices, 
                  'tourney': tchoices, 
                  'asrank': rchoices,
                  'entry': ['as Entry', 'All', 'Seeded', 'Unseeded', 'Qualifier', 'Wild Card'],
                  'oentry': ['vs Entry', 'All', 'Seeded', 'Unseeded', 'Qualifier', 'Wild Card'],
                  'height': ['vs Height', 'All', 'Shorter', 'Taller', "Under 5'10", "Under 6'0", "Over 6'2", "Over 6'4"],
                  'results': ['Results', 'All', 'Wins', 'Losses', 'Completed', 'W by RET', 'L by RET', 'W by W/O', 'L by W/O', 'Won 1st Set', 'Lost 1st Set', 'Won Sets 1&2', 'Lost Sets 1&2', 'Split 1&2', 'Up 2-1 Sets', 'Down 1\u20112 Sets'],
                  'scores': ['Scores', 'All', 'All tiebreaks', 'TB won', 'TB lost', 'Deciding TB', 'All 7-5', '7-5 won', '7-5 lost', 'All bagels', '6-0 won', '6-0 lost', 'All 6-1', '6-1 won', '6-1 lost'],
                  'sets': ['Sets', 'All', 'Straights', 'Deciders', 'All Best of 5', '3 Sets (of 5)', '4-Setters', '5-Setters', 'All Best of 3', '2-Setters', '3 Sets (of 3)'],
                  'stats': ['Stats', 'All'],
                  'extras': ['Extras', 'All', 'Charting', 'Pt-by-Pt', 'Video'],
                  'minimum': ['Min Matches', 'All', '2', '3', '4', '5', '6', '7', '8', '9', '10', '12', '15'],
                  'minyears': ['Min Years', 'All', '2', '3', '4', '5', '6', '7', '8', '9', '10'],
                  'crank': ['vs Curr Rank', 'All', 'Top 10', 'Top 20', 'Top 50', 'Top 100', 'Active', 'Inactive']
                  };

var rmonths = {'Jan': '01',
                'Feb': '02',
                'Mar': '03',
                'Apr': '04',
                'May': '05',
                'Jun': '06',
                'Jul': '07',
                'Aug': '08',
                'Sep': '09',
                'Oct': '10',
                'Nov': '11',
                'Dec': '12'
                };

var months = {'01': 'Jan',
                '02': 'Feb',
                '03': 'Mar',
                '04': 'Apr',
                '05': 'May',
                '06': 'Jun',
                '07': 'Jul',
                '08': 'Aug',
                '09': 'Sep',
                '10': 'Oct',
                '11': 'Nov',
                '12': 'Dec'
                };

var titleTips = {'DR': 'Dominance Ratio: % of return points won\ndivided by % of serve points lost.',
                 'TPW': 'Total points won',
                 'RPW': 'Return points won',
                 'vA%': 'Ace rate against',
                 'v1st%': '1st serve return points won',
                 'v2nd%': '2nd serve return points won',
                 'BPCnv': 'Break point opportunities converted',
                 'BPSvd': 'Break point opportunities saved',
                 'A%': 'Ace rate',
                 'Ace%': 'Ace rate',
                 'DF%': 'Double fault rate',
                 '1st In': 'First serve percentage',
                 '1st%': 'First serve points won',
                 '2nd%': 'Second serve points won',
                 'Rk': "Player's ATP Ranking when the tournament began",
                 'Ranks': "Player's and partner's ATP Rankings when the tournament began",
                 'vRk': "Opponent's ATP Ranking when the tournament began",
                 'vRanks': "Opponents' ATP Rankings when the tournament began",
                 'TP': 'Total Points',
                 'DFs': 'Double faults',
                 'SP': 'Service points',
                 '1SP': '1st serve points',
                 '2SP': '2nd serve points',
                 'vA': 'Opponent aces',
                 'SPW': 'Service points won',
                 'BPSvd%': 'Percentage of break points saved',
                 'BPCnv%': 'Percentage of break points converted',
                 'MS': 'Number of H2H matches with stats\nincluded in the totals to the right',
                 'M': 'Matches played',
                 'Yrs': 'Number of years entered'
                 };

var hdrsServe = ['Date', 'Tournament', 'Surface', 'Rd', 'Rk', 'vRk', '', 'Score', 'More', 'DR', 'A%', 'DF%', '1stIn', '1st%', '2nd%', 'BPSvd', 'Time'];
var hdrsReturn = ['Date', 'Tournament', 'Surface', 'Rd', 'Rk', 'vRk', '', 'Score', 'More', 'DR', 'TPW', 'RPW', 'vA%', 'v1st%', 'v2nd%', 'BPCnv', 'Time'];
var hdrsRaw = ['Date', 'Tournament', 'Surface', 'Rd', 'Rk', 'vRk', '', 'Score', 'More', 'TP', 'Aces', 'DFs', 'SP', '1SP', '2SP', 'vA', 'Time'];

var hdrsDoubles = ['Date', 'Tournament', 'Surface', 'Rd', 'Ranks', 'vRanks', '', 'Score', 'DR', 'Time'];
var hdrsDoublesServe = ['Date', 'Tournament', 'Surface', 'Rd', '', 'Score', 'DR', 'A%', 'DF%', '1stIn', '1st%', '2nd%', 'BPSvd', 'Time'];
var hdrsDoublesReturn = ['Date', 'Tournament', 'Surface', 'Rd', '', 'Score', 'DR', 'TPW', 'RPW', 'vA%', 'v1st%', 'v2nd%', 'BPCnv', 'Time'];
var hdrsDoublesRaw = ['Date', 'Tournament', 'Surface', 'Rd', '', 'Score', 'TP', 'Aces', 'DFs', 'SP', '1SP', '2SP', 'vA', 'Time'];

var hdrsHead = ['H2Hs', 'Opponent', 'W', 'L', 'Win%', 'TB', 'W', 'L', 'TB%', 'First Match', 'Last Match', 'MS', 
                'DR', 'A%', 'DF%', '1stIn', '1st%', '2nd%', 'SPW', 'RPW', 'BPSvd%', 'BPCnv%'];
var hdrsEvents = ['Yrs', 'Event', 'Surface', 'M', 'W', 'L', 'Win%', 'TB', 'W', 'L', 'TB%', 'First', 'Last', 'Best', 'MS', 
                'DR', 'A%', 'DF%', '1stIn', '1st%', '2nd%', 'SPW', 'RPW', 'BPSvd%', 'BPCnv%'];                

var hdict = {'Left': 'L',
             'Right': 'R'
             };

var hdict2 = {'L': 'Left',
              'R': 'Right',
              '': 'Unknown'
             };
             
var levdict = {'Grand Slams': 'G',
               'Masters': 'M',
               'Challengers': 'C',
               'Qualifying': 'Q',
               'Davis Cup': 'D',
               'Juniors': 'J',
               'Futures': 'S'
               }

var levdict2 = {'G': 'Grand Slams',
               'M': 'Masters',
               //'C': 'Challengers',
               'Q': 'Qualifying',
               'D': 'Davis Cup',
               'J': 'Juniors',
               'S': 'Futures'
               }

var rddict = {'Final': 'F',
              'Semis': 'SF',
              'Quarters': 'QF',
              'R16': 'R16',
              'R32': 'R32',
              'R64': 'R64',
              'R128': 'R128',
              'Other': 'RR'
              }

var rddict2 = {'F': 'Final',
              'SF': 'Semis',
              'QF': 'Quarters',
              'R16': 'R16',
              'R32': 'R32',
              'R64': 'R64',
              'R128': 'R128',
              'RR': 'Other'
              }                            

function filterDict(fid, match, mults) {
    if (!$('#tabDubs').hasClass("tablink")) {var doubles = 1;}
    else {doubles = 0;}
    if (fid == 'hand') {
        if (hdict2[match.ohand] in mults) {return 1;}
        else if (match.obackhand == '1' && 'One-hand BH' in mults) {return 1;}
        else if (match.obackhand == '2' && 'Two-hand BH' in mults) {return 1;}
        else {return 0;}
        }
    if (fid == 'phand') {
        if (hdict2[match.phand] in mults) {return 1;}
        else {return 0;}
        }
    else if (fid == 'hands') {
        if ('Right/Right' in mults) {
            if (match.ohand == 'R' && match.o2hand == 'R') {return 1;}
            }
        if ('Left/Left' in mults) {
            if (match.ohand == 'L' && match.o2hand == 'L') {return 1;}
            }
        if ('Right/Left' in mults) {
            var hh = match.ohand + match.o2hand;
            if (hh == 'RL' || hh == 'LR') {return 1;}
            }
        return 0;
        }
    else if (fid == 'extras') { 
        if ('Charting' in mults && match.chartlink != "") {return 1;}
        else if ('Pt-by-Pt' in mults && match.pslink != "") {return 1;}
        else if ('Video' in mults && match.vidlink != "") {return 1;}
        else {return 0;}
        }
    else if (fid == 'age') {
        if ('Younger' in mults && (parseInt(match.obday)) > dob) {return 1;}
        else if ('Older' in mults && (parseInt(match.obday) < dob)) {return 1;}
        else if ('Under 21' in mults && (parseInt(match.date) - parseInt(match.obday)) < 210000) {return 1;}
        else if ('Under 23' in mults && (parseInt(match.date) - parseInt(match.obday)) < 230000) {return 1;}
        else if ('28 & Over' in mults && (parseInt(match.date) - parseInt(match.obday)) > 280000) {return 1;}
        else if ('30 & Over' in mults && (parseInt(match.date) - parseInt(match.obday)) > 300000) {return 1;}
        else {return 0;}
        }
    else if (fid == 'rank') {
        if (match.orank == 'UNR') {match.orank = 2000;}
        if (match.rank == 'UNR') {match.rank = 2000;}
        if (doubles == 1) {
            if (match.o2rank == 'UNR') {match.o2rank = 2000;}
            var vsrank = (parseInt(match.orank) + parseInt(match.o2rank))/2;
            if (match.prank == 'UNR') {match.prank = 2000;}
            var asrank = (parseInt(match.rank) + parseInt(match.prank))/2;
            }
        else {
            vsrank = parseInt(match.orank);
            asrank = parseInt(match.rank);
            }        
        if ('Top 5' in mults && vsrank < 6) {return 1;}
        else if ('Top 10' in mults && vsrank < 11) {return 1;}
        else if ('Top 20' in mults && vsrank < 21) {return 1;}
        else if ('Top 50' in mults && vsrank < 51) {return 1;}
        else if ('Top 100' in mults && vsrank < 101) {return 1;}
        else if ('11+' in mults && vsrank > 10) {return 1;}
        else if ('21+' in mults && vsrank > 20) {return 1;}
        else if ('51+' in mults && vsrank > 50) {return 1;}
        else if ('101+' in mults && vsrank > 100) {return 1;}
        else if ('Higher' in mults && (vsrank < asrank)) {return 1;}
        else if ('Lower' in mults && (vsrank > asrank)) {return 1;}
        else if ('Custom' in mults) {
            if (vsrank >= lowrank && vsrank <= highrank) {return 1;}
            return 0;
            }
        else {return 0;}
        }
    else if (fid == 'prank') {
        if (match.orank == 'UNR') {match.orank = 2000;}
        if (match.rank == 'UNR') {match.rank = 2000;}
        var vsrank = parseInt(match.prank);  // misleading variable name; partner rank
        var asrank = parseInt(match.rank);        // as 'vsrank'
        if ('Top 5' in mults && vsrank < 6) {return 1;}
        else if ('Top 10' in mults && vsrank < 11) {return 1;}
        else if ('Top 20' in mults && vsrank < 21) {return 1;}
        else if ('Top 50' in mults && vsrank < 51) {return 1;}
        else if ('Top 100' in mults && vsrank < 101) {return 1;}
        else if ('11+' in mults && vsrank > 10) {return 1;}
        else if ('21+' in mults && vsrank > 20) {return 1;}
        else if ('51+' in mults && vsrank > 50) {return 1;}
        else if ('101+' in mults && vsrank > 100) {return 1;}
        else if ('Higher' in mults && (vsrank < asrank)) {return 1;}
        else if ('Lower' in mults && (vsrank > asrank)) {return 1;}
        else if ('Custom' in mults) {
            if (vsrank >= lowrank && vsrank <= highrank) {return 1;}
            return 0;
            }
        else {return 0;}
        }
    else if (fid == 'crank') {
        if (!(match.opp in currRank)) {
            if ('Inactive' in mults) {return 1;}
            else {return 0;} // disallows, say, 'Retired' + 'Top 10' -- not strictly correct    
            }  
        else if ('Top 10' in mults && parseInt(currRank[match.opp]) < 11) {return 1;}
        else if ('Top 20' in mults && parseInt(currRank[match.opp]) < 21) {return 1;}
        else if ('Top 50' in mults && parseInt(currRank[match.opp]) < 51) {return 1;}
        else if ('Top 100' in mults && parseInt(currRank[match.opp]) < 101) {return 1;}
        else if ('Active' in mults) {return 1;}
        else {return 0;}
        }        
    else if (fid == 'asrank') {
        if (match.rank == 'UNR') {match.rank = 2000;}
        if ('Number 1' in mults&& parseInt(match.rank) <= 1) {return 1;}
        if ('Top 5' in mults && parseInt(match.rank) <= 5) {return 1;}
        if ('Top 10' in mults && parseInt(match.rank) <= 10) {return 1;}
        else if ('Top 20' in mults && parseInt(match.rank) <= 20) {return 1;}
        else if ('Top 50' in mults && parseInt(match.rank) <= 50) {return 1;}
        else if ('Top 100' in mults && parseInt(match.rank) <= 100) {return 1;}
        else if ('Top 200' in mults && parseInt(match.rank) <= 200) {return 1;}
        else if ('2+' in mults && parseInt(match.rank) >= 2) {return 1;}
        else if ('6+' in mults && parseInt(match.rank) >= 6) {return 1;}
        else if ('11+' in mults && parseInt(match.rank) >= 11) {return 1;}
        else if ('21+' in mults && parseInt(match.rank) >= 21) {return 1;}
        else if ('51+' in mults && parseInt(match.rank) >= 51) {return 1;}
        else if ('101+' in mults && parseInt(match.rank) >= 101) {return 1;}
        else if ('201+' in mults && parseInt(match.rank) >= 201) {return 1;}
        else if ('Custom' in mults) {
            if (parseInt(match.rank) >= lowrank && parseInt(match.rank) <= highrank) {return 1;}
            return 0;
            }
        else {return 0;}
        }
    else if (fid == 'level') {
        if ('All ATP' in mults) {
            if (match.level == 'Q' || match.level == 'C') {}
            else if (match.level == 'J' || match.level == 'S') {}
            else if (match.level == '15' || match.level == '25') {}
            else if (match.round == 'Q1' || match.round == 'Q2') {} // redundant, but current week
            else if (match.round == 'Q3' || match.round == 'Q4') {} // qualies 'level' aren't correctly labeled
            else {return 1;} 
            }
        if ('All Pro' in mults) {
            if (match.level == 'J') {}
            else {return 1;}
            }
        if ('Challengers' in mults) {
            if (match.level != 'C') {}
            else if (match.round == 'Q1' || match.round == 'Q2') {} // redundant, but current week
            else if (match.round == 'Q3' || match.round == 'Q4') {} // qualies 'level' aren't correctly labeled
            else {return 1;} 
            }
        if ('CH Qualies' in mults) {
            if (match.level != 'C') {}
            else if (match.round.slice(0,1) == 'R' || match.round == 'QF') {} // redundant, but current week
            else if (match.round == 'SF' || match.round == 'F') {} // qualies 'level' aren't correctly labeled
            else {return 1;} 
            }
        if (levdict2[match.level] in mults) {return 1;}
        else {return 0;}
        }
    else if (fid == 'round') {
        if (rddict2[match.round] in mults) {return 1;}
        if ('First Round' in mults && parseInt(match.roundnum) == 1) {return 1;}
        if ('Second Round' in mults && parseInt(match.roundnum) == 2) {return 1;}
        if ('Third Round' in mults && parseInt(match.roundnum) == 3) {return 1;}
        if ('First Match' in mults && parseInt(match.matchnum) == 1) {return 1;}
        if ('Second Match' in mults && parseInt(match.matchnum) == 2) {return 1;}
        if ('Third Match' in mults && parseInt(match.matchnum) == 3) {return 1;}
        else {return 0;}
        }
    else if (fid == 'span') {
        if ('Career' in mults) {return 1;}
        else if ('Last 52' in mults) {
            var keyday;
            if (doubles == 1) {
                if (active_dubs == 1) {keyday = today;}
                else {keyday = lastdate_dubs;}
                }
            else {
                if (active == 1) {keyday = today;}
                else {keyday = lastdate;}
                }
            if (parseInt(match.date) < (keyday-10000)) {}
            //else if (parseInt(match.date) > keyday) {}
            else {return 1;}
            }
        if ('Custom' in mults) {
            if (parseInt(match.date) >= startdate && parseInt(match.date) <= enddate) {return 1;}
            return 0;
            }
        var yr = match.date.slice(0,4);
        var mmdd = match.date.slice(4);
        var syr;
        if (parseInt(mmdd) > 1226) {
            syr = (parseInt(yr) + 1) + '';
            }
        else {syr = yr;}
        if (syr in mults) {return 1;}
        else {return 0;}
        }
    else if (fid == 'entry') {  // -1 because entry can be '' for seeds
        if ('Qualifier' in mults && (match.entry == 'Q' || match.entry == 'LL')) {return 1;}
        else if ('Wild Card' in mults && match.entry == 'WC') {return 1;}
        else if ('Seeded' in mults && match.seed.length > 0) {return 1;}
        else if (match.level == 'F' || match.level == 'D') {return 0;}
        else if ('Unseeded' in mults && match.seed.length == 0) {return 1;}
        else {return 0;}
        }
    else if (fid == 'oentry') {  // -1 because entry can be '' for seeds
        if ('Qualifier' in mults && (match.oentry == 'Q' || match.oentry == 'LL')) {return 1;}
        else if ('Wild Card' in mults && match.oentry == 'WC') {return 1;}
        else if ('Seeded' in mults && match.oseed.length > 0) {return 1;}
        else if (match.level == 'F' || match.level == 'D') {return 0;}
        else if ('Unseeded' in mults && match.oseed.length == 0) {return 1;}
        else {return 0;}
        }
    else if (fid == 'height') {  
        if ('Shorter' in mults && parseInt(match.oht) < ht) {return 1;}
        else if ('Taller' in mults && parseInt(match.oht) > ht) {return 1;}
        else if ("Under 5'10" in mults && parseInt(match.oht) < 178) {return 1;}
        else if ("Under 6'0" in mults && parseInt(match.oht) < 183) {return 1;}
        else if ("Over 6'2" in mults && parseInt(match.oht) > 188) {return 1;}
        else if ("Over 6'4" in mults && parseInt(match.oht) > 193) {return 1;}
        else {return 0;}
        }
    else if (fid == 'sets') {
        if (match.score == '') {return 0;}
        if (match.score == 'W/O') {return 0;}
        if ('All Best of 3' in mults && (parseInt(match.max) == 3)) {return 1;}
        else if ('All Best of 5' in mults && (parseInt(match.max) == 5)) {return 1;}
        if ('Straights' in mults || 'Deciders' in mults) {
            //if (match.score == 'W/O') {return 0;} // only because later filters could not possibly include this
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if ('Straights' in mults && (match.max/nsets >= 1.4)) {return 1;}
            else if ('Deciders' in mults && (parseInt(match.max) == nsets)) {return 1;}
            }
        if ('5-Setters' in mults && (parseInt(match.max) == 5)) {
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if (nsets == 5) {return 1;}
            }
        if ('4-Setters' in mults && (parseInt(match.max) == 5)) {
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if (nsets == 4) {return 1;}
            }
        if ('3 Sets (of 5)' in mults && (parseInt(match.max) == 5)) {
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if (nsets == 3) {return 1;}
            }
        if ('3 Sets (of 3)' in mults && (parseInt(match.max) == 3)) {
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if (nsets == 3) {return 1;}
            }
        if ('2-Setters' in mults && (parseInt(match.max) == 3)) {
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if (nsets == 2) {return 1;}
            }
        }
    else if (fid == 'scores') {
        if (match.score.indexOf('7-6') != -1) {
            if ('All tiebreaks' in mults) {return 1;}
            else if ('TB won' in mults && match.wl == 'W') {return 1;}
            else if ('TB lost' in mults && match.wl == 'L') {return 1;}
            }
        if (match.score.indexOf('6-7') != -1) {
            if ('All tiebreaks' in mults) {return 1;}
            else if ('TB won' in mults && match.wl == 'L') {return 1;}
            else if ('TB lost' in mults && match.wl == 'W') {return 1;}
            }
        if ('Deciding TB' in mults) {
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if (parseInt(match.max) == nsets) {
                var lastset = sets[sets.length-1];
                if (lastset.indexOf('7-6') != -1) {return 1;}
                else if (lastset.indexOf('6-7') != -1) {return 1;}
                }     
            }
        if (match.score.indexOf('7-5') != -1) {
            if ('All 7-5' in mults) {return 1;}
            else if ('7-5 won' in mults && match.wl == 'W') {return 1;}
            else if ('7-5 lost' in mults && match.wl == 'L') {return 1;}
            }
        if (match.score.indexOf('5-7') != -1) {
            if ('All 7-5' in mults) {return 1;}
            else if ('7-5 won' in mults && match.wl == 'L') {return 1;}
            else if ('7-5 lost' in mults && match.wl == 'W') {return 1;}
            }  
        if (match.score.indexOf('6-0') != -1) {
            if ('All bagels' in mults) {return 1;}
            else if ('6-0 won' in mults && match.wl == 'W') {return 1;}
            else if ('6-0 lost' in mults && match.wl == 'L') {return 1;}
            }
        if (match.score.indexOf('0-6') != -1) {
            if (match.score.indexOf('70-68') != -1) {return 0;} 
            else if ('All bagels' in mults) {return 1;}
            else if ('6-0 won' in mults && match.wl == 'L') {return 1;}
            else if ('6-0 lost' in mults && match.wl == 'W') {return 1;}
            }  
        if (match.score.indexOf('6-1') != -1) {
            if ('All 6-1' in mults) {return 1;}
            else if ('6-1 won' in mults && match.wl == 'W') {return 1;}
            else if ('6-1 lost' in mults && match.wl == 'L') {return 1;}
            }
        if (match.score.indexOf('1-6') != -1) {
            if ('All 6-1' in mults) {return 1;}
            else if ('6-1 won' in mults && match.wl == 'L') {return 1;}
            else if ('6-1 lost' in mults && match.wl == 'W') {return 1;}
            } 
        return 0;                    
        }
    else if (fid == 'results') {
        if (match.score == '') {return 0;}
        if (match.score.indexOf('W') != -1 || match.score.indexOf('w') != -1) {
            if ('W by W/O' in mults && match.wl == 'W') {return 1;}
            else if ('L by W/O' in mults && match.wl == 'L') {return 1;}
            else {return 0;}
            } // only because later filters could not possibly include this
        else if (match.score.slice(-3) == 'RET') {
            if ('W by RET' in mults && match.wl == 'W') {return 1;}
            else if ('Wins' in mults && match.wl == 'W') {return 1;}
            else if ('L by RET' in mults && match.wl == 'L') {return 1;}
            else if ('Losses' in mults && match.wl == 'L') {return 1;}
            else {return 0;}
            }  
        else if (match.score.slice(-3) == 'DEF' || match.score.slice(-3) == 'ABD') {
            if ('Completed' in mults) {return 0;}
            }     
        else if ('Completed' in mults) {return 1;}
        if ('Wins' in mults && match.wl == 'W') {return 1;}
        else if ('Losses' in mults && match.wl == 'L') {return 1;}
        var sets = match.score.split(' ');
        if (sets[1] == 'RET') {return 0;} // only because this is the last filter
        var firstset = sets[0];
        var a = parseInt(firstset[0]), b = parseInt(firstset[2]);
        var wonfirst;
        if (match.wl == 'W') {
            if (a>b) {wonfirst=1;}
            else {wonfirst=0;}
            }
        else {
            if (a>b) {wonfirst=0;}
            else {wonfirst=1;}
            }
        if ('Won 1st Set' in mults && wonfirst == 1) {return 1;}
        else if ('Lost 1st Set' in mults && wonfirst == 0) {return 1;}
        if (sets.length < 3) {return 0;} // limit to five-setters
        else if (sets[2] == 'RET') {return 0;} // only because this is the last filter
        var secondset = sets[1];
        var a = parseInt(secondset[0]), b = parseInt(secondset[2]);
        var wonsecond;
        if (match.wl == 'W') {
            if (a>b) {wonsecond=1;}
            else {wonsecond=0;}
            }
        else {
            if (a>b) {wonsecond=0;}
            else {wonsecond=1;}
            }
        if ('Won Sets 1&2' in mults && (wonfirst == 1 && wonsecond == 1)) {return 1;}
        else if ('Lost Sets 1&2' in mults && (wonsecond == 0 && wonfirst == 0)) {return 1;}
        else if ('Split 1&2' in mults && (wonfirst != wonsecond)) {return 1;}
        if (sets.length < 4) {return 0;} // limit to four-plus setters
        else if (sets[3] == 'RET') {return 0;} // only because this is the last filter
        var thirdset = sets[2];
        var a = parseInt(thirdset[0]), b = parseInt(thirdset[2]);
        var wonthird;
        if (match.wl == 'W') {
            if (a>b) {wonthird=1;}
            else {wonthird=0;}
            }
        else {
            if (a>b) {wonthird=0;}
            else {wonthird=1;}
            }
        var setswon = wonfirst+wonsecond+wonthird
        if ('Up 2-1 Sets' in mults && setswon == 2) {return 1;}
        else if ('Down 1\u20112 Sets' in mults && setswon == 1) {return 1;}        
        return 0;
        }
    else if (fid == 'tourney') {
        if ('Tour Finals' in mults) {
            if (match.tourn == 'Tour Finals' || match.tourn == 'Masters Cup') {return 1;}
            }
        else if ('Olympics' in mults) {
            if (match.tourn.indexOf('Olympics') != -1) {return 1;}
            }
        else if ('Davis Cup' in mults) {
            if (match.tourn.indexOf('Davis Cup') != -1) {return 1;}
            }
        else if (match.tourn.slice(-2) == ' Q') {
            if (match.tourn.slice(0,-2) in mults) {return 1;}
            }
        if (match.tourn in mults) {return 1;}
        else if (match.tourn.slice(4) in mults) {return 1;}
        return 0;
        }
    else if (fid == 'country') {
        if (match.ocountry in mults) {return 1;}
        return 0;
        }
    else if (fid == 'surface') {
        if (match.surf in mults) {return 1;}
        return 0;
        }
    else if (fid == 'h2h') {
        if (match.opp in mults) {return 1;}
        return 0;
        }
    else if (fid == 'not') {
        if (match.opp in mults) {return 0;}
        return 1;
        }
    else if (fid == 'partner') {
        if (match.partner in mults) {return 1;}
        return 0;        
        }
    else if (fid == 'opp') {
        if (match.opp in mults) {return 1;}
        else if (match.opp2 in mults) {return 1;}
        return 0;        
        }
    else if (fid == 'oppteam') {
        var fullteam = match.opp + '/' + match.opp2;
        if (fullteam in mults) {return 1;}
        return 0;        
        }    
    else if (fid == 'stats') {
        //alert('in stats filter');
        // eventually validate / check that choice and operator are not defaults
        var thresh = Number(statinput);
        if (isNaN(thresh) == true) {return 1;} // some kind of message?
        // get relevant stat for this match; eventually put this in an external function
        // if no stats, return 0 ?
        var mstat = 0;
        if (statchoice == 'Dom Ratio') {
            if (match.ofwon == "") {return 0;}
            var rpw = 1 - (parseInt(match.ofwon) + parseInt(match.oswon))/match.opts; // dominance ratio:
            var spl = 1 - ((parseInt(match.fwon) + parseInt(match.swon))/match.pts);
            mstat = rpw/spl;
            }
        else if (statchoice == 'Ace Perc') {
            if (match.aces == "") {return 0;}
            mstat = (match.aces/match.pts)*100;
            }
        else if (statchoice == 'DF Perc') {
            if (match.dfs == "") {return 0;}
            mstat = (match.dfs/match.pts)*100;
            }
        else if (statchoice == '1st In') {
            if (match.firsts == "") {return 0;}
            mstat = (match.firsts/match.pts)*100;
            }
        else if (statchoice == '1st WPc') {
            if (match.fwon == "") {return 0;}
            mstat = (match.fwon/match.firsts)*100;
            }
        else if (statchoice == '2nd WPc') {
            if (match.swon == "") {return 0;}
            mstat = (match.swon/(match.pts-match.firsts))*100;
            }
        else if (statchoice == 'BP Svd Pc') {
            if (match.saved == "") {return 0;}
            mstat = (match.saved/match.chances)*100;
            }
        else if (statchoice == 'BP Saved') {
            if (match.saved == "") {return 0;}
            mstat = parseInt(match.saved);
            }
        else if (statchoice == 'BPC Faced') {
            if (match.chances == "") {return 0;}
            mstat = parseInt(match.chances);
            }
        else if (statchoice == 'TPW') {
            if (match.fwon == "") {return 0;}
            var pointswon = parseInt(match.fwon) + parseInt(match.swon) + (match.opts - match.ofwon - match.oswon);
            mstat = (pointswon/(parseInt(match.pts) + parseInt(match.opts)))*100;
            }
        else if (statchoice == 'RPW') {
            if (match.ofwon == "") {return 0;}
            mstat = (1 - ((parseInt(match.ofwon) + parseInt(match.oswon))/match.opts))*100;
            }
        else if (statchoice == 'vAce Pc') {
            if (match.oaces == "") {return 0;}
            mstat = (match.oaces/match.opts)*100;
            }
        else if (statchoice == 'v1st WPc') {
            if (match.ofwon == "") {return 0;}
            mstat = (1 - (match.ofwon/match.ofirsts))*100;
            }
        else if (statchoice == 'v2nd WPc') {
            if (match.oswon == "") {return 0;}
            mstat = (1 - (match.oswon/(match.opts-match.ofirsts)))*100;
            }
        else if (statchoice == 'BP Cnv Pc') {
            if (match.osaved == "") {return 0;}
            mstat = (1 - (match.osaved/match.ochances))*100;
            }
        else if (statchoice == 'BP Conv') {
            if (match.ochances == "") {return 0;}
            mstat = (match.ochances - match.osaved);
            }
        else if (statchoice == 'BP Chncs') {
            if (match.ochances == "") {return 0;}
            mstat = parseInt(match.ochances);
            }
        else if (statchoice == 'Tot Pts') {
            if (match.pts == "") {return 0;}
            mstat = (parseInt(match.pts) + parseInt(match.opts));
            }
        else if (statchoice == 'Aces') {
            if (match.aces == "") {return 0;}
            mstat = parseInt(match.aces);
            }
        else if (statchoice == 'DFs') {
            if (match.dfs == "") {return 0;}
            mstat = parseInt(match.dfs);
            }
        else if (statchoice == 'Sv Pts') {
            if (match.pts == "") {return 0;}
            mstat = parseInt(match.pts);
            }
        else if (statchoice == '1Sv Pts') {
            if (match.firsts == "") {return 0;}
            mstat = parseInt(match.firsts);
            }
        else if (statchoice == '2Sv Pts') {
            if (match.pts == "") {return 0;}
            mstat = match.pts-match.firsts;
            }
        else if (statchoice == 'vAces') {
            if (match.oaces == "") {return 0;}
            mstat = parseInt(match.oaces);
            }
        else if (statchoice == 'Time') {
            if (match.time == "") {return 0;}
            mstat = parseInt(match.time);
            }            
        else {return 1;} // invalid stat choice; some kind of message?
        // separate based on operator
        if (statoperatorchoice == 'gt' && mstat <= thresh) {return 0;}
        else if (statoperatorchoice == 'lt' && mstat >= thresh) {return 0;}
        else if (statoperatorchoice == 'ge' && mstat < thresh) {return 0;}
        else if (statoperatorchoice == 'le' && mstat > thresh) {return 0;}
        else if (statoperatorchoice == 'eq' && mstat != thresh) {return 0;}
        else {return 1;} // invalid operator; some kind of message?
        }
    }
    
function unitePartners(multselect) {
    // filter displays doubles team on two lines,
    // so filter parser thinks that's two items, not 
    // one. this function glues them back together
    var mults = {};
    var mult_list = [];
    for (var i=0; i<multselect.length; i++) {
        if (i % 2 == 0) {
            var team = multselect[i];
            }
        else {
            team = team + multselect[i].slice(1);
            mults[team.replace(/\u00a0/g, ' ')] = 1;
            mult_list.push(team.replace(/\u00a0/g, ' '));
            }
        }  
    return [mults, mult_list];  
    }

function genfilter(fid, first, match, att) {
    // fid = filter id; first = default select; match = relevant match object; att = rel attribute
    // find e.g. 'surfaceselected' text -- that's it
    var selname = '.' + fid + 'selected';
    var multselect = $(selname).text().split(fourspaces + fourspaces).slice(1); // list of selected for this filter
    if (multselect[0] == undefined) { // ugly IE hack
    	var multselect = $(selname).text().split("        ").slice(1);
    	}
    if (fid == "oppteam" && multselect[0] != "All") {
        var mult_unit = unitePartners(multselect);
        var mults = mult_unit[0];
        }
    else {
        var mults = {};
        // make list into object, for 'in' searching
        for (var i=0; i<multselect.length; i++) {mults[multselect[i].replace(/\u00a0/g, ' ')] = 1;}  
        }
    if ('All' in mults) {return 1;}
    else if (filterDict(fid, match, mults) != 1) {return 0;} // this is where it gets messy
    return 1;
    }

function hidePermalink() {
    if ($(".perma").text() == 'Hide Permalink') { // generalize this, also add to other toggles that change permalink?
        $(".perma").html('Table Permalink');
        $("#permalink").remove();
        }
    }

function getWinLossTiebreak(match) {
    var tb = 0, tbwon = 0;
    if (match.score.search('W/O') == -1 && match.score != '') {
        if (match.wl == 'W') {match["wins"] = 1; match["losses"] = 0;}
        else {match["losses"] = 1; match["wins"] = 0;}
        }
    else {match["wins"] = 0; match["losses"] = 0;}
    // do some calculations
    sets = match.score.split(' ');       
    for (var i=0; i<sets.length; i++) {
        // tb counting
        if (sets[i].slice(0, 3) == '7-6' || sets[i] == '13-12') {
            tb++;
            if (match.wl == 'W') {tbwon++;}
            }
        else if (sets[i].slice(0, 3) == '6-7') {
            tb++;
            if (match.wl == 'L') {tbwon++;}
            }
        }
    match["tiebreaks"] = tb;
    match["tbwon"] = tbwon;
    return match;
    }

function makeSplitStatRow(mt) {
    var wl = mt["wins"] + '-' + mt["losses"] + ' (' + alignRound((mt["wins"]/(mt['wins'] + mt['losses'])), 0, 1) + ')';
    var tbrecord = mt["tbwon"] + '-' + (mt["tiebreaks"]-mt["tbwon"]) + ' (' + alignRound((mt["tbwon"]/(mt["tiebreaks"])), 0, 1) + ')';
    var acerate = alignRound((mt["aces"]/mt["pts"]), 1, 1);
    var firstin = alignRound((mt["firsts"]/mt["pts"]), 1, 1);
    var fwin = alignRound((mt.fwon/mt.firsts), 1, 1);
    var swin = alignRound((mt.swon/(mt.pts-mt.firsts)), 1, 1);
    var rpw = 1 - (mt.ofwon + mt.oswon)/mt.opts;
    var rpwShow = alignRound(rpw, 1, 1)
    var spw = (mt.fwon + mt.swon)/mt.pts;
    var spwShow = alignRound(spw, 1, 1)
    var spl = 1 - spw;
    var tpw = (mt.fwon + mt.swon + mt.opts - mt.ofwon - mt.oswon)/(mt.pts + mt.opts);
    var tpwShow = alignRound(tpw, 1, 1)
    var domratio = alignRound(rpw/spl, 2);
    var holds = mt.games - (mt.chances - mt.saved);
    var hld = holds / mt.games;
    var hldShow = alignRound(hld, 1, 1);
    var breaks = mt.ochances - mt.osaved;
    var brk = breaks / mt.ogames;
    var brkShow = alignRound(brk, 1, 1);
    var statrow = [wl, tbrecord, acerate, firstin, fwin, swin, hldShow, spwShow, brkShow, rpwShow, tpwShow, domratio];
    return statrow;
    }

var matchhead = ["date","tourn","surf","level","wl","rank","seed","entry","round",
                 "score","max","opp","orank","oseed","oentry","ohand","obday",
                 "oht","ocountry","oactive","time","aces","dfs","pts","firsts","fwon",
                 "swon",'games',"saved","chances","oaces","odfs","opts","ofirsts",
                 "ofwon","oswon",'ogames',"osaved","ochances", "obackhand", "chartlink",
                 "pslink","whserver","matchid","wh","roundnum","matchnum"]
                 
var matchhead_dubs = ["date","tourn","surf","level","wl","rank","seed","entry","round",
                 "score","max","partner", "partnerlast", "prank", "phand", "pbday", "pht", "pcountry", "pactive",
              "oseed", "oentry", "opp","olast","orank","ohand","obday","oht","ocountry","oactive",
              "opp2","o2last","o2rank","o2hand","o2bday","o2ht","o2country","o2active",
              "time","aces","dfs","pts","firsts","fwon",
                 "swon",'games',"saved","chances","oaces","odfs","opts","ofirsts",
                 "ofwon","oswon",'ogames',"osaved","ochances", "obackhand", "chartlink",
                 "pslink","whserver","matchid","wh","roundnum","matchnum"]

var totals = {"aces": 0,"pts": 0,"firsts": 0,"fwon": 0, "swon": 0, "oaces": 0,"opts": 0,"ofirsts":0,"ofwon": 0,"oswon": 0,
              "wins":0, "losses":0, "tiebreaks":0, "tbwon":0, "games":0, "ogames":0, "saved":0, "osaved":0, "ochances":0, "chances":0};
//var stats = ["aces","pts","firsts","fwon", "swon", "oaces","opts","ofirsts","ofwon","oswon", "wins","losses", "tiebreaks", "tbwon"];
// extending this for h2h tally purposes
var stats = ["aces","dfs","pts","firsts","fwon", "swon", "saved", "chances", "oaces","opts", "ofirsts","ofwon","oswon", 
             "osaved","ochances","wins","losses", "tiebreaks", "tbwon", "games", "ogames"];

function addYearSplits() {
    if (!$('#tabDubs').hasClass("tablink")) {
        var splits_head = matchhead_dubs;
        var splits_matches = matchmx_dubs;
        }
    else {
        var splits_head = matchhead;
        var splits_matches = matchmx;
        }
    // remove/set aside bottom row?! need id tag for bottom row
    var splitlist = [];
    var splits = {'Career': $.extend(true, {}, totals)};
    for (m=0; m<splits_matches.length; m++) {
        var match = {}
        for (var x=0; x<splits_head.length; x++) {
            if (splits_matches[m].length <= x) {match[splits_head[x]] = '';}
            else {match[splits_head[x]] = splits_matches[m][x];}
            } 
        var msplits = ['Career'];  
        //var match = matches[m];
        if (parseInt(match.date.slice(4)) > 1224) {var year = (parseInt(match.date.slice(0,4)) + 1) + '';}
        else {var year = match.date.slice(0,4);}
        if (year in splits) {}
        else {
            splits[year] = $.extend(true, {}, totals);
            splitlist.push(year);
            }
        msplits.push(year);
        match = getWinLossTiebreak(match);   
        for (u=0; u<stats.length; u++) {
            t = stats[u];
            for (i=0; i<msplits.length; i++) {
                if (match[t] != '') {splits[msplits[i]][t] = splits[msplits[i]][t] + parseInt(match[t]);}
                }
            }
        }
    splitlist.sort();
    splitlist.reverse();
    splitlist.push('Career');
    for (j=0; j<splitlist.length; j++) {
        var idnum = j+1;
        if (j == (splitlist.length-1)) {idnum = 0;}
        var yearid = 'sA' + idnum;
        var $row = $('<tr>').attr('class', 'yearsplits').attr('id', yearid);
        var split = splitlist[j], mt = splits[split];
        var statrow = makeSplitStatRow(mt);
        var $splitspan = $('<span>').text(split + ' ');
        //var $splitclick = $('<span>').text('(+)').attr('class', 'likelink splitclick');
        $row.append($('<td>').append($splitspan)); //.append($splitclick)); 
        var cells = [];
        for (var i=0; i < statrow.length; i++) {           
            $row.append($('<td>').text(statrow[i]).attr('align', 'right'));
            }
        $("#overall").append($row);
        }
    }

var splitIds = {'Last 52': '',
                'Hard': 'B0',
                'Clay': 'B1',
                'Grass': 'B2',
                'Grand Slams': 'C0',
                'vs Top 10': 'I0',
                'vs Righties': 'K0',
                'vs Lefties': 'K1',
                'Best of 3': 'F2',
                'Best of 5': 'F3',
                'Deciding Sets': 'F5'
                }

function applyPrefilters() {
    if (prefilters.length != 0) {
        for (j=0; j<filterlist.length; j++) {
            var filter = filterlist[j];
            if (filter in prefilters) {
                $("." + filter + "choice").removeClass("selected").removeClass(filter + "selected");
                if (filter in alphaFilters) {
                    var applylist = prefilters[filter].split(',');
                    }
                else if (filter == 'stats') {
                    var applylist = [prefilters[filter]]; // will break if ever multiple stat params
                    }
                else {
                    var applylist = prefilters[filter].split('i');
                    }
                for (k=0; k<applylist.length; k++) {
                    // treat spanCustom separately
                    if (applylist[k].slice(0,2) == 'cx' && filter != "stats") {
                        $("#" + filter + 'Customqq').addClass("selected").addClass(filter + "selected");
                        if (filter == 'span') {
                            startdate = applylist[k].slice(2,10);
                            enddate = applylist[k].slice(10,18);
                            }
                        else if (filter == 'rank') {
                            lowrank = parseInt(applylist[k].slice(2,7)) - 10000;
                            highrank = parseInt(applylist[k].slice(7,12)) - 10000;
                            }
                        }
                    else if (applylist[k].slice(0,2) == 'cx' && filter == "stats") {  
                        $("#" + filter + '0').addClass("selected").addClass(filter + "selected");
                        var statparamstring = applylist[k].slice(2,-2);
                        var statparams = statparamstring.split('-');
                        statchoice = statparams[0].replace(/_/g," ");
                        statoperatorchoice = statparams[1];
                        statinput = statparams[2];
                        }                    
                    else {              
                        $("#" + filter + applylist[k]).addClass("selected").addClass(filter + "selected");
                        }
                    if ($("#" + filter + "head").hasClass('closed')) {$("#" + filter + "head").addClass("selected");}
                    }
                }
            }
        }
    if (opponent.length != 0) {
        var opps = opponent.split(',');
        for (i=0; i<opps.length; i++) {
            var player = insertNameSpaces(opps[i]);
            setPlayerFilter(player, 0, 0);
            setOpponentFilter(player, 0, 0);
            }
        for (i=0; i<opps.length; i++) {
            var playerid = '#h2h' + opps[i];
            $(playerid).addClass('selected').addClass('h2hselected');
            var playerid2 = '#opp' + opps[i];
            $(playerid2).addClass('selected').addClass('oppselected');
            }
        $("#h2hhead").addClass("selected");
        $("#opphead").addClass("selected");
        }
    else {
        $(".h2hchoice").removeClass("selected").removeClass("h2hselected");
        $("#h2hdef").addClass("selected").addClass("h2hselected");
        $(".oppchoice").removeClass("selected").removeClass("oppselected");
        $("#oppdef").addClass("selected").addClass("oppselected");
        }
    if (exclude.length != 0) {
        var nots = exclude.split(',');
        for (i=0; i<nots.length; i++) {
            var player = insertNameSpaces(nots[i]);
            setNotPlayerFilter(player, 0);
            }
        for (i=0; i<nots.length; i++) {
            var playerid = '#not' + nots[i];
            $(playerid).addClass('selected').addClass('notselected');
            }
        $("#nothead").addClass("selected");
        }
    else {
        $(".notchoice").removeClass("selected").removeClass("notselected");
        $("#notdef").addClass("selected").addClass("notselected");
        //$(".notchoice").toggle();
        }
    if (partner.length != 0) {
        var partners = partner.split(',');
        for (i=0; i<partners.length; i++) {
            var player = insertNameSpaces(partners[i]);
            setPartnerFilter(player, 0);
            }
        for (i=0; i<partners.length; i++) {
            var playerid = '#partner' + partners[i];
            $(playerid).addClass('selected').addClass('partnerselected');
            }
        $("#partnerhead").addClass("selected");
        }
    else {
        $(".partnerchoice").removeClass("selected").removeClass("partnerselected");
        $("#partnerdef").addClass("selected").addClass("partnerselected");
        }
    if (opp_team.length != 0) {
        var teams = opp_team.split(',');
        for (i=0; i<teams.length; i++) {
            var player = insertNameSpaces(teams[i]);
            setOppteamFilter(player, 0);
            }
        for (i=0; i<teams.length; i++) {
            var playerid = '#oppteam' + teams[i];
            $(playerid).addClass('selected').addClass('oppteamselected');
            }
        $("#oppteamhead").addClass("selected");
        }
    else {
        $(".oppteamchoice").removeClass("selected").removeClass("oppteamselected");
        $("#oppteamdef").addClass("selected").addClass("oppteamselected");
        }
    $(".tabview").addClass('tablink');
    if (view.length != 0) {
        if (view == "h2h") {
            $("#tabHead").removeClass('tablink');
            $(".header").show();
            $("#h2hhead").hide();
            $("#nothead").hide();
            $("#minyearshead").hide(); 
            $(".minyearschoice").hide();
            $("#partnerhead").hide();
            $(".partnerchoice").hide();
            $("#opphead").hide();
            $(".oppchoice").hide();
            $("#oppteamhead").hide();
            $(".oppteamchoice").hide();
            $("#handshead").hide();
            $(".handschoice").hide();    
            $("#prankhead").hide();
            $(".prankchoice").hide();
            $("#phandhead").hide();
            $(".phandchoice").hide();        
            }
        else if (view == "events") {
            $("#tabEvents").removeClass('tablink');
            $(".header").show();
            $("#h2hhead").hide();
            $("#nothead").hide();  
            $("#partnerhead").hide();
            $(".partnerchoice").hide();
            $("#opphead").hide();
            $(".oppchoice").hide();
            $("#oppteamhead").hide();
            $(".oppteamchoice").hide();
            $("#handshead").hide();
            $(".handschoice").hide();   
            $("#prankhead").hide();
            $(".prankchoice").hide();
            $("#phandhead").hide();
            $(".phandchoice").hide();        
            }
        else if (view == "doubles") {
            $("#tabEvents").removeClass('tablink');
            $(".header").show();
            $("#h2hhead").hide();
            $("#nothead").hide(); 
            $("#minimumhead").hide();
            $(".minimumchoice").hide();
            $("#minyearshead").hide();
            $(".minyearschoice").hide();
            $("#crankhead").hide();
            $(".crankchoice").hide();
            $("#handhead").hide();
            $(".handchoice").hide();	
            $("#agehead").hide();
            $(".agechoice").hide();
            $("#heighthead").hide();
            $(".heightchoice").hide();
            $("#countryhead").hide();
            $(".countrychoice").hide();
            }
        }
    else { // if view == '', set to results
	      $("#tabResults").removeClass('tablink');
        $(".header").show();
        $("#minimumhead").hide();
        $(".minimumchoice").hide();
        $("#minyearshead").hide();
        $(".minyearschoice").hide();
        $("#partnerhead").hide();
        $(".partnerchoice").hide();
        $("#opphead").hide();
        $(".oppchoice").hide();
        $("#oppteamhead").hide();
        $(".oppteamchoice").hide();
        $("#handshead").hide();
        $(".handschoice").hide();    
        $("#prankhead").hide();
        $(".prankchoice").hide();
        $("#phandhead").hide();
        $(".phandchoice").hide();    	
       } 
    }

var spelled = {'A': '', 'D': '', 'N': '', 'I': '', 'T': ''};
function newPrefilters(filterstring) {
    //alert(filterstring);
    var io = filterstring.indexOf('&q=');
    if (io == -1) {opponent = '';}
    else {
        opponent = filterstring.slice(io+3);
        filterstring = filterstring.slice(0, io);
        }
    var xo = filterstring.indexOf('&x=');
    if (xo == -1) {exclude = '';}
    else {
        exclude = filterstring.slice(xo+3);
        filterstring = filterstring.slice(0, xo);
        }
    var vo = filterstring.indexOf('&view=');
    if (vo == -1) {view = '';}
    else {
        view = filterstring.slice(vo+6);
        filterstring = filterstring.slice(0, vo);
        }
    //alert(filterstring);
    prefilters = {};
    filterstring += 'Z';
    var start = 0;
    if (filterstring[0] in spelled) {var go = 0;}
    else {var go = 1;}
    for (c=1; c<filterstring.length; c++) {
        if (filterstring[c] == 'q' && filterstring[c-1] == 'q') {
            if ((c+1)<filterstring.length && filterstring[c+1] == ',') {}
            else {go = 1;}
            }
        else if (filterstring[c] in {'0': 1, '1': 1, '2': 1, '3': 1, '4': 1, '5': 1, '6': 1, '7': 1, '8': 1, '9': 1, 'i': 1, ',': 1, '+': 1} && go == 1) {}
        else if (go == 1) {
            var chunk = filterstring.slice(start, c);
            var k = url2filter[chunk[0]];
            var v = chunk.slice(1);
            prefilters[k] = v;
            start = c;
            if (filterstring[0] in spelled) {go = 0;}
            }
        }
    //alert(opponent);
    resetFilters();
    applyPrefilters();
    makeMatchTable({}, 0);
    }

var splits_singles = ["Last 52", 'Hard', 'Clay', 'Grass', "Grand Slams", 'vs Top 10', 'vs Righties', 'vs Lefties',
                  'Best of 3', 'Best of 5']; //, "Deciding Sets"];
var splits_dubs = ["Last 52", 'Hard', 'Clay', 'Grass', "Grand Slams", 'vs Top 10', 'vs RH/RH', 'vs LH/LH',
                  'vs RH/LH', 'Deciding Sets']; //'Best of 3', 'Best of 5'];                   
                     
function makeSplitsTable(doubles=0) {
    $("#wonloss").empty();
    if (doubles == 1) {
        var splitlist = splits_dubs;
        var splits_head = matchhead_dubs;
        var splits_matches = matchmx_dubs;
        var splits_active = active_dubs;
        var splits_lastdate = lastdate_dubs;
        }
    else {
        var splitlist = splits_singles;
        var splits_head = matchhead;
        var splits_matches = matchmx;
        splits_active = active;
        splits_lastdate = lastdate;
        }
    var splits = {'Last 52': $.extend(true, {}, totals), // alternate w/ career 
                  'Hard': $.extend(true, {}, totals),
                  'Clay': $.extend(true, {}, totals),
                  'Grass': $.extend(true, {}, totals),
                  'Grand Slams': $.extend(true, {}, totals),
                  'vs Top 10': $.extend(true, {}, totals),
                  'vs Righties': $.extend(true, {}, totals),
                  'vs Lefties': $.extend(true, {}, totals),
                  'Best of 3': $.extend(true, {}, totals),
                  'Best of 5': $.extend(true, {}, totals),
                  'Deciding Sets': $.extend(true, {}, totals),
                  'vs RH/RH': $.extend(true, {}, totals),
                  'vs LH/LH': $.extend(true, {}, totals),
                  'vs RH/LH': $.extend(true, {}, totals)
                  };
    // $.extend(true, {}, totals) -- deep copy of totals
    for (m=0; m<splits_matches.length; m++) {
        var match = {}
        for (var x=0; x<splits_head.length; x++) {
            if (splits_matches[m].length <= x) {match[splits_head[x]] = '';}
            else {match[splits_head[x]] = splits_matches[m][x];}
            } 
        var msplits = [];  
        //var match = matches[m];
        match = getWinLossTiebreak(match);
        // get splits
        var keyday;
        if (splits_active == 1) {keyday = today;}
        else {keyday = splits_lastdate;}
        if (parseInt(match.date) <= keyday && parseInt(match.date) >= (keyday-10000)) {msplits.push('Last 52');}
        else {continue;} // only counting matches in last 52
        if (match.surf == "Hard") {msplits.push('Hard');}
        if (match.surf == "Clay") {msplits.push('Clay');}
        if (match.surf == "Grass") {msplits.push('Grass');}
        if (match.level == "G") {msplits.push('Grand Slams');}
        if (match.max == "3") {msplits.push('Best of 3');}
        if (match.max == "5") {msplits.push('Best of 5');}
        if (sets.length == match.max) {msplits.push('Deciding Sets');}
        if (doubles == 1) {
            if ((parseInt(match.orank) + parseInt(match.o2rank)) <= 20) {msplits.push('vs Top 10');}
            if (match.ohand == "R" && match.o2hand == "R") {msplits.push('vs RH/RH');}
            if (match.ohand == "L" && match.o2hand == "L") {msplits.push('vs LH/LH');}
            if (match.ohand == "R" && match.o2hand == "L") {msplits.push('vs RH/LH');}
            if (match.ohand == "L" && match.o2hand == "R") {msplits.push('vs RH/LH');}
            }
        else {
            if (parseInt(match.orank) <= 10) {msplits.push('vs Top 10');}
            if (match.ohand == "R") {msplits.push('vs Righties');}
            if (match.ohand == "L") {msplits.push('vs Lefties');}
            }
        for (u=0; u<stats.length; u++) {
            t = stats[u];
            for (i=0; i<msplits.length; i++) {
                //splits['All'][t] = splits['All'][t] + parseInt(match[t]);
                if (match[t] != '') {splits[msplits[i]][t] = splits[msplits[i]][t] + parseInt(match[t]);}
                }
            }
        }
    var headerrow = ['TOTALS', 'Match', 'Tiebreak', 'Ace%', '1stIn', '1st%', '2nd%', 'Hld%', 'SPW', 'Brk%', 'RPW', 'TPW', 'DR'];
    var $splittable = $('<table>').css("padding-top", "0px").css("border-top", "0px");
    var $splitchunk = $('<thead>');
    var $splitrow = $('<tr>');
    for (var i = 0; i < headerrow.length; i++) { 
        if (i == 0) {var halign = 'left';}
        else {var halign = 'right';}
        var $hspan = $('<span>').text(headerrow[i])
        if (headerrow[i] in titleTips) {$hspan.attr('title', titleTips[headerrow[i]]);}
        var $headth = $('<th>').append($hspan).css('align', halign);
        $splitrow.append($headth);
        }
    $splitchunk.append($splitrow);
    $splittable.append($splitchunk);
    var $splitchunk2  = $('<tbody>').attr('id', 'splitsbody');
    for (j=0; j<splitlist.length; j++) {
        var $splitrow = $('<tr>');
        var $splitspan = $('<span>');
        //var $splitclick = $('<span>');
        var split = splitlist[j], mt = splits[split];
        var statrow = makeSplitStatRow(mt);
        if (split == 'Last 52' || split == 'Career') {$splitspan.html(split + ' ');}
        else {$splitspan.html('&nbsp;&nbsp;' + split + ' ');}
        //$splitclick.text('(+)').attr('class', 'likelink splitclick')
        $splitrow.append($('<td>').append($splitspan)); //.append($splitclick));
        for (var i = 0; i < statrow.length; i++) {
            $splitrow.append($('<td>').text(statrow[i]).attr('align', 'right'));
            }
        if (j != 0) {$splitrow.attr('class', 'moresplits');}
        $splitchunk2.append($splitrow.attr('id', 's' + splitIds[split]))
        }
    var $yearspan = $('<span>').attr('class', 'likelink').text('show yearly totals');
    var $togglespan = $('<span>').attr('class', 'likelink').text('show splits');
    var $lastrow = $('<tr>').append($('<td>').attr('class', 'yeartoggle').append($yearspan));
    $lastrow.append($('<td>').attr('class', 'splittoggle').append($togglespan));
    for (j=2; j<headerrow.length; j++) {$lastrow.append($('<td>').text(''));}
    $splitchunk2.append($lastrow);
    $splittable.append($splitchunk2).attr('class', 'tablesorter').attr('id', 'overall');
    $splittable.attr('width', '40%').attr('border', 0).attr('cellspacing', 0).attr('cellpadding', 0);
    $("#wonloss").html($splittable);
    
    if (typeof photog != 'undefined' && photog != '') {
        $(".moresplits").show();
        $(".splittoggle").html('<span class="likelink">hide splits</span>');
        }
    
    $(".splittoggle").click(function () {
        // close years if it's open and splits are opening
        if ($(".splittoggle").text() == 'show more splits' && $(".yeartoggle").text() == 'hide yearly totals') {
            $(".yearsplits").toggle();
            $(".yeartoggle").html('<span class="likelink">show yearly totals</span>');
            }
        $(".moresplits").toggle();
        if ($(".splittoggle").text() == 'show splits') {
            $(".splittoggle").html('<span class="likelink">hide splits</span>');
            }
        else {$(".splittoggle").html('<span class="likelink">show splits</span>');}
        })
    $(".yeartoggle").click(function () {
        // close splits if it's open and years are opening
        if ($(".yeartoggle").text() == 'show yearly totals' && $(".splittoggle").text() == 'hide splits') {
            $(".moresplits").toggle();
            $(".splittoggle").html('<span class="likelink">show splits</span>');
            }
        if ($(".yearsplits").length == 0) {addYearSplits();}
        $(".yearsplits").toggle();
        if ($(".yeartoggle").text() == 'show yearly totals') {
            $(".yeartoggle").html('<span class="likelink">hide yearly totals</span>');
            }
        else {$(".yeartoggle").html('<span class="likelink">show yearly totals</span>');}
        })
    }

function getFilterParams() {
    var params = '';
    for (j=0; j<filterlist.length; j++) {
        var filter = filterlist[j];
        if (filter in alphaFilters) {var splitter = ',';}
        else {var splitter = 'i';}
        var fselected = '.' + filter + 'selected', fdef = filter + 'def';
        var fkey = filter2url[filter]; // e.g. 'span' = 'A'
        var selnum = '';
        if ($(fselected).attr('id') != fdef) {
            $(fselected).each(function (i) {
                var selid = $(this).attr('id'), selname = selid.slice(filter.length);
                if (selid == 'spanCustomqq') {selname = 'cx'+startdate+enddate+'qq';}
                if (selid == 'rankCustomqq') {selname = 'cx'+(10000+lowrank)+(10000+highrank)+'qq';}
                if (selid == 'stats0') {selname = 'cx'+statchoice.replace(/ /g,"_")+'-'+statoperatorchoice+'-'+statinput+'qq';}
                if (selnum.length == 0) {
                    selnum = selname;
                    }
                else {
                    selnum = selnum + splitter + selname;
                    }
                });
            params = params + fkey + selnum;
            }
        }
    return params;
    }

function getPermalinkParams() {
    startwith = getFilterParams();
    var skey, sdown;
    if($("#matchheader").length == 0) {     // no results were generated 
        return startwith;
        }
    if ($('#matchheader').children(".headerSortDown").length == 0) {
        skey = $('#matchheader').children(".headerSortUp")[0].cellIndex;
        sdown = '1';
        }
    else {
        skey = $('#matchheader').children(".headerSortDown")[0].cellIndex;
        sdown = '0';
        }
    if (skey == '0' && sdown == '1') {}
    else {startwith = startwith + 's' + skey + sdown;}
    
    if (!$('#tabDubs').hasClass("tablink")) {var doubles = 1;}
    else {doubles = 0;}
    
    // a (overview) is default for doubles; o (serve stats) is default for singles
    if (!$(".statso").hasClass('likelink') && doubles == 0) {startwith += '';} 
    else if (!$(".statsa").hasClass('likelink') && doubles == 1) {startwith += '';}
    else if (!$(".statso").hasClass('likelink')) {startwith += 'o1';}
    else if (!$(".statsr").hasClass('likelink')) {startwith += 'r1';}
    else if (!$(".statsw").hasClass('likelink')) {startwith += 'w1';}
    // insert opponents, separated by commas, into url
    if ($('#h2hdef').hasClass('selected')) {}
    else {
        var oppstring = '';
        var opps = $('.h2hselected').text().split(fourspaces + fourspaces).slice(1);
        for (var i=0; i<opps.length; i++) {
            //oppstring = oppstring + opps[i].replace('\u00a0', '') + ',';
            oppstring = oppstring + opps[i].replace(/\u00a0/g, '') + ',';  //.replace(/ /g, '')
            }
        startwith = startwith + '&q=' + oppstring.slice(0,-1);
        }
    // insert excludes, separated by commas, into url
    if ($('#notdef').hasClass('selected')) {}
    else {
        var notstring = '';
        var nots = $('.notselected').text().split(fourspaces + fourspaces).slice(1);
        for (var i=0; i<nots.length; i++) {
            //notstring = notstring + nots[i].replace('\u00a0', '') + ',';
            notstring = notstring + nots[i].replace(/\u00a0/g, '') + ',';  //.replace(/ /g, '')
            }
        startwith = startwith + '&x=' + notstring.slice(0,-1);
        }
    if ($('#partnerdef').hasClass('selected')) {}
    else {
        var oppstring = '';
        var opps = $('.partnerselected').text().split(fourspaces + fourspaces).slice(1);
        for (var i=0; i<opps.length; i++) {
            //oppstring = oppstring + opps[i].replace('\u00a0', '') + ',';
            oppstring = oppstring + opps[i].replace(/\u00a0/g, '') + ',';  //.replace(/ /g, '')
            }
        startwith = startwith + '&d=' + oppstring.slice(0,-1);
        }
    if ($('#oppdef').hasClass('selected')) {}
    else {
        var oppstring = '';
        var opps = $('.oppselected').text().split(fourspaces + fourspaces).slice(1);
        for (var i=0; i<opps.length; i++) {
            //oppstring = oppstring + opps[i].replace('\u00a0', '') + ',';
            oppstring = oppstring + opps[i].replace(/\u00a0/g, '') + ',';  //.replace(/ /g, '')
            }
        startwith = startwith + '&q=' + oppstring.slice(0,-1);
        }
    if ($('#oppteamdef').hasClass('selected')) {}
    else {
        var oppstring = '';
        var opps = $('.oppteamselected').text().split(fourspaces + fourspaces).slice(1);
        for (var i=0; i<opps.length; i++) {
            //oppstring = oppstring + opps[i].replace('\u00a0', '') + ',';
            if (i % 2 == 0) {
                oppstring = oppstring + opps[i].replace(/\u00a0/g, ''); 
                }
            else {
                oppstring = oppstring + opps[i].replace(/\u00a0/g, '') + ','; 
                } 
            }
        startwith = startwith + '&t=' + oppstring.slice(0,-1);
        }
    // add &view= 
    if (!$('#tabHead').hasClass("tablink")) {startwith = startwith + "&view=h2h";}
    else if (!$('#tabEvents').hasClass("tablink")) {startwith = startwith + "&view=events";}
    else if (!$('#tabDubs').hasClass("tablink")) {startwith = startwith + "&view=doubles";}
    //else {startwith = startwith + "&view=singles";}
    return startwith;
    }

function insertNameSpaces(opponent) {
    var oppname = opponent[0];
    for (var c=1; c<opponent.length; c++) {
        if (opponent[c] == opponent[c].toUpperCase()) {
            oppname = oppname + ' ' + opponent[c];
            }
        else {oppname += opponent[c];}
        }
    oppname = oppname.replace('/ ', '/');  // for doubles
    oppname = oppname.replace(' /', '/');  // for doubles
    return oppname;
    }

function resetFilters() {
    $(".inmenu").removeClass("selected");
    $(".menudefault").addClass("selected");
    $(".header").removeClass("selected");
    var modFilterlist = filterlist.slice()
    modFilterlist.push('h2h');
    modFilterlist.push('not');
    modFilterlist.push('partner');
    modFilterlist.push('opp');
    modFilterlist.push('oppteam');
    for (i=0; i<modFilterlist.length; i++) {
        var fname = modFilterlist[i];
        var fchoice = '.' + fname + 'selected', fdef = '#' + fname + 'def';
        $(fchoice).removeClass(fchoice.slice(1));
        $(fdef).addClass(fchoice.slice(1));
        }
    }
    
function filterMatch(match, view) {
    if (view == "doubles") {
        if (genfilter('partner', 'Partner', match, match.partner) != 1) {return 0;} 
        if (genfilter('opp', 'Opponent', match, match.opp) != 1) {return 0;}
        if (genfilter('oppteam', 'Opp Team', match, match.opp) != 1) {return 0;}
        if (genfilter('hands', 'vs Hands', match, match.ohand) != 1) {return 0;}
        if (genfilter('prank', 'Partner Rank', match, match.prank) != 1) {return 0;}
        if (genfilter('phand', 'Partner Hand', match, match.phand) != 1) {return 0;}
        }
    else {
        if (genfilter('h2h', 'Head-to-Head', match, match.opp) != 1) {return 0;}     
        if (genfilter('not', 'Exclude Opp', match, match.opp) != 1) {return 0;}
        if (genfilter('crank', 'vs Curr Rk', match, match.opp) != 1) {return 0;}
        if (genfilter('hand', 'vs Hand', match, match.ohand) != 1) {return 0;}
        if (genfilter('country', 'vs Country', match, match.ocountry) != 1) {return 0;}
        if (genfilter('age', 'vs Age', match, match.obday) != 1) {return 0;}
        if (genfilter('height', 'vs Height', match, match.oht) != 1) {return 0;}
        } 
    if (genfilter('span', 'Last 52', match, match.date) != 1) {return 0;}  
    if (genfilter('rank', 'vs Rank', match, match.orank) != 1) {return 0;}
    if (genfilter('asrank', 'as Rank', match, match.rank) != 1) {return 0;}
    if (genfilter('level', 'Level', match, match.level) != 1) {return 0;}
    if (genfilter('round', 'Round', match, match.round) != 1) {return 0;}
    if (genfilter('surface', 'Surface', match, match.surf) != 1) {return 0;} 
    if (genfilter('tourney', 'Event', match, match.tourn) != 1) {return 0;} 
    if (genfilter('entry', 'Entry', match, match.entry) != 1) {return 0;} 
    if (genfilter('oentry', 'vs Entry', match, match.oentry) != 1) {return 0;} 
    if (genfilter('results', 'All', match, match.wl) != 1) {return 0;}
    if (genfilter('sets', 'All', match, match.max) != 1) {return 0;}  
    if (genfilter('scores', 'All', match, match.score) != 1) {return 0;} 
    if (genfilter('stats', 'Stats', match, match.wl) != 1) {return 0;} 
    //if (genfilter('extras', 'Extras', match, match.vidlink) != 1) {return 0;}
    return 1;
    }
    
function confirmSort(slist) {
    if ($(".headerSortDown").length > 0 || $(".headerSortUp").length > 0) {  // not the first rendering of the table; keep previous sort
        var skey, sdown;
        if ($('#matchheader').children(".headerSortDown").length == 0) {
            skey = $('#matchheader').children(".headerSortUp")[0].cellIndex;
            sdown = '1';
            }
        else {
            skey = $('#matchheader').children(".headerSortDown")[0].cellIndex;
            sdown = '0';
            }
        if (skey == '0' && sdown == '1') {}
        else {slist = [[skey, sdown]];}
        }
    else if ('sort' in prefilters) { // first rendering, use sort params from url
        var col, down;
        col = parseInt(prefilters['sort'].slice(0, -1));
        down = parseInt(prefilters['sort'].slice(-1));
        if (col == 0 && down == 1) {slist = [[0,1], [3,1]];}
        else if (col == 6 || col == 7) {slist = [[0,1], [3,1]];} // unsortable columns ... eh
        else {slist = [[col, down]];}
        }
    else {} // first rendering, no specified sort params
    return slist;
    }
    
function showDate(md) {
    var yyyy, mm, dd; // reformat date
    yyyy = md.slice(0, 4);
    mm = md.slice(4, 6);
    dd = md.slice(6);
    // non-breaking dash: &#8209;
    var showdate = parseInt(dd,10) + '\u2011' + months[mm] + '\u2011' + yyyy;
    return showdate;
    }
    
function getFilterTitle(ftitle) {
    var eightspaces = '\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'
    var opdict = {'ge': '>=', 'le': '<=', 'gt': '>', 'lt': '<', 'eq': '='};
    for (j=0; j<filterlist.length; j++) {
        var filter = filterlist[j];
        var fselected = '.' + filter + 'selected', fdef = filter + 'def';
        if ($(fselected).attr('id') != fdef || j == 0) { // j == 0 so that time span (e.g. last 52) is always displayed)
            if (ftitle != '') {ftitle += '; ';}
            if ($(fselected).attr('id') == 'spanCustomqq') {
                var showstart = startdate.slice(6) + '-' + months[startdate.slice(4,6)] + '-' + startdate.slice(0,4);
                var showend = enddate.slice(6) + '-' + months[enddate.slice(4,6)] + '-' + enddate.slice(0,4);
                ftitle = ftitle + filteropts[filter][0] + ': ' + showstart + ' to ' + showend + ' [custom]';
                }
            else if ($(fselected).attr('id') == 'rankCustomqq') {
                ftitle = ftitle + filteropts[filter][0] + ': ' + lowrank + ' to ' + highrank + ' [custom]';
                }   
            else if ($(fselected).attr('id') == 'stats0') {
                if (statchoice in statpercs) {var statdisp = statinput+'%';}
                else if (statchoice == 'Time') {
                    var rem = (statinput % 60);
                    if (rem < 10) {var mindisp = '0'+String(rem);}
                    else {var mindisp = String(rem);}
                    var statdisp = Math.floor(statinput/60) + ':' + mindisp;
                    }
                else {var statdisp = statinput;}
                ftitle = ftitle + filteropts[filter][0] + ': ' + statchoice + ' ' + opdict[statoperatorchoice] + ' ' + statdisp + ' [custom]';
                //add percent sign as necessary?
                }             
            else {ftitle = ftitle + filteropts[filter][0] + ': ' + $.trim($(fselected).text());}
            ftitle = ftitle.replace(/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/g, ', ')
            // add comma if more than one fselected?
            }
        }
    return ftitle;
    }
  
function renderResults(stdscores, showstats, hdrs, defSort) {
    // defSort: 1 = return to defaults; 0 = check if already sorted and keep that
    var currentfilter = $.extend(true, {}, totals);
    // decide now on table sorting
    var slist = [[0,1], [3,1]];
    if (defSort == 0) {slist = confirmSort(slist);}

    var $matchtable = $('<table>');
    var $mthead = $('<thead>');
    var $mtheaderrow = $('<tr>').attr('id', 'matchheader'); 
    var $mtfoot = $('<tfoot>');
    var $mtfooterrow = $('<tr>').attr('id', 'matchfooter').attr('background-color', '#FFF'); // color weirdness?  
    var $mtbody = $('<tbody>');
    var rightaligns = {4: '', 5: '', 9: '', 10: '', 11: '', 12: '', 13: '', 14: '', 15: '', 16: ''};
    for (var s = 0; s < matchmx.length; s++) {   
        if (s == 0) {
            // header row
            var cells = [];
            for (var i = 0; i < hdrs.length; i++) {
                //var $mthcell = $('<th>');
                var $mthspan = $('<span>').text(hdrs[i]);
                if (hdrs[i] in titleTips) {$mthspan.attr('title', titleTips[hdrs[i]]);}
                var $mthcell = $('<th>').append($mthspan);
                if (i in rightaligns) {$mthcell.attr('align', 'right');}
                $mtheaderrow.append($mthcell);
                }
            $mthead.append($mtheaderrow);
            $matchtable.append($mthead);
            // footer row
            var fcells = [];
            for (var i = 0; i < hdrs.length; i++) {
                //var $mftcell = $('<tr>'); // check
                if (i == 1 && !$("#spanCareerqq").hasClass('selected')) { // && career is not selected
                    var $mftspan = $('<span>').text('Show Career').attr('font-style', 'italic');
                    $mftspan.attr('id', 'careerclick').attr('class', 'likelink');
                    }
                else {
                    var $mftspan = $('<span>').text('');
                    }
                var $mftcell = $('<td>').append($mftspan);
                $mtfooterrow.append($mftcell);
                }
            $mtfoot.append($mtfooterrow);
            $matchtable.append($mtfoot);
            }            
            
        // when adding a new column, esp. if just in some players' js files, add the header to 'matchhead' above
        // this fills in the missing cells
        var match = {}
        for (var x=0; x<matchhead.length; x++) {
            if (matchmx[s].length <= x) {match[matchhead[x]] = '';}
            else {match[matchhead[x]] = matchmx[s][x];}
            } 
            
        if (filterMatch(match, 'results') != 1) {continue;}

        var $mtrow = $('<tr>');        
        var showdate = showDate(match.date);
        var yyyy, mm, dd; // reformat date
        yyyy = match.date.slice(0, 4);
        mm = match.date.slice(4, 6);
        dd = match.date.slice(6);
        //if (typeof dob === 'undefined') {}
        //else {
        //    var dobStr = dob+'';
        //    var dobObj  = new Date(dobStr.slice(0,4), dobStr.slice(4,6), dobStr.slice(6));
        //    var tdObj  = new Date(yyyy, mm, dd);
        //    var days = parseInt((tdObj.getTime() - dobObj.getTime())/one_day);
        //    var years = parseInt(days/365);
        //    var plusdays = days % 365;
        //    if (plusdays < 10) {plusdays = '00'+plusdays;}
        //    else if (plusdays < 100) {plusdays = '0'+plusdays;}
        //    $datecell.attr('title', 'Age: '+years+'.'+plusdays);
        //    }
        if (yyyy >= 2085 && yyyy < 1916) {
            var wdate = yyyy+'-'+mm+'-'+dd;
            var wlink = 'https://tennisabstract.herokuapp.com/ATP/Rankings/'+wdate+'/';
            //$datecell.attr('href', wlink);  
            //var $datecell = $('<td>').append($('<a>').text(showdate).attr('href', wlink));
            var $datecell = $('<td>').text(showdate);
            }          
        else {var $datecell = $('<td>').text(showdate).attr('class', 'tdate');}
        $mtrow.append($datecell);
        
        var showtourn = match.tourn;
        if (match.tourn.indexOf('Davis C') != -1) {
            $mtrow.append($('<td>').text(match.tourn));
            }
        else if (match.level == 'S' | match.level == 'E') {
            $mtrow.append($('<td>').text(match.tourn));
            }
        else if (match.tourn.slice(0,3) == 'ATP' && (yyyy == '2022' | yyyy == '2024' || yyyy == '2023')) {
            $mtrow.append($('<td>').text(match.tourn.slice(4)));
            }
        else if (match.tourn.slice(-10) == 'Challenger' && (yyyy == '2022' | yyyy == '2024' || yyyy == '2023')) {
            $mtrow.append($('<td>').text(match.tourn.slice(0,-11)+' CH'));
            }
        else {
            if (match.tourn.slice(-2) == ' Q') {
                var showtourn = match.tourn.slice(0, -2);
                var qtag = '&f=B8';
                }
            else {
                var showtourn = match.tourn;
                var qtag = '';}
            var tlink = 'https://www.tennisabstract.com/cgi-bin/tourney.cgi?t=' + yyyy + showtourn.replace(/ /g, '_').replace(/'/g, 'xx') + qtag;
            $mtrow.append($('<td>').append($('<a>').text(match.tourn).attr('href', tlink)));
            }
        $mtrow.append($('<td>').text(match.surf));
        $mtrow.append($('<td>').text(match.round));
        $mtrow.append($('<td>').text(match.rank).attr('align', 'right'));
        $mtrow.append($('<td>').text(match.orank).attr('align', 'right'));

        var $pentry = $('<span>'), $pname = $('<span>'), $oppentry = $('<span>'), $opplink = $('<span>'), $oppcc = $('<span>')  // player entry
        if (match.seed != '') {$pentry.text('(' + match.seed + ')')}
        else if (match.entry != '') {$pentry.text('(' + match.entry + ')')}
        else {$pentry.text('');}
        $pname.text(lastname).css('font-weight', 'bold'); // player name
        if (match.oseed != '') {$oppentry.text('(' + match.oseed + ')')} // opp entry
        else if (match.oentry != '') {$oppentry.text('(' + match.oentry + ')')}
        else {$oppentry.text('');}
        var nlink = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + match.opp.replace(/ /g, '') // opp link
        var $olk = $('<a>').text(match.opp).attr('href', nlink);
        $opplink.append($olk);
        $oppcc.text(' [' + match.ocountry + ']'); 
        var $onespace = $('<span>').text('\u00a0')
        var $onespace2 = $('<span>').text('\u00a0')
        if (match.score == '' && (yyyy == '2023' | yyyy == '2024')) {var $deflink = $('<span>').text('vs');}
        else {var $deflink = $('<span>').text('d.');}
        if ($('#h2hdef').hasClass('selected')) {$deflink.attr('class', 'likelink h2hclick');}
        var $matchcell = $('<td>').attr('class', match.opp.replace(/ /g, ''));
        if (match.wl == "W" || match.wl == 'U') {
            $matchcell.append($pentry).append($pname).append($onespace).append($deflink).append($onespace2).append($oppentry).append($opplink).append($oppcc);
            }
        else {
            $matchcell.append($oppentry).append($opplink).append($oppcc).append($onespace).append($deflink).append($onespace2).append($pentry).append($pname);
            }
        $mtrow.append($matchcell);
        if (match.score == '' && (yyyy == '2023' | yyyy == '2024')) {
            var $scorecell = $('<a>').text('Live Scores').attr('href', 'https://www.livescore.in/tennis/').attr('target', '_blank');
            }
        else if (stdscores == true || match.score == 'W/O') {
            if (match.whserver != '' && match.whserver == 'magic') { // re-activate when match.py working
                if (match.level == 'S') {var mlev = 'FUT';}
                else if (match.level == 'C') {mlev = 'CHA';}
                else if (match.level == 'Q') {mlev = 'AQU';}
                else if (match.round == 'Q1' || match.round == 'Q2' || match.round == 'Q3') {mlev = 'AQU';}
                else {mlev = 'ATP';}
                var wlink = 'https://tennisabstract.com/cgi-bin/match.py?q=' + match.matchid + '/' + mlev + '/';
                wlink = wlink + showtourn.replace(/ /g, '_') + '/' + match.round + '/';
                if (match.wl == 'W') {
                    wlink = wlink + fullname.replace(/ /g, '_') + '/vs/' + match.opp.replace(/ /g, '_') + '/1'
                    }
                else {
                    wlink = wlink + match.opp.replace(/ /g, '_') + '/vs/' + fullname.replace(/ /g, '_') + '/0'
                    }
                var $scorecell = $('<a>').text(match.score).attr('href', wlink).attr('target', '_blank').attr('title', "Point-by-point stats for this match (new window)");                
                }
            else {
                var $scorecell = $('<span>').text(match.score);
                }
            }
        else if (match.wl == 'L') {
            var sets = match.score.split(' '), newscore = '';
            for (k=0; k<sets.length; k++) {
                var st = sets[k];
                if (st == 'RET') {newscore = newscore + 'RET ';}
                else if (st[2] == '-') {newscore = newscore + st.slice(3) + '-' + st.slice(0, 2) + ' ';}
                else {newscore = newscore + st[2] + st[1] + st[0] + st.slice(3) + ' ';}
                // what about 70-68, 11-9, etc?
                }
            newscore = newscore.slice(0, -1);
            //$mtrow.append($('<td>').text(newscore));
            var $scorecell = $('<span>').text(newscore);
            }
        else {
            //$mtrow.append($('<td>').text(match.score));
            var $scorecell = $('<span>').text(match.score);
            }
        var $scorelinks = $('<td>').append($scorecell);
        $mtrow.append($scorelinks);
        var $matchlinks = $('<td>');
        if (match.chartlink != "") {
            var clink = 'https://www.tennisabstract.com/charting/' + match.chartlink;
            var $chartlink = $('<a>').text("(ch)").attr('href', clink).attr('target', '_blank').attr('title', "Charting-Based Stats (new window)");
            var $onespace3 = $('<span>').text('\u00a0');
            $matchlinks.append($onespace3).append($chartlink);
            }
        if (match.pslink != "") {
            var $onespace4 = $('<span>').text('\u00a0');
            var plink = 'https://www.tennisabstract.com/cgi-bin/slamWinProbability.py?m=' + match.pslink;
            var $pslink = $('<a>').text("(wp)").attr('href', plink).attr('target', '_blank').attr('title', "Point-by-Point Data (new window)");
            $matchlinks.append($onespace4).append($pslink);
            }
        //if (match.vidlink != "") {
        //   var $onespace5 = $('<span>').text('\u00a0');
        //    var $vlink = $('<a>').text("(vid)").attr('href', match.vidlink).attr('target', '_blank').attr('title', "Full Match Video (new window)");
        //    $matchlinks.append($onespace5).append($vlink);
        //    }
        $mtrow.append($matchlinks);
        if (match.score == 'W/O' || match.pts == '') {  // matches with no stats, leave blank
            var statrow = ['', '', '', '', '', '', ''], showtime = '', domratio = '';
            }
        else {
            var rpw = 1 - (parseInt(match.ofwon) + parseInt(match.oswon))/match.opts; // dominance ratio:
            var spl = 1 - ((parseInt(match.fwon) + parseInt(match.swon))/match.pts);
            var num = rpw/spl, dec = 2;
            var domratio = alignRound(rpw/spl, dec);
            var matchtime = match.time;
            if (matchtime == '') {var showtime = '';}
            else {
                var hours = parseInt(matchtime/60);
                var minutes = matchtime % 60;
                if (minutes < 10) {minutes = '0' + minutes;}
                var showtime = hours + ':' + minutes;
                }
            var hours = parseInt(matchtime/60);
            var minutes = matchtime % 60;
            if (minutes < 10) {minutes = '0' + minutes;}
            if (showstats == 'o') {
                var acerate = alignRound((match.aces/match.pts), 1, 1);
                var dfrate = alignRound((match.dfs/match.pts), 1, 1);
                var firstin = alignRound((match.firsts/match.pts), 1, 1);
                var fwin = alignRound((match.fwon/match.firsts), 1, 1);
                var swin = alignRound((match.swon/(match.pts-match.firsts)), 1, 1);
                //var bksaved = alignRound((match.saved/match.chances), 1, 1) + ' (' + match.saved + '/' + match.chances + ')';
                var bksaved = match.saved + '/' + match.chances;
                var statrow = [domratio, acerate, dfrate, firstin, fwin, swin, bksaved];
                }
            else if (showstats == 'r') {
                var pointswon = parseInt(match.fwon) + parseInt(match.swon) + (match.opts - match.ofwon - match.oswon);
                var tpw = alignRound((pointswon/(parseInt(match.pts) + parseInt(match.opts))), 1, 1);
                var rpw = alignRound(1 - ((parseInt(match.ofwon) + parseInt(match.oswon))/match.opts), 1, 1);
                var vace = alignRound((match.oaces/match.opts), 1, 1);
                var r1pw = alignRound(1 - (match.ofwon/match.ofirsts), 1, 1);
                var r2pw = alignRound(1 - (match.oswon/(match.opts-match.ofirsts)), 1, 1);
                //var bkconv = alignRound(1 - (match.osaved/match.ochances), 1, 1) + ' (' + (match.ochances - match.osaved) + '/' + match.ochances + ')';
                var bkconv = (match.ochances - match.osaved) + '/' + match.ochances;
                var statrow = [domratio, tpw, rpw, vace, r1pw, r2pw, bkconv];
                }
            else if (showstats == 'w') {
                var pointswon = parseInt(match.fwon) + parseInt(match.swon) + (match.opts - match.ofwon - match.oswon);
                var tpw = alignRound((pointswon/(parseInt(match.pts) + parseInt(match.opts))), 1, 1);
                var rpw = alignRound(1 - ((parseInt(match.ofwon) + parseInt(match.oswon))/match.opts), 1, 1);
                var vace = alignRound((match.oaces/match.opts), 1, 1);
                var r1pw = alignRound(1 - (match.ofwon/match.ofirsts), 1, 1);
                var r2pw = alignRound(1 - (match.oswon/(match.opts-match.ofirsts)), 1, 1);
                var bkconv = alignRound(1 - (match.osaved/match.ochances), 1, 1) + ' (' + (match.ochances - match.osaved) + '/' + match.ochances + ')';
                var tp = parseInt(match.pts) + parseInt(match.opts)
                var statrow = [tp, match.aces, match.dfs, match.pts, match.firsts, match.pts-match.firsts, match.oaces];
                }                
            }
        //$mtrow.append($('<td>').text(domratio).attr('align', 'right'));;
        for (var i = 0; i < statrow.length; i++) {
            $mtrow.append($('<td>').text(statrow[i]).attr('align', 'right'));
            }
        $mtrow.append($('<td>').text(showtime).attr('align', 'right'));
        $mtbody.append($mtrow);
        var matchnew = getWinLossTiebreak(match);
        for (u=0; u<stats.length; u++) {
            t = stats[u];
            if (matchnew[t] != '') {currentfilter[t] = currentfilter[t] + parseInt(matchnew[t]);}
            }
        }

    // back to match table
    if ($mtbody.children().length == 0) {
        if (!$("#spanCareerqq").hasClass('selected')) { // career is not selected
            //var $mftspan = $('<span>').text('show career').attr('font-style', 'italic');
            //$mftspan.attr('id', 'careerclick').attr('class', 'likelink');
            var mft = '<span id="careerclick" class="likelink">Show career</span>, c';
            }
        else {var mft = 'C';}
        pTable = '<p id="matches">&nbsp;<br/>&nbsp;<br/>Your filters returned no matches. ' + mft + 'hange a filter or two, or press the '
        pTable = pTable + '<span class="menureset2 likelink">reset button</span>.</p>'
        $("#matches").replaceWith(pTable);
        }
    else {
        $matchtable.append($mtbody).attr('id', 'matches').attr('class', 'tablesorter');
        $matchtable.attr('border', 0).attr('cellspacing', 0).attr('cellpadding', 4);
        $("#stats").html($matchtable);
        $("#matches").tablesorter( {sortList: slist,
                                    headers: {0: {sorter:'dates'},
                                    	      1: {sorter:false},	
                                              3: {sorter:'rounds'},
                                              4: {sorter:'ranks'},
                                              5: {sorter:'ranks'},
                                              6: {sorter:false}, // matchup
                                              7: {sorter:false}, // score -- more I can do with this?
                                              8: {sorter:false},
                                              9: {sorter:'descNum'},
                                              10: {sorter:'descNum'},
                                              11: {sorter:'ascNum'},
                                              12: {sorter:'descNum'},
                                              13: {sorter:'descNum'},
                                              14: {sorter:'descNum'},
                                              15: {sorter:false},
                                              16: {sorter:'descNum'}
                                              }
                                   });
        }
    var currentParams = getFilterParams();
    var opplist = [], notlist = [];
    if ($('#h2hdef').hasClass('selected') && $('#notdef').hasClass('selected')) {var opplist = [];} // no h2hs or NOTs
    else if (!$('#notdef').hasClass('selected')) {var notlist = $('.notselected').text().split(fourspaces + fourspaces).slice(1);}
    else {var opplist = $('.h2hselected').text().split(fourspaces + fourspaces).slice(1);}
    var statrow = makeSplitStatRow(currentfilter);
    if ($mtbody.children().length == 0) {}
    else if (currentParams == '' && (opplist.length == 0 && notlist.length == 0)) {}
    else {
        if (opplist.length == 0 && notlist.length == 0) {var rowid = '#f' + currentParams;}
        else if (opplist.length == 0) {
            var nots = $('.notselected').text().replace(/\u00a0/g, '');
            var rowid = '#f' + currentParams + '-' + nots;
            }
        else {
            var opps = $('.h2hselected').text().replace(/\u00a0/g, '');
            var rowid = '#f' + currentParams + '-' + opps;
            }
        if ($(rowid).length > 0) {$(rowid).remove();} // if same filter is already present, delete
        else if ($('.filtersplitrow').length == 5) {$('.filtersplitrow').last().remove();} // if 5 already, delete last

        var $filtrow = $('<tr>').attr('class', 'filtersplitrow')
        $filtrow.attr('id', rowid.slice(1));
        var ftitle = '';
        if (opplist.length == 0) {} // get label
        else {
            for (k=0; k<opplist.length; k++) {
                //var oppname = insertNameSpaces(opplist[k]);
                var ftitle = ftitle + 'Opponent: ' + opplist[k] + '; '; // need to parse this for initials? last name?
                }
            ftitle = ftitle.slice(0, -2); // delete final semi-colon and space
            }
        if (notlist.length == 0) {} // get label
        else {
            for (k=0; k<notlist.length; k++) {
                //var oppname = insertNameSpaces(opplist[k]);
                var ftitle = ftitle + 'Exclude: ' + notlist[k] + '; '; // need to parse this for initials? last name?
                }
            ftitle = ftitle.slice(0, -2); // delete final semi-colon and space
            }  
        ftitle = getFilterTitle(ftitle);      

        var $nameital = ($('<span>').css('font-style', 'italic').attr('class', 'filterlabel'));
        if (ftitle.length > 25) { // too long, replace end with ..., add title, etc.
            $nameital.attr('title', ftitle.replace(/; /g, '\n')).css('cursor', 'pointer').text(' ' + ftitle.slice(0,22) + '... ');
            }
        else {$nameital.text(' ' + ftitle + ' ');}
        
        var $closebutton = ($('<span>').text("[x]").attr('class', 'rowcloser likelink')) // add button to close
        //var $splitclick = $('<span>').text('(+)').attr('class', 'likelink splitclick');
        
        $filtrow.append($('<td>').append($closebutton).append($nameital)); //.append($splitclick));
        for (var i = 0; i < statrow.length; i++) {
            var $fcell = $('<td>').attr('align', 'right').text(statrow[i]);
            $filtrow.append($fcell);
            }
        $("#splitsbody").prepend($filtrow)

        $(".rowcloser").click(function () {// attach handler to .rowcloser
            $(this).parent().parent().remove();
            })
        }
        
    // add title above matches
    if (ftitle == "" || ftitle == undefined) {var ftitle = 'Last 52';}
    else {var tabtitle = 'Matches: '+ftitle;} //.replace(/; /g, ' > ');}
    var wlrec = '(' + statrow[0].slice(0,statrow[0].indexOf('(')-1) + ')';
    $("#tablelabel").html('<b>Matches '+wlrec+' > '+ftitle+'</b>');
        
    // how to count filters applied?
    if (currentParams == '' && (opplist.length == 0 && notlist.length == 0)) {}
    else if ($mtbody.children().length == 0) {} // no matches -- keep this or not?
    else {
        var $bmatches = $('<span>').text('Apply filters to another player: ');
        $bmatches.append($('<input>').attr('id', 'paramsearch'));
        $('#matches').after($bmatches);
        }
    $(".h2hclick").click(function () {
        opponent = $(this).parent().attr('class');
        var withspaces = insertNameSpaces(opponent);
        setPlayerFilter(withspaces, 1, 0);
        if ($("#h2hhead").hasClass("closed")) {
            $("#h2hhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".h2hchoice").toggle();
            }
        })
    $(".menureset2").click(function () {
        resetFilters();
        // close open menus?
        makeMatchTable({}, 1);
        });
    $("#careerclick").click(function () {
        if ($("#spanhead").hasClass("closed")) {
            $("#spanhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".spanchoice").toggle();
            }
        $(".spanchoice").removeClass("selected").removeClass('spanselected');
        $("#spanCareerqq").addClass('selected').addClass('spanselected');
        makeMatchTable({}, 0);
        })
    }
    
function renderDoubles(stdscores, showstats, hdrs, defSort) {
    // defSort: 1 = return to defaults; 0 = check if already sorted and keep that
    var currentfilter = $.extend(true, {}, totals);
    // decide now on table sorting
    var slist = [[0,1], [3,1]];
    if (defSort == 0) {slist = confirmSort(slist);}

    var $matchtable = $('<table>');
    var $mthead = $('<thead>');
    var $mtheaderrow = $('<tr>').attr('id', 'matchheader'); 
    var $mtfoot = $('<tfoot>');
    var $mtfooterrow = $('<tr>').attr('id', 'matchfooter').attr('background-color', '#FFF'); // color weirdness?  
    var $mtbody = $('<tbody>');
    if (showstats == "a") {
        var rightaligns = {4: '', 5: '', 8: '', 9: '', 10: '', 11: '', 12: '', 13: '', 14: '', 15: ''};
        }
    else {
        var rightaligns = {6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '', 13: '', 14: '', 15: ''};
        }
    for (var s = 0; s < matchmx_dubs.length; s++) {   
        if (s == 0) {
            // header row
            var cells = [];
            for (var i = 0; i < hdrs.length; i++) {
                //var $mthcell = $('<th>');
                var $mthspan = $('<span>').text(hdrs[i]);
                if (hdrs[i] in titleTips) {$mthspan.attr('title', titleTips[hdrs[i]]);}
                var $mthcell = $('<th>').append($mthspan);
                if (i in rightaligns) {$mthcell.attr('align', 'right');}
                $mtheaderrow.append($mthcell);
                }
            $mthead.append($mtheaderrow);
            $matchtable.append($mthead);
            // footer row
            var fcells = [];
            for (var i = 0; i < hdrs.length; i++) {
                //var $mftcell = $('<tr>'); // check
                if (i == 1 && !$("#spanCareerqq").hasClass('selected')) { // && career is not selected
                    var $mftspan = $('<span>').text('Show Career').attr('font-style', 'italic');
                    $mftspan.attr('id', 'careerclick').attr('class', 'likelink');
                    }
                else {
                    var $mftspan = $('<span>').text('');
                    }
                var $mftcell = $('<td>').append($mftspan);
                $mtfooterrow.append($mftcell);
                }
            $mtfoot.append($mtfooterrow);
            $matchtable.append($mtfoot);
            }            
            
        // when adding a new column, esp. if just in some players' js files, add the header to 'matchhead' above
        // this fills in the missing cells
        var match = {}
        for (var x=0; x<matchhead_dubs.length; x++) {
            if (matchmx_dubs[s].length <= x) {match[matchhead_dubs[x]] = '';}
            else {match[matchhead_dubs[x]] = matchmx_dubs[s][x];}
            } 
            
        if (filterMatch(match, 'doubles') != 1) {continue;}

        var $mtrow = $('<tr>');        
        var showdate = showDate(match.date);
        var yyyy, mm, dd; // reformat date
        yyyy = match.date.slice(0, 4);
        mm = match.date.slice(4, 6);
        dd = match.date.slice(6);
        //if (typeof dob === 'undefined') {}
        //else {
        //    var dobStr = dob+'';
        //    var dobObj  = new Date(dobStr.slice(0,4), dobStr.slice(4,6), dobStr.slice(6));
        //    var tdObj  = new Date(yyyy, mm, dd);
        //    var days = parseInt((tdObj.getTime() - dobObj.getTime())/one_day);
        //    var years = parseInt(days/365);
        //    var plusdays = days % 365;
        //    if (plusdays < 10) {plusdays = '00'+plusdays;}
        //    else if (plusdays < 100) {plusdays = '0'+plusdays;}
        //    $datecell.attr('title', 'Age: '+years+'.'+plusdays);
        //    }
        if (yyyy >= 2085 && yyyy < 1916) {
            var wdate = yyyy+'-'+mm+'-'+dd;
            var wlink = 'https://tennisabstract.herokuapp.com/ATP/Rankings/'+wdate+'/';
            //$datecell.attr('href', wlink);  
            var $datecell = $('<td>').append($('<a>').text(showdate).attr('href', wlink));
            }          
        else {var $datecell = $('<td>').text(showdate).attr('class', 'tdate');}
        $mtrow.append($datecell);
        
        var showtourn = match.tourn;
        if (match.tourn.indexOf('Davis C') != -1) {
            $mtrow.append($('<td>').text(match.tourn));
            }
        else if (match.level == 'S' | match.level == 'E') {
            $mtrow.append($('<td>').text(match.tourn));
            }
        else if (match.tourn.slice(0,3) == 'ATP' && (yyyy == '2022' | yyyy == '2024' || yyyy == '2023')) {
            $mtrow.append($('<td>').text(match.tourn.slice(4)));
            }
        else if (match.tourn.slice(-10) == 'Challenger' && (yyyy == '2022' | yyyy == '2024' || yyyy == '2023')) {
            $mtrow.append($('<td>').text(match.tourn.slice(0,-11)+' CH'));
            }
        else {
            if (match.tourn.slice(-2) == ' Q') {
                var showtourn = match.tourn.slice(0, -2);
                var qtag = '&f=B8';
                }
            else {
                var showtourn = match.tourn;
                var qtag = '';}
            var tlink = 'https://www.tennisabstract.com/cgi-bin/tourney.cgi?t=' + yyyy + showtourn.replace(/ /g, '_').replace(/'/g, 'xx') + qtag;
            $mtrow.append($('<td>').append($('<a>').text(match.tourn).attr('href', tlink)));
            }
        $mtrow.append($('<td>').text(match.surf));
        $mtrow.append($('<td>').text(match.round));
        
        if (showstats == "a") {
            $mtrow.append($('<td>').text(match.rank + '/' + match.prank).attr('align', 'right'));
            $mtrow.append($('<td>').text(match.orank + '/' + match.o2rank).attr('align', 'right'));
            var partner_name = match.partner;
            var opp_name = match.opp;
            var opp2_name = match.opp2;
            }
        else {
            partner_name = match.partnerlast;
            opp_name = match.olast;
            opp2_name = match.o2last;
            }

        var $pentry = $('<span>'), $pname = $('<span>'), $oppentry = $('<span>'), $opplink = $('<span>'), $oppcc = $('<span>')  // player entry 
        var $partnerlink = $('<span>'), $opp2link = $('<span>'), $partnercc = $('<span>')
        if (match.seed != '') {$pentry.text('(' + match.seed + ')')}
        else if (match.entry != '') {$pentry.text('(' + match.entry + ')')}
        else {$pentry.text('');}
        
        $pname.text(lastname).css('font-weight', 'bold'); // player name

        var partnerlink = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + match.partner.replace(/ /g, '') 
        var $partnerlk = $('<a>').text(partner_name).attr('href', partnerlink);
        $partnerlink.append($partnerlk);
        $partnercc.text(' [' + match.pcountry + ']');
                
        if (match.oseed != '') {$oppentry.text('(' + match.oseed + ')')} // opp entry
        else if (match.oentry != '') {$oppentry.text('(' + match.oentry + ')')}
        else {$oppentry.text('');}
        
        var nlink = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + match.opp.replace(/ /g, '') // opp link
        var $olk = $('<a>').text(opp_name).attr('href', nlink);
        $opplink.append($olk);
        
        var n2link = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + match.opp2.replace(/ /g, '') 
        var $o2lk = $('<a>').text(opp2_name).attr('href', n2link);
        $opp2link.append($o2lk);
        
        if (match.ocountry == match.o2country) {
            $oppcc.text(' [' + match.ocountry + ']');
            }
        else {
            $oppcc.text(' [' + match.ocountry + '/' + match.o2country + ']'); 
            }
        var $onespace = $('<span>').text('\u00a0')
        var $onespace2 = $('<span>').text('\u00a0')
        var $slash = $('<span>').text('/')
        var $slash2 = $('<span>').text('/')
        if (match.score == '' && (yyyy == '2023' | yyyy == '2024')) {var $deflink = $('<span>').text('vs');}
        else {var $deflink = $('<span>').text('d.');}
        //if ($('#h2hdef').hasClass('selected')) {$deflink.attr('class', 'likelink h2hclick');}
        var $matchcell = $('<td>')  //.attr('class', match.opp.replace(/ /g, ''));
        if (match.wl == "W" || match.wl == 'U') {
            $matchcell.append($pentry).append($pname).append($slash).append($partnerlink).append($partnercc).append($onespace).append($deflink).append($onespace2).append($oppentry).append($opplink).append($slash2).append($opp2link).append($oppcc);
            }
        else {
            $matchcell.append($oppentry).append($opplink).append($slash2).append($opp2link).append($oppcc).append($onespace).append($deflink).append($onespace2).append($pentry).append($pname).append($slash).append($partnerlink).append($partnercc);
            }
        $mtrow.append($matchcell);
        if (match.score == '' && (yyyy == '2023' | yyyy == '2024')) {
            var $scorecell = $('<a>').text('Live Scores').attr('href', 'https://www.livescore.in/tennis/').attr('target', '_blank');
            }
        else {
            //$mtrow.append($('<td>').text(match.score));
            var $scorecell = $('<span>').text(match.score);
            }
        var $scorelinks = $('<td>').append($scorecell);
        $mtrow.append($scorelinks);

        if (match.score == 'W/O' || match.pts == '') {  // matches with no stats, leave blank
            var statrow = ['', '', '', '', '', '', ''], showtime = '', domratio = '';
            if (showstats == "a") {statrow = [''];}
            }
        else {
            var rpw = 1 - (parseInt(match.ofwon) + parseInt(match.oswon))/match.opts; // dominance ratio:
            var spl = 1 - ((parseInt(match.fwon) + parseInt(match.swon))/match.pts);
            var num = rpw/spl, dec = 2;
            var domratio = alignRound(rpw/spl, dec);
            var matchtime = match.time;
            if (matchtime == '') {var showtime = '';}
            else {
                var hours = parseInt(matchtime/60);
                var minutes = matchtime % 60;
                if (minutes < 10) {minutes = '0' + minutes;}
                var showtime = hours + ':' + minutes;
                }
            var hours = parseInt(matchtime/60);
            var minutes = matchtime % 60;
            if (minutes < 10) {minutes = '0' + minutes;}
            if (showstats == 'a') {
                var statrow = [domratio];
                }
            else if (showstats == 'o') {
                var acerate = alignRound((match.aces/match.pts), 1, 1);
                var dfrate = alignRound((match.dfs/match.pts), 1, 1);
                var firstin = alignRound((match.firsts/match.pts), 1, 1);
                var fwin = alignRound((match.fwon/match.firsts), 1, 1);
                var swin = alignRound((match.swon/(match.pts-match.firsts)), 1, 1);
                //var bksaved = alignRound((match.saved/match.chances), 1, 1) + ' (' + match.saved + '/' + match.chances + ')';
                var bksaved = match.saved + '/' + match.chances;
                var statrow = [domratio, acerate, dfrate, firstin, fwin, swin, bksaved];
                }
            else if (showstats == 'r') {
                var pointswon = parseInt(match.fwon) + parseInt(match.swon) + (match.opts - match.ofwon - match.oswon);
                var tpw = alignRound((pointswon/(parseInt(match.pts) + parseInt(match.opts))), 1, 1);
                var rpw = alignRound(1 - ((parseInt(match.ofwon) + parseInt(match.oswon))/match.opts), 1, 1);
                var vace = alignRound((match.oaces/match.opts), 1, 1);
                var r1pw = alignRound(1 - (match.ofwon/match.ofirsts), 1, 1);
                var r2pw = alignRound(1 - (match.oswon/(match.opts-match.ofirsts)), 1, 1);
                //var bkconv = alignRound(1 - (match.osaved/match.ochances), 1, 1) + ' (' + (match.ochances - match.osaved) + '/' + match.ochances + ')';
                var bkconv = (match.ochances - match.osaved) + '/' + match.ochances;
                var statrow = [domratio, tpw, rpw, vace, r1pw, r2pw, bkconv];
                }
            else if (showstats == 'w') {
                var pointswon = parseInt(match.fwon) + parseInt(match.swon) + (match.opts - match.ofwon - match.oswon);
                var tpw = alignRound((pointswon/(parseInt(match.pts) + parseInt(match.opts))), 1, 1);
                var rpw = alignRound(1 - ((parseInt(match.ofwon) + parseInt(match.oswon))/match.opts), 1, 1);
                var vace = alignRound((match.oaces/match.opts), 1, 1);
                var r1pw = alignRound(1 - (match.ofwon/match.ofirsts), 1, 1);
                var r2pw = alignRound(1 - (match.oswon/(match.opts-match.ofirsts)), 1, 1);
                var bkconv = alignRound(1 - (match.osaved/match.ochances), 1, 1) + ' (' + (match.ochances - match.osaved) + '/' + match.ochances + ')';
                var tp = parseInt(match.pts) + parseInt(match.opts)
                var statrow = [tp, match.aces, match.dfs, match.pts, match.firsts, match.pts-match.firsts, match.oaces];
                }                
            }
        //$mtrow.append($('<td>').text(domratio).attr('align', 'right'));;
        for (var i = 0; i < statrow.length; i++) {
            $mtrow.append($('<td>').text(statrow[i]).attr('align', 'right'));
            }
        $mtrow.append($('<td>').text(showtime).attr('align', 'right'));
        $mtbody.append($mtrow);
        var matchnew = getWinLossTiebreak(match);
        for (u=0; u<stats.length; u++) {
            t = stats[u];
            if (matchnew[t] != '') {currentfilter[t] = currentfilter[t] + parseInt(matchnew[t]);}
            }
        }

    // back to match table
    if ($mtbody.children().length == 0) {
        if (!$("#spanCareerqq").hasClass('selected')) { // career is not selected
            //var $mftspan = $('<span>').text('show career').attr('font-style', 'italic');
            //$mftspan.attr('id', 'careerclick').attr('class', 'likelink');
            var mft = '<span id="careerclick" class="likelink">Show career</span>, c';
            }
        else {var mft = 'C';}
        pTable = '<p id="matches">&nbsp;<br/>&nbsp;<br/>Your filters returned no matches. ' + mft + 'hange a filter or two, or press the '
        pTable = pTable + '<span class="menureset2 likelink">reset button</span>.</p>'
        $("#matches").replaceWith(pTable);
        }
    else {
        $matchtable.append($mtbody).attr('id', 'matches').attr('class', 'tablesorter');
        $matchtable.attr('border', 0).attr('cellspacing', 0).attr('cellpadding', 4);
        $("#stats").html($matchtable);
        if (showstats == "a") {
            $("#matches").tablesorter( {sortList: slist,
                                    headers: {0: {sorter:'dates'},
                                    	      1: {sorter:false},	
                                              3: {sorter:'rounds'},
                                              4: {sorter:'ranks'},
                                              5: {sorter:'ranks'},
                                              6: {sorter:false}, // matchup
                                              7: {sorter:false}, // score -- more I can do with this?
                                              8: {sorter:'descNum'},
                                              9: {sorter:'descNum'},
                                              }
                                   });
            }
        else {
            $("#matches").tablesorter( {sortList: slist,
                                    headers: {0: {sorter:'dates'},
                                    	      1: {sorter:false},	
                                              3: {sorter:'rounds'},
                                              //4: {sorter:'ranks'},
                                              //5: {sorter:'ranks'},
                                              4: {sorter:false}, // matchup
                                              5: {sorter:false}, // score -- more I can do with this?
                                              6: {sorter:'descNum'},
                                              7: {sorter:'descNum'},
                                              8: {sorter:'ascNum'},
                                              9: {sorter:'descNum'},
                                              10: {sorter:'descNum'},
                                              11: {sorter:'descNum'},
                                              12: {sorter:false},
                                              13: {sorter:'descNum'}
                                              }
                                   });
            }
        }
    var currentParams = getFilterParams();
    var opplist = [], oppteamlist = [], partnerlist = [];
    if (!$('#oppdef').hasClass('selected')) {var opplist = $('.oppselected').text().split(fourspaces + fourspaces).slice(1);}
    if (!$('#oppteamdef').hasClass('selected')) {var oppteamlist = $('.oppteamselected').text().split(fourspaces + fourspaces).slice(1);}
    if (!$('#partnerdef').hasClass('selected')) {var partnerlist = $('.partnerselected').text().split(fourspaces + fourspaces).slice(1);}
    var statrow = makeSplitStatRow(currentfilter);
    if ($mtbody.children().length == 0) {}
    else if (currentParams == '' && (opplist.length == 0 && oppteamlist.length == 0 && partnerlist.length == 0)) {}
    else {
        var rowid = '#f' + currentParams;
        //if (opplist.length == 0 && oppteamlist.length == 0 && partnerlist.length == 0) {var rowid = '#f' + currentParams;}
        if (opplist.length > 0) {
            var nots = $('.oppselected').text().replace(/\u00a0/g, '');
            rowid = rowid + '-' + nots;
            }
        if (oppteamlist.length > 0) {
            var oppteams = $('.oppteamselected').text().replace(/\u00a0/g, '');
            rowid = rowid + '-' + oppteams;
            }
        if (partnerlist.length > 0) {
            var partners = $('.partnerselected').text().replace(/\u00a0/g, '');
            rowid = rowid + '-' + partners;
            }
        if ($(rowid).length > 0) {$(rowid).remove();} // if same filter is already present, delete
        else if ($('.filtersplitrow').length == 5) {$('.filtersplitrow').last().remove();} // if 5 already, delete last

        var $filtrow = $('<tr>').attr('class', 'filtersplitrow')
        $filtrow.attr('id', rowid.slice(1));
        var ftitle = '';
        if (partnerlist.length == 0) {} // get label
        else {
            for (k=0; k<partnerlist.length; k++) {
                //var oppname = insertNameSpaces(opplist[k]);
                var ftitle = ftitle + 'Partner: ' + partnerlist[k] + '; '; // need to parse this for initials? last name?
                }
            ftitle = ftitle.slice(0, -2); // delete final semi-colon and space
            }
        if (opplist.length == 0) {} // get label
        else {
            for (k=0; k<opplist.length; k++) {
                //var oppname = insertNameSpaces(opplist[k]);
                var ftitle = ftitle + 'Opponent: ' + opplist[k] + '; '; // need to parse this for initials? last name?
                }
            ftitle = ftitle.slice(0, -2); // delete final semi-colon and space
            }
        if (oppteamlist.length == 0) {} // get label
        else {
            var mult_unit = unitePartners(oppteamlist);
            oppteamlist = mult_unit[1];
            for (k=0; k<oppteamlist.length; k++) {
                //var oppname = insertNameSpaces(opplist[k]);
                var ftitle = ftitle + 'Opp Team: ' + oppteamlist[k] + '; '; // need to parse this for initials? last name?
                }
            ftitle = ftitle.slice(0, -2); // delete final semi-colon and space
            }  
        ftitle = getFilterTitle(ftitle);      

        var $nameital = ($('<span>').css('font-style', 'italic').attr('class', 'filterlabel'));
        if (ftitle.length > 25) { // too long, replace end with ..., add title, etc.
            $nameital.attr('title', ftitle.replace(/; /g, '\n')).css('cursor', 'pointer').text(' ' + ftitle.slice(0,22) + '... ');
            }
        else {$nameital.text(' ' + ftitle + ' ');}
        
        var $closebutton = ($('<span>').text("[x]").attr('class', 'rowcloser likelink')) // add button to close
        //var $splitclick = $('<span>').text('(+)').attr('class', 'likelink splitclick');
        
        $filtrow.append($('<td>').append($closebutton).append($nameital)); //.append($splitclick));
        for (var i = 0; i < statrow.length; i++) {
            var $fcell = $('<td>').attr('align', 'right').text(statrow[i]);
            $filtrow.append($fcell);
            }
        $("#splitsbody").prepend($filtrow)

        $(".rowcloser").click(function () {// attach handler to .rowcloser
            $(this).parent().parent().remove();
            })
        }
        
    // add title above matches
    if (ftitle == "" || ftitle == undefined) {var ftitle = 'Last 52';}
    else {var tabtitle = 'Matches: '+ftitle;} //.replace(/; /g, ' > ');}
    var wlrec = '(' + statrow[0].slice(0,statrow[0].indexOf('(')-1) + ')';
    $("#tablelabel").html('<b>Matches '+wlrec+' > '+ftitle+'</b>');
        
    // how to count filters applied?
    if (currentParams == '' && (opplist.length == 0 && oppteamlist.length == 0 && partnerlist.length == 0)) {}
    else if ($mtbody.children().length == 0) {} // no matches -- keep this or not?
    else {
        var $bmatches = $('<span>').text('Apply filters to another player: ');
        $bmatches.append($('<input>').attr('id', 'paramsearch'));
        $('#matches').after($bmatches);
        }
    $(".h2hclick").click(function () {
        opponent = $(this).parent().attr('class');
        var withspaces = insertNameSpaces(opponent);
        setPlayerFilter(withspaces, 1, 0);
        if ($("#h2hhead").hasClass("closed")) {
            $("#h2hhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".h2hchoice").toggle();
            }
        })
    $(".menureset2").click(function () {
        resetFilters();
        // close open menus?
        makeMatchTable({}, 1);
        });
    $("#careerclick").click(function () {
        if ($("#spanhead").hasClass("closed")) {
            $("#spanhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".spanchoice").toggle();
            }
        $(".spanchoice").removeClass("selected").removeClass('spanselected');
        $("#spanCareerqq").addClass('selected').addClass('spanselected');
        makeMatchTable({}, 0);
        })
    }
    
function renderHeadToHeads(defSort) {
   
    var hdrs = hdrsHead;
    var slist = [[0,0]]; // for now, 2nd column, descending
    if (defSort == 0) {slist = confirmSort(slist);}
    
    var hDict = {}

    var $matchtable = $('<table>');
    var $mthead = $('<thead>');
    var $mtheaderrow = $('<tr>').attr('id', 'matchheader'); 
    var $mtfoot = $('<tfoot>');
    var $mtfooterrow = $('<tr>').attr('id', 'matchfooter').attr('background-color', '#FFF'); // color weirdness?  
    var $mtbody = $('<tbody>');
    var rightaligns = {0: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 
                       11: '', 12: '', 13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: ''};
    for (var s = 0; s < matchmx.length; s++) {   
        if (s == 0) {
            // header row
            var cells = [];
            for (var i = 0; i < hdrs.length; i++) {
                var $mthspan = $('<span>').text(hdrs[i]);
                if (hdrs[i] in titleTips) {$mthspan.attr('title', titleTips[hdrs[i]]);}
                var $mthcell = $('<th>').append($mthspan);
                if (i in rightaligns) {$mthcell.attr('align', 'right');}
                $mtheaderrow.append($mthcell);
                }
            $mthead.append($mtheaderrow);
            $matchtable.append($mthead);
            // footer row -- do i want to keep this for head2head view?
            var fcells = [];
            for (var i = 0; i < hdrs.length; i++) {
                if (i == 1 && !$("#spanCareerqq").hasClass('selected')) { // && career is not selected
                    var $mftspan = $('<span>').text('Show Career').attr('font-style', 'italic');
                    $mftspan.attr('id', 'careerclick').attr('class', 'likelink');
                    }
                else {
                    var $mftspan = $('<span>').text('');
                    }
                var $mftcell = $('<td>').append($mftspan);
                $mtfooterrow.append($mftcell);
                }
            $mtfoot.append($mtfooterrow);
            $matchtable.append($mtfoot);
            }            
            
        var match = {} // create dict for each match
        for (var x=0; x<matchhead.length; x++) {
            if (matchmx[s].length <= x) {match[matchhead[x]] = '';}
            else {match[matchhead[x]] = matchmx[s][x];}
            }
            
        if (match.score == "" || match.score.slice(0,1) == 'D') {continue;}
        if (match.score.slice(0,1) == 'W' || match.score.slice(0,1) == 'R') {continue;}
        if (filterMatch(match, 'results') != 1) {continue;}
            
        match = getWinLossTiebreak(match);
                         
        if (!(match.opp in hDict)) {
            hDict[match.opp] = {'m': 0, 'w': 0, 'l': 0, 'occ': match.ocountry, 'ms': 0, 'dates': {}};
            for (u=0; u<stats.length; u++) {
                hDict[match.opp][stats[u]] = 0;
                }
            }
        hDict[match.opp]['m'] += 1
        if (match.wl == 'W') {hDict[match.opp]['w'] += 1;}
        else {hDict[match.opp]['l'] += 1;}
         
        //hDict[match.opp]['tiebreaks'] += match.tiebreaks
        //hDict[match.opp]['tbwon'] += match.tbwon
        
        if (match.oswon != "") {hDict[match.opp]['ms'] += 1;}
        
        for (u=0; u<stats.length; u++) {
            t = stats[u];
            if (match[t] != '') {hDict[match.opp][t] = hDict[match.opp][t] + parseInt(match[t]);}
            }        
        
        var wlfull = {'W': 'WIN', 'L': 'LOSS'};
        var details = wlfull[match.wl] + ': ' + match.matchid.slice(0,4) + ' ' + match.tourn + ' ' + match.round + ' (' + match.surf + '), ' + match.score;
        hDict[match.opp]['dates'][match.date] = details;
        }

    // check against match minimum (abbreviated version of genfilter())
    var multselect = $('.minimumselected').text().split(fourspaces + fourspaces).slice(1);
    var matchmin = multselect[0];
    if (matchmin == 'All') {var mm = 1;}
    else {var mm = parseInt(matchmin);}
        
    for (player in hDict) {
        if (!hDict.hasOwnProperty(player)) {continue;}
	if (hDict[player].m < mm) {continue;}
        
        var $mtrow = $('<tr>');
        
        var $deflink = $('<span>').text(hDict[player].m);
        $deflink.attr('class', 'likelink h2hclick');
        var $matchcell = $('<td>').append($deflink).attr('class', player.replace(/ /g, '')).attr('align', 'right');
        $mtrow.append($matchcell);

	$oppcc = $('<span>')
	$oppcc.text(' [' + hDict[player].occ + ']');
        var nlink = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + player.replace(/ /g, '') // opp link
        var $olk = $('<a>').text(player).attr('href', nlink);
        var $oppcell = $('<td>').append($olk).append($oppcc);     
        $mtrow.append($oppcell);
        
        // get list of h2h match dates
        var mdates = [];
        for (md in hDict[player]['dates']) {
            if (hDict[player]['dates'].hasOwnProperty(md)) {mdates.push(md);}
            }
	mdates.sort()
	
	$firstdate = $('<td>').text(showDate(mdates[0])).attr('align', 'right');
	$firstdate.attr('title', hDict[player]['dates'][mdates[0]]);
	$lastdate = $('<td>').text(showDate(mdates[mdates.length - 1])).attr('align', 'right');
	$lastdate.attr('title', hDict[player]['dates'][mdates[mdates.length - 1]]);     
        
        $mtrow.append($('<td>').text(hDict[player].w).attr('align', 'right'));
        $mtrow.append($('<td>').text(hDict[player].l).attr('align', 'right'));
        var wlperc = alignRound(hDict[player].w/hDict[player].m, 1, 1);
        $mtrow.append($('<td>').text(wlperc).attr('align', 'right'));
        
        $mtrow.append($('<td>').text(hDict[player].tiebreaks).attr('align', 'right'));
        $mtrow.append($('<td>').text(hDict[player].tbwon).attr('align', 'right'));
        $mtrow.append($('<td>').text(hDict[player].tiebreaks - hDict[player].tbwon).attr('align', 'right'));
        var tbperc = alignRound(hDict[player].tbwon/hDict[player].tiebreaks, 1, 1);
        $mtrow.append($('<td>').text(tbperc).attr('align', 'right'));
        
        $mtrow.append($firstdate);
        $mtrow.append($lastdate);
        
        $mtrow.append($('<td>').text(hDict[player].ms).attr('align', 'right')); // stat sample
        
        var rpw = 1 - (parseInt(hDict[player].ofwon) + parseInt(hDict[player].oswon))/hDict[player].opts; // dominance ratio:
        var spw = ((parseInt(hDict[player].fwon) + parseInt(hDict[player].swon))/hDict[player].pts);
        var spl = 1 - spw;
        var num = rpw/spl, dec = 2;
        var domratio = alignRound(rpw/spl, dec);

        var acerate = alignRound((hDict[player].aces/hDict[player].pts), 1, 1);
        var dfrate = alignRound((hDict[player].dfs/hDict[player].pts), 1, 1);
        var firstin = alignRound((hDict[player].firsts/hDict[player].pts), 1, 1);
        var fwin = alignRound((hDict[player].fwon/hDict[player].firsts), 1, 1);
        var swin = alignRound((hDict[player].swon/(hDict[player].pts-hDict[player].firsts)), 1, 1);
        var bksavedRate = alignRound((hDict[player].saved/hDict[player].chances), 1, 1)
        var bksaved = hDict[player].saved + '/' + hDict[player].chances;

        var pointswon = parseInt(hDict[player].fwon) + parseInt(hDict[player].swon) + (hDict[player].opts - hDict[player].ofwon - hDict[player].oswon);
        var tpw = alignRound((pointswon/(parseInt(hDict[player].pts) + parseInt(hDict[player].opts))), 1, 1);
        var rpw = alignRound(1 - ((parseInt(hDict[player].ofwon) + parseInt(hDict[player].oswon))/hDict[player].opts), 1, 1);
        var vace = alignRound((hDict[player].oaces/hDict[player].opts), 1, 1);
        var r1pw = alignRound(1 - (hDict[player].ofwon/hDict[player].ofirsts), 1, 1);
        var r2pw = alignRound(1 - (hDict[player].oswon/(hDict[player].opts-hDict[player].ofirsts)), 1, 1);
        var bkconvRate = alignRound(1 - (hDict[player].osaved/hDict[player].ochances), 1, 1)
        var bkconv = (hDict[player].ochances - hDict[player].osaved) + '/' + hDict[player].ochances;
        
        var statrow = [domratio, acerate, dfrate, firstin, fwin, swin, alignRound(spw, 1, 1), rpw]; 
        for (var i = 0; i < statrow.length; i++) {
            $mtrow.append($('<td>').text(statrow[i]).attr('align', 'right'));
            }        
	$bpsv = $('<td>').text(bksavedRate).attr('align', 'right');
	$bpsv.attr('title', bksaved);
	$bpcv = $('<td>').text(bkconvRate).attr('align', 'right');
	$bpcv.attr('title', bkconv);
        
        $mtrow.append($bpsv);
        $mtrow.append($bpcv);        
               
        $mtbody.append($mtrow);
        }

    // back to match table
    if ($mtbody.children().length == 0) {
        if (!$("#spanCareerqq").hasClass('selected')) { // career is not selected
            //var $mftspan = $('<span>').text('show career').attr('font-style', 'italic');
            //$mftspan.attr('id', 'careerclick').attr('class', 'likelink');
            var mft = '<span id="careerclick" class="likelink">Show career</span>, c';
            }
        else {var mft = 'C';}
        pTable = '<p id="matches">&nbsp;<br/>&nbsp;<br/>Your filters returned no matches. ' + mft + 'hange a filter or two, or press the '
        pTable = pTable + '<span class="menureset2 likelink">reset button</span>.</p>'
        $("#matches").replaceWith(pTable);
        }
    else {
        $matchtable.append($mtbody).attr('id', 'matches').attr('class', 'tablesorter');
        $matchtable.attr('border', 0).attr('cellspacing', 0).attr('cellpadding', 4);
        $("#stats").html($matchtable);
        $("#matches").tablesorter( {sortList: slist,
                                    headers: {1: {sorter:false}, // player
                                              9: {sorter:'dates'},
                                              10: {sorter:'datesDesc'},
                                    	      0: {sorter:'descNum'},	
                                              2: {sorter:'descNum'},
                                              3: {sorter:'descNum'},
                                              4: {sorter:'descNum'},
                                              5: {sorter:'descNum'}, 
                                              6: {sorter:'descNum'},
                                              7: {sorter:'descNum'},
                                              8: {sorter:'descNum'},
                                              11: {sorter:'descNum'},
                                              12: {sorter:'descNum'},
                                              13: {sorter:'descNum'},
                                              14: {sorter:'ascNum'},
                                              15: {sorter:'descNum'},
                                              16: {sorter:'descNum'},
                                              17: {sorter:'descNum'},
                                              18: {sorter:'descNum'},
                                              19: {sorter:'descNum'},
                                              20: {sorter:'descNum'},
                                              21: {sorter:'descNum'}                                             
                                              }
                                   });
        }
    
    var ftitle = getFilterTitle("");
    var pgtitle = '<b>Head-to-Head Records ('+ftitle+')</b>'; // <br/>Just testing blah blah blah.';
    $("#tablelabel").html(pgtitle);
    
    $(".h2hclick").click(function () {
        // switch back to results tab
        $(".tabview").addClass("tablink");
        $("#tabResults").removeClass("tablink");
        // unlike 'tabclick', don't reset any filters
        opponent = $(this).parent().attr('class');
        var withspaces = insertNameSpaces(opponent);
        setPlayerFilter(withspaces, 1, 1); // this includes makeMatchTable
        if ($("#h2hhead").hasClass("closed")) {
            $("#h2hhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".h2hchoice").toggle();
            }
        $(".header").show();
        $("#minimumhead").hide();            
        })
    }
    
function renderEvents(defSort) {
   
    var hdrs = hdrsEvents;
    var slist = [[0,0]]; // for now, 1st column; default is descending
    if (defSort == 0) {slist = confirmSort(slist);}
    
    var hDict = {}

    var $matchtable = $('<table>');
    var $mthead = $('<thead>');
    var $mtheaderrow = $('<tr>').attr('id', 'matchheader'); 
    var $mtfoot = $('<tfoot>');
    var $mtfooterrow = $('<tr>').attr('id', 'matchfooter').attr('background-color', '#FFF'); // color weirdness?  
    var $mtbody = $('<tbody>');
    var rightaligns = {0: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 
                       11: '', 12: '', 13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: ''};
    for (var s = 0; s < matchmx.length; s++) {   
        if (s == 0) {
            // header row
            var cells = [];
            for (var i = 0; i < hdrs.length; i++) {
                var $mthspan = $('<span>').text(hdrs[i]);
                if (hdrs[i] in titleTips) {$mthspan.attr('title', titleTips[hdrs[i]]);}
                var $mthcell = $('<th>').append($mthspan);
                if (i in rightaligns) {$mthcell.attr('align', 'right');}
                $mtheaderrow.append($mthcell);
                }
            $mthead.append($mtheaderrow);
            $matchtable.append($mthead);
            // footer row -- do i want to keep this for head2head view?
            var fcells = [];
            for (var i = 0; i < hdrs.length; i++) {
                if (i == 1 && !$("#spanCareerqq").hasClass('selected')) { // && career is not selected
                    var $mftspan = $('<span>').text('Show Career').attr('font-style', 'italic');
                    $mftspan.attr('id', 'careerclick').attr('class', 'likelink');
                    }
                else {
                    var $mftspan = $('<span>').text('');
                    }
                var $mftcell = $('<td>').append($mftspan);
                $mtfooterrow.append($mftcell);
                }
            $mtfoot.append($mtfooterrow);
            $matchtable.append($mtfoot);
            }            
            
        var match = {} // create dict for each match
        for (var x=0; x<matchhead.length; x++) {
            if (matchmx[s].length <= x) {match[matchhead[x]] = '';}
            else {match[matchhead[x]] = matchmx[s][x];}
            }
        
        var tourlevel = {'A': '', 'M': '', 'G': ''};
        if (!(match.level in tourlevel)) {continue;}
        if (match.tourn.slice(0,4) == 'ATP ') {continue;}
        
        if (match.wl == 'W' && match.round != 'F') {  
            if (match.score == "" || match.score.slice(0,1) == 'D') {continue;}
            if (match.score.slice(0,1) == 'W' || match.score.slice(0,1) == 'R') {continue;}
            }
        
        if (filterMatch(match, 'results') != 1) {continue;}
            
        match = getWinLossTiebreak(match);
        
        if (match.tourn.indexOf('Olympics') > -1) {match.tourn = 'Olympics';}
                         
        if (!(match.tourn in hDict)) {
            hDict[match.tourn] = {'m': 0, 'w': 0, 'l': 0, 'occ': match.ocountry, 'ms': 0, 'dates': {}, 'surfs': {}, 'matches': {}};
            for (u=0; u<stats.length; u++) {
                hDict[match.tourn][stats[u]] = 0;
                }
            }
        hDict[match.tourn]['m'] += 1
        if (match.wl == 'W') {hDict[match.tourn]['w'] += 1;}
        else {hDict[match.tourn]['l'] += 1;}
        
        if (match.oswon != "") {hDict[match.tourn]['ms'] += 1;}
        
        for (u=0; u<stats.length; u++) {
            t = stats[u];
            if (match[t] != '') {hDict[match.tourn][t] = hDict[match.tourn][t] + parseInt(match[t]);}
            }        

        var myear;
        if (match.matchid.length > 0) {myear = match.matchid.slice(0,4);}
        else if (parseInt(match.date.slice(4,8)) > 1215) {myear = parseInt(match.date.slice(0,4)) + 1;}
        else {myear = match.date.slice(0,4);}
        
        hDict[match.tourn]['surfs'][myear] = match.surf;
        
        if (match.round == 'F' && match.wl == 'W') {
            hDict[match.tourn]['dates'][myear] = 'W';
            hDict[match.tourn]['matches'][myear] = 'WIN: '+match.round+' vs '+match.opp+', '+match.score;
            }
        else if (!(myear in hDict[match.tourn]['dates']) && match.wl == 'L') {
            hDict[match.tourn]['dates'][myear] = match.round;
            hDict[match.tourn]['matches'][myear] = 'LOSS: '+match.round+' vs '+match.opp+', '+match.score;
            }
        // make sure to get some date in there in case only wins in an incomplete tournament
        else if (!(myear in hDict[match.tourn]['dates']) && match.wl == 'W') {
            hDict[match.tourn]['dates'][myear] = "";
            hDict[match.tourn]['matches'][myear] = "";
            }
        // covers for previous line -- if year already in but only wins, get the loss
        else if ((myear in hDict[match.tourn]['dates'] && hDict[match.tourn]['dates'][myear] == "") && match.wl == 'L') {
            hDict[match.tourn]['dates'][myear] = match.round;
            hDict[match.tourn]['matches'][myear] = 'LOSS: '+match.round+' vs '+match.opp+', '+match.score;
            }
        }

    // check against match minimum (abbreviated version of genfilter())
    var multselect = $('.minimumselected').text().split(fourspaces + fourspaces).slice(1);
    var matchmin = multselect[0];
    if (matchmin == 'All') {var mm = 1;}
    else {var mm = parseInt(matchmin);}
    
    // check against match minimum (abbreviated version of genfilter())
    var multselectYears = $('.minyearsselected').text().split(fourspaces + fourspaces).slice(1);
    var yearsmin = multselectYears[0];
    if (yearsmin == 'All') {var mmy = 1;}
    else {var mmy = parseInt(yearsmin);}    
        
    for (event in hDict) {
        if (!hDict.hasOwnProperty(event)) {continue;}
	if (hDict[event].m < mm) {continue;}
        
        var $mtrow = $('<tr>');
        
        // get list of years
        var mdates = [];
        var allResults = {}
        for (md in hDict[event]['dates']) {
            if (hDict[event]['dates'].hasOwnProperty(md)) {
                mdates.push(md);
                allResults[hDict[event]['dates'][md]] = '';
                }
            }
            
        if (mdates.length < mmy) {continue;} // check against year minimum from filter
            
	mdates.sort();
	var lastyear = mdates[mdates.length-1];
	
	$mtrow.append($('<td>').text(mdates.length).attr('align', 'right'));     

	//$oppcc = $('<span>') // link to same event results?
	//$oppcc.text(' [' + hDict[player].occ + ']');
        //var nlink = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + player.replace(/ /g, '') // opp link
        //var $olk = $('<a>').text(player).attr('href', nlink);
        var $eventname = $('<span>').text(event).attr('class', 'likelink eventclick');
        var $oppcell = $('<td>').append($eventname).attr('class', event.replace(/ /g, '_'));     
        $mtrow.append($oppcell);
        
        $mtrow.append($('<td>').text(hDict[event]['surfs'][lastyear])); 
        
        var $deflink = $('<span>').text(hDict[event].m); // add link to event results? would need event version of h2hclick
        //$deflink.attr('class', 'likelink h2hclick');
        var $matchcell = $('<td>').append($deflink).attr('align', 'right') //.attr('class', player.replace(/ /g, ''))
        $mtrow.append($matchcell);        
	
	$firstdate = $('<td>').text(mdates[0]).attr('align', 'right');
	$firstdate.attr('title', hDict[event]['matches'][mdates[0]]);
	$lastdate = $('<td>').text(lastyear).attr('align', 'right');
	$lastdate.attr('title', hDict[event]['matches'][lastyear]);  
        
        $mtrow.append($('<td>').text(hDict[event].w).attr('align', 'right'));
        $mtrow.append($('<td>').text(hDict[event].l).attr('align', 'right'));
        var wlperc = alignRound(hDict[event].w/hDict[event].m, 1, 1);
        $mtrow.append($('<td>').text(wlperc).attr('align', 'right'));
        
        $mtrow.append($('<td>').text(hDict[event].tiebreaks).attr('align', 'right'));
        $mtrow.append($('<td>').text(hDict[event].tbwon).attr('align', 'right'));
        $mtrow.append($('<td>').text(hDict[event].tiebreaks - hDict[event].tbwon).attr('align', 'right'));
        var tbperc = alignRound(hDict[event].tbwon/hDict[event].tiebreaks, 1, 1);
        $mtrow.append($('<td>').text(tbperc).attr('align', 'right'));
        
        $mtrow.append($firstdate);
        $mtrow.append($lastdate);
        
        // get best result, with title for years achieved
        var rdpref = ['W', 'F', 'SF', 'QF', 'RR', 'R16', 'R32', 'R64', 'R128'];
        var bestResult = '';
        for (var i = 0; i < rdpref.length; i++) {
            if (rdpref[i] in allResults) {
                bestResult = rdpref[i];
                break;
                }
            }
        
        var bestYears = [];
        for (md in hDict[event]['dates']) {
            if (hDict[event]['dates'].hasOwnProperty(md)) {
                if (hDict[event]['dates'][md] == bestResult) {bestYears.push(md);}
                }
            } 
        bestYears.sort();    
        var bestText =  bestYears.join(',');
        
	$bestres = $('<td>').text(bestResult).attr('align', 'right');
	$bestres.attr('title', bestText);        
        $mtrow.append($bestres);       
        
        $mtrow.append($('<td>').text(hDict[event].ms).attr('align', 'right')); // stat sample
        
        var rpw = 1 - (parseInt(hDict[event].ofwon) + parseInt(hDict[event].oswon))/hDict[event].opts; // dominance ratio:
        var spw = ((parseInt(hDict[event].fwon) + parseInt(hDict[event].swon))/hDict[event].pts);
        var spl = 1 - spw;
        var num = rpw/spl, dec = 2;
        var domratio = alignRound(rpw/spl, dec);

        var acerate = alignRound((hDict[event].aces/hDict[event].pts), 1, 1);
        var dfrate = alignRound((hDict[event].dfs/hDict[event].pts), 1, 1);
        var firstin = alignRound((hDict[event].firsts/hDict[event].pts), 1, 1);
        var fwin = alignRound((hDict[event].fwon/hDict[event].firsts), 1, 1);
        var swin = alignRound((hDict[event].swon/(hDict[event].pts-hDict[event].firsts)), 1, 1);
        var bksavedRate = alignRound((hDict[event].saved/hDict[event].chances), 1, 1)
        var bksaved = hDict[event].saved + '/' + hDict[event].chances;

        var pointswon = parseInt(hDict[event].fwon) + parseInt(hDict[event].swon) + (hDict[event].opts - hDict[event].ofwon - hDict[event].oswon);
        var tpw = alignRound((pointswon/(parseInt(hDict[event].pts) + parseInt(hDict[event].opts))), 1, 1);
        var rpw = alignRound(1 - ((parseInt(hDict[event].ofwon) + parseInt(hDict[event].oswon))/hDict[event].opts), 1, 1);
        var vace = alignRound((hDict[event].oaces/hDict[event].opts), 1, 1);
        var r1pw = alignRound(1 - (hDict[event].ofwon/hDict[event].ofirsts), 1, 1);
        var r2pw = alignRound(1 - (hDict[event].oswon/(hDict[event].opts-hDict[event].ofirsts)), 1, 1);
        var bkconvRate = alignRound(1 - (hDict[event].osaved/hDict[event].ochances), 1, 1)
        var bkconv = (hDict[event].ochances - hDict[event].osaved) + '/' + hDict[event].ochances;
        
        var statrow = [domratio, acerate, dfrate, firstin, fwin, swin, alignRound(spw, 1, 1), rpw]; 
        for (var i = 0; i < statrow.length; i++) {
            $mtrow.append($('<td>').text(statrow[i]).attr('align', 'right'));
            }        
	$bpsv = $('<td>').text(bksavedRate).attr('align', 'right');
	$bpsv.attr('title', bksaved);
	$bpcv = $('<td>').text(bkconvRate).attr('align', 'right');
	$bpcv.attr('title', bkconv);
        
        $mtrow.append($bpsv);
        $mtrow.append($bpcv);        
               
        $mtbody.append($mtrow);
        }

    // back to match table
    if ($mtbody.children().length == 0) {
        if (!$("#spanCareerqq").hasClass('selected')) { // career is not selected
            //var $mftspan = $('<span>').text('show career').attr('font-style', 'italic');
            //$mftspan.attr('id', 'careerclick').attr('class', 'likelink');
            var mft = '<span id="careerclick" class="likelink">Show career</span>, c';
            }
        else {var mft = 'C';}
        pTable = '<p id="matches">&nbsp;<br/>&nbsp;<br/>Your filters returned no matches. ' + mft + 'hange a filter or two, or press the '
        pTable = pTable + '<span class="menureset2 likelink">reset button</span>.</p>'
        $("#matches").replaceWith(pTable);
        }
    else {
        $matchtable.append($mtbody).attr('id', 'matches').attr('class', 'tablesorter');
        $matchtable.attr('border', 0).attr('cellspacing', 0).attr('cellpadding', 4);
        $("#stats").html($matchtable);
        $("#matches").tablesorter( {sortList: slist,
                                    headers: {11: {sorter:'ascNum'},
                                              12: {sorter:'descNum'},
                                              13: {sorter:'roundsDesc'},
                                    	      0: {sorter:'descNum'},	
                                              24: {sorter:'descNum'},
                                              3: {sorter:'descNum'},
                                              4: {sorter:'descNum'},
                                              5: {sorter:'descNum'}, 
                                              6: {sorter:'descNum'},
                                              7: {sorter:'descNum'},
                                              8: {sorter:'descNum'},
                                              9: {sorter:'descNum'},
                                              22: {sorter:'descNum'},
                                              23: {sorter:'descNum'},
                                              10: {sorter:'descNum'},
                                              17: {sorter:'ascNum'},
                                              15: {sorter:'descNum'},
                                              16: {sorter:'descNum'},
                                              14: {sorter:'descNum'},
                                              18: {sorter:'descNum'},
                                              19: {sorter:'descNum'},
                                              20: {sorter:'descNum'},
                                              21: {sorter:'descNum'}                                             
                                              }
                                   });
        }
    
    var ftitle = getFilterTitle("");
    var pgtitle = '<b>Tour-Level Event Records ('+ftitle+')</b>'; // <br/>Just testing blah blah blah.';
    $("#tablelabel").html(pgtitle);
    
    $(".eventclick").click(function () {
        // switch back to results tab
        $(".tabview").addClass("tablink");
        $("#tabResults").removeClass("tablink");
        // unlike 'tabclick', don't reset any filters
        var ename = $(this).parent().attr('class');
        //var withspaces = insertNameSpaces(opponent);
        //setPlayerFilter(withspaces, 1, 1); // this includes makeMatchTable
        if ($("#tourneyhead").hasClass("closed")) {
            $("#tourneyhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".tourneychoice").show();
            }
        var eclass = '#tourney'+ename+'qq';
	$(".tourneychoice").removeClass("selected").removeClass("tourneyselected"); 
	$(eclass).addClass("selected").addClass("tourneyselected");       
        $(".header").show();
        $("#minimumhead").hide();
        $(".minimumchoice").hide();
        $("#minyearshead").hide();
        $(".minyearschoice").hide();
        makeMatchTable({}, 1);            
        })
    }

function makeMatchTable(options, defSort) {
    var servestats, stdscores;
    var rows = [], chunks = [];
    var stx = $.trim($(".spanselected").text());
    // checking to see whether we need to add more matches

    if (keep_loading == 1) {   
        if (view == "doubles") {
            if ((matchmx_dubs.length <= shortlist && stx != 'Last 52') && (stx != '2023' && stx != '2024')) {
                if (careerjs_dubs == 1) {matchmx_dubs = matchmx_dubs.concat(morematchmx_dubs);}   // some way to force this to load, even if waiting
                };
            }
        else {    
            if ((matchmx.length <= shortlist && stx != 'Last 52') && (stx != '2023' && stx != '2024')) {
                if (careerjs == 1) {matchmx = matchmx.concat(morematchmx);}   // some way to force this to load, even if waiting
                };
            }
        }
        
    if (view != "") { // url specifies view other than results
        $(".tabview").addClass('tablink');
        if (view == "h2h") {$("#tabHead").removeClass('tablink');}
        else if (view == "events") {$("#tabEvents").removeClass('tablink');}
        else if (view == "doubles") {$("#tabDubs").removeClass('tablink');}
        view = '';
        } 
     
    if (!$('#tabResults').hasClass("tablink")) {var tabview = "results";}
    else if (!$('#tabHead').hasClass("tablink")) {var tabview = "head";}
    else if (!$('#tabEvents').hasClass("tablink")) {var tabview = "events";}
    else if (!$('#tabDubs').hasClass("tablink")) {var tabview = "doubles";}
    
    if (tabview == "results" || tabview == "doubles") {
        $("#abovestats").show();
        
        if ('overall' in prefilters) {
            $(".stattab").addClass('likelink');
            $(".statso").removeClass('likelink');
            delete prefilters['overall'];
            }
        else if ('return' in prefilters) {
            $(".stattab").addClass('likelink');
            $(".statsr").removeClass('likelink');
            delete prefilters['return'];
            }
        else if ('raw' in prefilters) {
            $(".stattab").addClass('likelink');
            $(".statsw").removeClass('likelink');
            delete prefilters['raw'];
            }
        else if ('overview' in prefilters) {
            $(".stattab").addClass('likelink');
            $(".statsa").removeClass('likelink');
            delete prefilters['overview'];
            }

        var hdrs; 
        var showstats = ''        
        if (tabview == "doubles") {
            $(".revscore").hide();
            $(".statsa").show();
            $(".statspacer").show();
            if (!$(".statso").hasClass('likelink')) {
                showstats = 'o';
                hdrs = hdrsDoublesServe;
                }
            else if (!$(".statsr").hasClass('likelink')) {
                showstats = 'r';
                hdrs = hdrsDoublesReturn;
                }
            else if (!$(".statsw").hasClass('likelink')) {
                showstats = 'w';
                hdrs = hdrsDoublesRaw;
                }
            else if (!$(".statsa").hasClass('likelink')) {
                showstats = 'a';
                hdrs = hdrsDoubles;
                }
            }
        else {
            $(".revscore").show();
            $(".statsa").hide();
            $(".statspacer").hide();
            if ($(".revscore").text() == 'Reverse Loss Scores') {stdscores = true;}
            else if ($(".revscore").text() == 'Standard Scores') {stdscores = false;}
            else if ('reverse' in prefilters) {
                $(".revscore").html('Standard Scores');
                stdscores = false;
                }
            else {
                $(".revscore").html('Reverse Loss Scores');
                stdscores = true;
                }
            if (!$(".statso").hasClass('likelink')) {
                showstats = 'o';
                hdrs = hdrsServe;
                }
            else if (!$(".statsr").hasClass('likelink')) {
                showstats = 'r';
                hdrs = hdrsReturn;
                }
            else if (!$(".statsw").hasClass('likelink')) {
                showstats = 'w';
                hdrs = hdrsRaw;
                }
            else if (!$(".statsa").hasClass('likelink')) {
                $(".stattab").addClass('likelink');
                $(".statso").removeClass('likelink');
                showstats = 'o';
                hdrs = hdrsServe;
                }
            }
        }
    else {$("#abovestats").hide();}

    if (tabview == "results") {
        renderResults(stdscores, showstats, hdrs, defSort);
        }
    if (tabview == "head") {
        renderHeadToHeads(defSort);
        }  
    if (tabview == "events") {
        renderEvents(defSort);
        }     
    if (tabview == "doubles") {
        renderDoubles(stdscores, showstats, hdrs, defSort);
        }      

    $("#titleclick").click(function () {
        // reset all other filters?
        if ($("#spanhead").hasClass("closed")) {
            $("#spanhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".spanchoice").toggle();
            }
        $(".spanchoice").removeClass("selected").removeClass('spanselected');
        $("#spanCareerqq").addClass('selected').addClass('spanselected');
        if ($("#roundhead").hasClass("closed")) {
            $("#roundhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".roundchoice").toggle();
            }
        $(".roundchoice").removeClass("selected").removeClass('roundselected');
        $("#round0").addClass('selected').addClass('roundselected');
        makeMatchTable({}, 0);
        })
    var paramsearchbox = "Find player";		
    $("#paramsearch").val(paramsearchbox);
    $("#paramsearch").focus(function() {
        if ($(this).val() == paramsearchbox) {$(this).val("");}
        var urlparams = getPermalinkParams();
        $( "#paramsearch" ).autocomplete({
                source: playerlist,
                minLength: 2,
                select: function(e, ui) {
                    var playerselect = ui.item.value;
                    var player = playerselect.slice(4);
                    var mw = playerselect.slice(1,2);
                    if (mw == 'M') {
                        var playerurl = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + player.replace(/ /g, '') + '&f=' + urlparams;
                        }
                    else {
                        var playerurl = 'https://www.tennisabstract.com/cgi-bin/wplayer.cgi?p=' + player.replace(/ /g, '') + '&f=' + urlparams;
                        }                        
                    window.open(playerurl, "_self");
                    }
            });
        });
        
    var pparams = getPermalinkParams();
    var new_path = 'https://www.tennisabstract.com/cgi-bin/player-classic.cgi?p=' + fullname.replace(/ /g, '') 
    if (pparams != '') {new_path = new_path + '&f=' + pparams;}
    history.pushState( {
        new_text: pparams,
        slug: new_path  
        }, null, new_path);
    //    }
    }

function makeMenus() {
    $('#footer').empty();
    if (!$('#tabDubs').hasClass("tablink") || view == "doubles") {
        var doubles = 1;
        }
    else {doubles = 0;}
    var $str = $('<table>').attr('class', 'menus');
    // partner first
    $str.append(
                $('<tr>').attr('id', 'partnerhead').attr('class', 'header closed') 
                        .append($('<th>').text(fourspaces + '\u00a0\u00a0' + 'Partner')
                        )
                )
    $spanspaces = $('<span>').text(fourspaces + fourspaces);
    $spaninput = $('<span>').append($('<input>').attr('id', 'partnersearch').css('width', '80'));
    $str.append(
                $('<tr>').attr('id', 'partnersearchrow').attr('class', 'partnerchoice inmenu') 
                        .append($('<td>').append($spanspaces).append($spaninput)
                        )
                )
    $str.append(
                $('<tr>').attr('id', 'partnerdef').attr('class', 'partnerselected partnerchoice selected inmenu menudefault')
                        .append($('<td>').text(fourspaces + fourspaces + 'All')
                                         )
                )
    // opponent
    $str.append(
                $('<tr>').attr('id', 'opphead').attr('class', 'header closed') 
                        .append($('<th>').text(fourspaces + '\u00a0\u00a0' + 'Opponent')
                        )
                )
    $spanspaces = $('<span>').text(fourspaces + fourspaces);
    $spaninput = $('<span>').append($('<input>').attr('id', 'oppsearch').css('width', '80'));
    $str.append(
                $('<tr>').attr('id', 'oppsearchrow').attr('class', 'oppchoice inmenu') 
                        .append($('<td>').append($spanspaces).append($spaninput)
                        )
                )
    $str.append(
                $('<tr>').attr('id', 'oppdef').attr('class', 'oppselected oppchoice selected inmenu menudefault')
                        .append($('<td>').text(fourspaces + fourspaces + 'All')
                                         )
                )
    // opp team 
    $str.append(
                $('<tr>').attr('id', 'oppteamhead').attr('class', 'header closed') 
                        .append($('<th>').text(fourspaces + '\u00a0\u00a0' + 'Opp Team')
                        )
                )
    $spanspaces = $('<span>').text(fourspaces + fourspaces);
    $spaninput = $('<span>').append($('<input>').attr('id', 'oppteamsearch').css('width', '80'));
    $str.append(
                $('<tr>').attr('id', 'oppteamsearchrow').attr('class', 'oppteamchoice inmenu') 
                        .append($('<td>').append($spanspaces).append($spaninput)
                        )
                )
    $str.append(
                $('<tr>').attr('id', 'oppteamdef').attr('class', 'oppteamselected oppteamchoice selected inmenu menudefault')
                        .append($('<td>').text(fourspaces + fourspaces + 'All')
                                         )
                )
    // beginning of h2h menu
    $str.append(
                $('<tr>').attr('id', 'h2hhead').attr('class', 'header closed') 
                        .append($('<th>').text(fourspaces + '\u00a0\u00a0' + 'Head-to-Head')
                        )
                )
    $spanspaces = $('<span>').text(fourspaces + fourspaces);
    $spaninput = $('<span>').append($('<input>').attr('id', 'h2hsearch').css('width', '80'));
    $str.append(
                $('<tr>').attr('id', 'h2hsearchrow').attr('class', 'h2hchoice inmenu') 
                        .append($('<td>').append($spanspaces).append($spaninput)
                        )
                )
    $str.append(
                $('<tr>').attr('id', 'h2hdef').attr('class', 'h2hselected h2hchoice selected inmenu menudefault')
                        .append($('<td>').text(fourspaces + fourspaces + 'All')
                                         )
                )
    // beginning of 'not' menu
    $str.append(
                $('<tr>').attr('id', 'nothead').attr('class', 'header closed') 
                        .append($('<th>').text(fourspaces + '\u00a0\u00a0' + 'Exclude Opp')
                        )
                )
    $spanspaces = $('<span>').text(fourspaces + fourspaces);
    $spaninput = $('<span>').append($('<input>').attr('id', 'notsearch').css('width', '80'));
    $str.append(
                $('<tr>').attr('id', 'notsearchrow').attr('class', 'notchoice inmenu') 
                        .append($('<td>').append($spanspaces).append($spaninput)
                        )
                )
    $str.append(
                $('<tr>').attr('id', 'notdef').attr('class', 'notselected notchoice selected inmenu menudefault')
                        .append($('<td>').text(fourspaces + fourspaces + 'None')
                                         )
                )
    for (j=0; j<filterlist.length; j++) {
        var filter = filterlist[j];
        var ftitle = filteropts[filter][0];
        var fhead = filter + 'head', fchoice = filter + 'choice', fselected = filter + 'selected';
        $str.append(
                    $('<tr>').attr('id', fhead).attr('class', 'header closed') 
                            .append($('<th>').text(fourspaces + '\u00a0\u00a0' + ftitle)
                            )
                    )
        $str.append(
                    $('<tr>').attr('id', filter + 'def').attr('class', fselected + ' ' + fchoice + ' selected inmenu menudefault')
                            .append($('<td>').text(fourspaces + fourspaces + filteropts[filter][1])
                                             )
                    )
        var flist = filteropts[filter].slice(2);
        for (i=0; i<flist.length; i++) {
            var $ent = $('<tr>').attr('class', 'inmenu ' + fchoice)
                                .append($('<td>').text(fourspaces + fourspaces + flist[i].replace(/ /g, '\u00a0'))
                                                 );
            if (filter in alphaFilters) {
                var adjtext = flist[i].replace(/ /g, '_');
                adjtext = adjtext.replace("'", 'xx');
                adjtext = adjtext.replace("+", 'xpx');
                $ent.attr('id', filter+adjtext+'qq');
                }
            else {$ent.attr('id', filter + i);}
            $str.append($ent);
            }
        //attempt at custom date ranges
        if (filter == 'span' || filter == 'rank') {
            if (filter == 'span' && (typeof tdates === 'undefined')) {}
            else if (filter == 'rank' && (typeof vranks === 'undefined')) {}
            else {
                var $ent = $('<tr>').attr('class', 'inmenu '+filter+'choice')
                                .append($('<td>').text(fourspaces + fourspaces + 'Custom')
                                                 );
                $ent.attr('id', filter+'Customqq');
                $str.append($ent);  
                }        
            }
        }
    $str.append($('<tr>').append($('<th>').append($('<span>').attr('class', 'menureset likelink').text('Reset'))))
    $str.append($('<tr>').append($('<td>').append($('<span>').html('&nbsp;'))))
    var filternote = '<i>Tip: Ctrl-Click to select multiple choices from the same menu.</i>'
    $str.append($('<tr>').append($('<td>').append($('<span>').html(filternote))))
    $('#footer').append($str);
    
    $("#h2hhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".h2hchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        if (choiceid != 'h2hsearchrow') {choiceClick(choiceid, 'h2h', ctrl);}
        });
    $("#nothead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".notchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        if (choiceid != 'notsearchrow') {choiceClick(choiceid, 'not', ctrl);}
        });
    $("#partnerhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".partnerchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        if (choiceid != 'partnersearchrow') {choiceClick(choiceid, 'partner', ctrl);}
        });
    $("#opphead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".oppchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        if (choiceid != 'oppsearchrow') {choiceClick(choiceid, 'opp', ctrl);}
        });
    $("#oppteamhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".oppteamchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        if (choiceid != 'oppteamsearchrow') {choiceClick(choiceid, 'oppteam', ctrl);}
        });
    $("#spanhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });       
    $(".spanchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'span', ctrl);
        });
    
    $("#surfacehead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".surfacechoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'surface', ctrl);
        });
    $("#levelhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".levelchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'level', ctrl);
        });
    $("#tourneyhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".tourneychoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'tourney', ctrl);
        });
    $("#roundhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".roundchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'round', ctrl);
        });
    $("#entryhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".entrychoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'entry', ctrl);
        });
    $("#rankhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".rankchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'rank', ctrl);
        });
    $("#oentryhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".oentrychoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'oentry', ctrl);
        });
    $("#handhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".handchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'hand', ctrl);
        });
    $("#handshead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".handschoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'hands', ctrl);
        });
    $("#agehead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".agechoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'age', ctrl);
        });
    $("#heighthead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".heightchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'height', ctrl);
        });
    $("#countryhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".countrychoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'country', ctrl);
        });
    $("#resultshead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".resultschoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'results', ctrl);
        });
    $("#setshead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".setschoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'sets', ctrl);
        });
    $("#scoreshead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".scoreschoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'scores', ctrl);
        });
    $("#asrankhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".asrankchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'asrank', ctrl);
        });
    $("#statshead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $("#statsdef").click(function (event) { // if creating custom stat filters to later click again, need to change this to match other filters: .statschoice
        if (event.ctrlKey) {var ctrl=1;} // probably disable
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'stats', ctrl);
        });
    $("#extrashead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".extraschoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'extras', ctrl);
        });
    $("#minimumhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".minimumchoice").click(function (event) {
        //if (event.ctrlKey) {var ctrl=1;}
        //else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'minimum', 0); // only allow one selection
        }); 
    $("#minyearshead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".minyearschoice").click(function (event) {
        //if (event.ctrlKey) {var ctrl=1;}
        //else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'minyears', 0); // only allow one selection
        });         
    $("#crankhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".crankchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'crank', ctrl); // only allow one selection
        });  
    $("#prankhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".prankchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'prank', ctrl); // only allow one selection
        }); 
    $("#phandhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".phandchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'phand', ctrl); // only allow one selection
        });               
    $("#spanCustomqq").click(function (event) {
        $("#spanstartrow").remove();
        // smarter way -- check if it exists, then build if not?
        var $s = $('<select />').attr('id', 'spanstart');
        $('<option />', {value: 'default', text: 'Start'}).appendTo($s);
        for (i=0; i<tdates.length; i++) {
            var showdate = tdates[i].slice(6) + '-' + months[tdates[i].slice(4,6)] + '-' + tdates[i].slice(0,4);
            $('<option />', {value: tdates[i], text: showdate}).appendTo($s);
            }
        $sspan = $('<span>').text(fourspaces + fourspaces);
        $std = $('<td>').append($sspan).append($s)
        $startrow = $('<tr>').attr('class', 'inmenu spanchoice').attr('id', 'spanstartrow').append($std);                                                     
        $("#spanCustomqq").after($startrow);
        $startrow.toggle();
        $('#spanstart').change(function() {
            $("#spanendrow").remove();
            startdate = $("#spanstart option:selected").val();
            var $t = $('<select />').attr('id', 'spanend');
            $('<option />', {value: 'default', text: 'End'}).appendTo($t);
            for (i=0; i<tdates.length; i++) {
                if (tdates[i] < startdate) {}
                else {
                    var showdate = tdates[i].slice(6) + '-' + months[tdates[i].slice(4,6)] + '-' + tdates[i].slice(0,4);
                    $('<option />', {value: tdates[i], text: showdate}).appendTo($t);
                    }
                }
            $espan = $('<span>').text(fourspaces + fourspaces);
            $etd = $('<td>').append($espan).append($t)    
            $endrow = $('<tr>').attr('class', 'inmenu spanchoice').attr('id', 'spanendrow').append($etd);
            $("#spanstartrow").after($endrow);
            $endrow.toggle();  
            $('#spanend').change(function() {
                //alert('end is changed');
                enddate = $("#spanend option:selected").val();
                makeMatchTable({}, 0);
                });      
            });
        });
    $("#rankCustomqq").click(function (event) {
        $("#rankstartrow").remove();
        // smarter way -- check if it exists, then build if not?
        var $s = $('<select />').attr('id', 'rankstart');
        $('<option />', {value: 'default', text: 'Max'}).appendTo($s);
        for (i=0; i<vranks.length; i++) {
            $('<option />', {value: vranks[i], text: vranks[i]}).appendTo($s);
            }
        $srank = $('<rank>').text(fourspaces + fourspaces);
        $srd = $('<td>').append($srank).append($s)
        $lowrow = $('<tr>').attr('class', 'inmenu rankchoice').attr('id', 'rankstartrow').append($srd);                                                     
        $("#rankCustomqq").after($lowrow);
        $lowrow.toggle();
        $('#rankstart').change(function() {
            $("#rankendrow").remove();
            lowrank = parseInt($("#rankstart option:selected").val());
            var $t = $('<select />').attr('id', 'rankend');
            $('<option />', {value: 'default', text: 'Min'}).appendTo($t);
            for (i=0; i<vranks.length; i++) {
                if (parseInt(vranks[i]) < lowrank) {}
                else {
                    $('<option />', {value: vranks[i], text: vranks[i]}).appendTo($t);
                    }
                }
            $erank = $('<rank>').text(fourspaces + fourspaces);
            $erd = $('<td>').append($erank).append($t)    
            $highrow = $('<tr>').attr('class', 'inmenu rankchoice').attr('id', 'rankendrow').append($erd);
            $("#rankstartrow").after($highrow);
            $highrow.toggle();  
            $('#rankend').change(function() {
                //alert('end is changed');
                highrank = parseInt($("#rankend option:selected").val());
                makeMatchTable({}, 0);
                });      
            });
        });
    $(".menureset").click(function () {
        resetFilters();
        // close open menus?
        makeMatchTable({}, 1);
        });
        
    var h2hsearchbox = "Add H2H";		
    $("#h2hsearch").val(h2hsearchbox);
    $("#h2hsearch").focus(function() {
        if ($(this).val() != '') {$(this).val("");}
        $( "#h2hsearch" ).autocomplete({
                source: ochoices,
                minLength: 2,
                select: function(e, ui) {setPlayerFilter(ui.item.value, 1, 0);}
            }) 
        });
    var notsearchbox = "Add NOT";		
    $("#notsearch").val(notsearchbox);
    $("#notsearch").focus(function() {
        if ($(this).val() != '') {$(this).val("");}
        $( "#notsearch" ).autocomplete({
                source: ochoices,
                minLength: 2,
                select: function(e, ui) {setNotPlayerFilter(ui.item.value, 1);}
            }) 
        });
    var partnersearchbox = "Add Partner";		
    $("#partnersearch").val(partnersearchbox);
    $("#partnersearch").focus(function() {
        if ($(this).val() != '') {$(this).val("");}
        $( "#partnersearch" ).autocomplete({
                source: pchoices,
                minLength: 2,
                select: function(e, ui) {setPartnerFilter(ui.item.value, 1, 0);}
            }) 
        });
    var oppsearchbox = "Add Opponent";		
    $("#oppsearch").val(oppsearchbox);
    $("#oppsearch").focus(function() {
        if ($(this).val() != '') {$(this).val("");}
        $( "#oppsearch" ).autocomplete({
                source: ochoices_dubs,
                minLength: 2,
                select: function(e, ui) {setOpponentFilter(ui.item.value, 1, 0);}
            }) 
        });
    var oppteamsearchbox = "Add Opp Team";		
    $("#oppteamsearch").val(oppteamsearchbox);
    $("#oppteamsearch").focus(function() {
        if ($(this).val() != '') {$(this).val("");}
        $( "#oppteamsearch" ).autocomplete({
                source: otchoices,
                minLength: 2,
                select: function(e, ui) {setOppteamFilter(ui.item.value, 1, 0);}
            }) 
        });
        
    var $s = $('<select />').attr('id', 'statcustomname');
    $('<option />', {value: 'default', text: 'Stat'}).appendTo($s);
    for (i=0; i<statlist.length; i++) {
        $('<option />', {value: statlist[i], text: statlist[i]}).appendTo($s);
        }
    $sspan = $('<span>').text(fourspaces + fourspaces);
    $std = $('<td>').append($sspan).append($s)
    $startrow = $('<tr>').attr('class', 'inmenu statschoice').attr('id', 'stats0').append($std);                                                     
    $('#statsdef').after($startrow);
    $('#statcustomname').change(function() {
        $("#stats0").addClass("selected").addClass("statsselected");
        $("#statsdef").removeClass("selected").removeClass("statsselected");        
        $("#statoperatorrow").remove();
        $("#statinputrow").remove();
        $("#statbuttonrow").remove(); 
        statchoice = $("#statcustomname option:selected").val();
        var $t = $('<select />').attr('id', 'statoperator');
        $('<option />', {value: 'default', text: 'Operator'}).appendTo($t);
        $('<option />', {value: 'ge', text: '>= at least'}).appendTo($t);
        $('<option />', {value: 'le', text: '<= up to'}).appendTo($t);
        $('<option />', {value: 'gt', text: '> more than'}).appendTo($t);
        $('<option />', {value: 'lt', text: '< less than'}).appendTo($t);
        $('<option />', {value: 'eq', text: '= equal to'}).appendTo($t);
        $espan = $('<span>').text(fourspaces + fourspaces);
        $etd = $('<td>').append($espan).append($t)    
        $endrow = $('<tr>').attr('class', 'inmenu statschoice').attr('id', 'statoperatorrow').append($etd);
        $("#stats0").after($endrow);
        $endrow.toggle();  
        $('#statoperatorrow').change(function() {
            $("#statinputrow").remove();
            $("#statbuttonrow").remove();
            statoperatorchoice = $("#statoperator option:selected").val();
            // text box for manual entry
            var $v = $('<input />').attr('type', 'text').attr('id', 'statinputbox').attr('value', '').attr('style', "width:50px;"); 
            $ispan = $('<span>').text(fourspaces + fourspaces);
            if (statchoice in statpercs) {
                $perc = $('<span>').text(' %');
                $itd = $('<td>').append($ispan).append($v).append($perc);
                }
            else if (statchoice == 'Time') {
                $timeEx = $('<span>').text(' (h:mm)');
                $itd = $('<td>').append($ispan).append($v).append($timeEx);
                }           
            else {$itd = $('<td>').append($ispan).append($v);}
            $inputrow = $('<tr>').attr('class', 'inmenu statschoice').attr('id', 'statinputrow').append($itd);
            $("#statoperatorrow").after($inputrow);
            $inputrow.toggle();                     
            // button 'apply'
            var $w = $('<input />').attr('type', 'submit').attr('value', 'Apply').attr('style', "width:50px;").attr('id', 'statapply');
            $bspan = $('<span>').text(fourspaces + fourspaces);
            $btd = $('<td>').append($bspan).append($w);
            $buttonrow = $('<tr>').attr('class', 'inmenu statschoice').attr('id', 'statbuttonrow').append($btd);
            $("#statinputrow").after($buttonrow);
            $buttonrow.toggle(); 
            $("#statapply").click(function (event) {
                statinput = $("#statinputbox").val();
                if (statchoice == 'Time') {
                    var hm = statinput.split(':');
                    // probably need some error handling for user input, esp e.g. :50 without hour number
                    statinput = parseInt(hm[0])*60 + parseInt(hm[1]);
                    }  
                makeMatchTable({}, 0);             
                });
            });
        });
    }

var alphaFilters = {'country': '', 'tourney': '', 'span': '', 'rank': ''};
//var alphaFilters = {};

var bhdict = {'1': 'one', '2': 'two'};

function insertPictureBio() {
    var plname = '<span style="fontsize:24px"><b>' + fullname + ' [' + country + ']</b></span>';
    if (typeof dob === 'undefined') {var birthdate = '';}
    else {
        var bd = dob.toString();
        var birthdate = 'Date of birth: ' + bd.slice(6) + '-' + months[bd.slice(4, 6)] + '-' + bd.slice(0, 4);
        }

    var pic_src = 'https://www.tennisabstract.com/photos/' + fullname.toLowerCase().replace(/ /g, "_") + '-' + photog + '.jpg'
    // background-color:d3d3d3; 
    var biotable = '<p id="biog"><table style="border-spacing:0"><tr><td><img src="' + pic_src + '" height="225" width="150"></td>'
    biotable = biotable + '<td>&nbsp;&nbsp;</td><td style="vertical-align:top">'
    biotable = biotable + '<table cellpadding=2 cellspacing=1><tr><td>' + plname + fourspaces + fourspaces + '</td></tr>';  

    if (typeof twitter != 'undefined' && twitter != "") {
        var tline = '<a href="https://twitter.com/' + twitter + '" target="_blank">@' + twitter + '</a>';
        biotable = biotable + '<tr><td>' + tline + '</td></tr>';
        }
    else {
        biotable = biotable + '<tr><td>&nbsp;</td></tr>'; 
        }

    biotable = biotable + '<tr><td>' + birthdate + '</td></tr>';
    var handed;
    if (hand == 'R') {handed = 'Plays: Right-handed';}
    else if (hand == 'L') {handed = 'Plays: Left-handed';}
    else {handed = '';}
    if (typeof backhand != 'undefined' && backhand != '') {handed = handed.slice(0,-7) + ' (' + bhdict[backhand] + '-handed backhand)';}
    if (handed != '') {
        biotable = biotable + '<tr><td>' + handed + '</td></tr>'; 
        }

    if (currentrank == '') {var crank = '';}
    else {var crank = 'Current rank: <b>'+currentrank.toString()+'</b>'}; 
    //if (typeof liverank != 'undefined' && liverank != '') {var lrank = '&nbsp;&nbsp;&nbsp;<a target="_blank" href="https://live-tennis.eu/"><i>Live: ' + liverank.toString() + '</i></a>';}
    //else {var lrank = '';} 
    var lrank = '';
    if (crank != '') {
        biotable = biotable + '<tr><td>' + crank + lrank + '</td></tr>'; 
        }  

    if (peakrank != 'UNR') {var prank = 'Peak rank: <b>' + peakrank.toString()+'</b>';}
    else {var prank = '';}
    if (peakfirst != '') {
    	var pf = peakfirst.toString();
    	prank = prank + ' (' + pf.slice(6) + '-' + months[pf.slice(4, 6)] + '-' + pf.slice(0, 4) + ')';
    	}
    if (prank != '') {
        biotable = biotable + '<tr><td>' + prank + '</td></tr>'; 
        } 
        
    // if (typeof current_dubs === 'undefined' || current_dubs == "" || current_dubs == "UNR") {
    //     if (!(typeof peak_dubs === 'undefined' || peak_dubs == "")) {
    //         var drank = "Doubles peak: <b>" + peak_dubs.toString() + '</b>'
    //         var pfd = peakfirst_dubs.toString();
    //         drank = drank + ' (' + pfd.slice(6) + '-' + months[pfd.slice(4, 6)] + '-' + pfd.slice(0, 4) + ')';
    //         }
    //     else {drank = "&nbsp;";}
    //     }
    // else {
    //     var drank = "Doubles rank: <b>" + current_dubs.toString() + '</b>&nbsp;|&nbsp;';
    //     drank = drank + 'Peak: <b>' + peak_dubs.toString() + '</b>'
    //     }
    var drank = "&nbsp;";
    biotable = biotable + '<tr><td>' + drank + '</td></tr>'; 
        
    var profiles = '';
    // if (typeof atp_id != 'undefined' && atp_id != "") {
    //     var atp_stem = "https://www.atpworldtour.com/en/players/";
    //     profiles = profiles + '<a href="' + atp_stem + atp_id + '/overview" target="_blank" title="Profile at atpworldtour.com">ATP</a> | ';
    //     }   
    // if (typeof itf_id != 'undefined' && itf_id != "") {
    //     var itf_stem = "https://www.itftennis.com/procircuit/players/player/profile.aspx?playerid=";
    //     profiles = profiles + '<a href="' + itf_stem + itf_id + '" target="_blank" title="Profile at the ITF website">ITF</a> | ';
    //     }
    // if (typeof dc_id != 'undefined' && dc_id != "") {
    //     var dc_stem = "https://www.daviscup.com/en/players/player.aspx?id=";
    //     profiles = profiles + '<a href="' + dc_stem + dc_id + '" target="_blank" title="Profile at Davis Cup website">DC</a> | ';
    //     }
    if (typeof wiki_id != 'undefined' && wiki_id != "") {
        var wiki_stem = "https://en.wikipedia.org/wiki/";
        profiles = profiles + '<a href="' + wiki_stem + wiki_id + '" target="_blank" title="Profile at Wikipedia">Wikipedia</a> | '  ;
        }
        
    if (profiles != '') {
        biotable = biotable + '<tr><td>Profile: ' + profiles.slice(0,-3) + '</td><td>&nbsp;</td></tr>';
        } 
    else {
        biotable = biotable + '<tr><td>&nbsp;</td></tr>'; 
        } 

    // if picture (and maybe in general) need to move ranking history link and titles/finals out of this box
    //var rhlink = '<a href="https://tennisabstract.herokuapp.com/ATP/RankHistory/' + fullname.replace(/ /g, "_") + '/YearEndDate/Points/">Ranking history and highlights</a>';
    var titlelink = '<span id="titleclick" class="likelink">Titles/Finals</span>';
    //biotable = biotable + '<tr><td>' + rhlink + '</td></tr><tr><td>' + titlelink + '</td></tr>';
    biotable = biotable + '<tr><td>' + titlelink + '</td></tr>';

    biotable = biotable + '<tr><td>' + '<i>Photo: <a target="_blank" href="' + photog_link + '">' + photog_credit + '</a></i></td></tr>';

    $("#bio").html(biotable + '</table></td><td>&nbsp;&nbsp;</td></tr></table></p>');
    }

function insertBio() {
    var plname = '<span style="fontsize:24px"><b>' + fullname + ' [' + country + ']</b></span>';
    if (typeof dob === 'undefined') {var birthdate = '';}
    else {
        var bd = dob.toString();
        var birthdate = 'Date of birth: ' + bd.slice(6) + '-' + months[bd.slice(4, 6)] + '-' + bd.slice(0, 4);
        }
    var handed;
    if (hand == 'R') {handed = 'Plays: Right-handed';}
    else if (hand == 'L') {handed = 'Plays: Left-handed';}
    else {handed = '';}
    if (typeof backhand != 'undefined' && backhand != '') {handed = handed.slice(0,-7) + ' (' + bhdict[backhand] + '-handed backhand)';}
    if (currentrank == '') {var crank = '';}
    else {var crank = 'Current rank: <b>'+currentrank.toString()+'</b>'}; 
    // if (typeof liverank != 'undefined' && liverank != '') {var lrank = '&nbsp;&nbsp;&nbsp;<a target="_blank" href="https://live-tennis.eu/"><i>Live: ' + liverank.toString() + '</i></a>';}
    // else {var lrank = '';}
    var lrank = '';
    if (peakrank != 'UNR') {var prank = 'Peak rank: <b>' + peakrank.toString()+'</b>';}
    else {var prank = '';}
    if (peakfirst != '') {
    	var pf = peakfirst.toString();
    	prank = prank + ' (' + pf.slice(6) + '-' + months[pf.slice(4, 6)] + '-' + pf.slice(0, 4) + ')';
    	}
    //if (typeof twitter != 'undefined' && twitter != "") {var tline = 'Twitter: <a href="https://twitter.com/' + twitter + '" target="_blank">@' + twitter + '</a>';}
    if (typeof twitter != 'undefined' && twitter != "") {var tline = '<a href="https://twitter.com/' + twitter + '" target="_blank">@' + twitter + '</a>';}
    else {var tline = '';}
    var biotable = '<p id="biog"><table cellpadding=1 cellspacing=1><tr><td>' + plname + fourspaces + fourspaces + '</td><td>' + tline + '</td></tr>';
    if (birthdate != '') {var rowtwo = '<tr><td>' + birthdate + fourspaces + fourspaces + '</td><td>' + handed + '</td></tr>';}
    else {var rowtwo = '<tr><td>' + handed + '</td><td>&nbsp;</td></tr>';}
    if (crank != '') {var rowthree = '<tr><td>' + crank + lrank + '</td><td>' + prank + '</td></tr>';}
    else {var rowthree = '<tr><td>' + prank + '</td><td>&nbsp;</td></tr>';}
    
    var profiles = '';
    // if (typeof atp_id != 'undefined' && atp_id != "") {
    //     var atp_stem = "https://www.atpworldtour.com/en/players/";
    //     profiles = profiles + '<a href="' + atp_stem + atp_id + '/overview" target="_blank" title="Profile at atpworldtour.com">ATP</a> | ';
    //     }   
    // if (typeof itf_id != 'undefined' && itf_id != "") {
    //     var itf_stem = "https://www.itftennis.com/procircuit/players/player/profile.aspx?playerid=";
    //     profiles = profiles + '<a href="' + itf_stem + itf_id + '" target="_blank" title="Profile at the ITF website">ITF</a> | ';
    //     }
    // if (typeof dc_id != 'undefined' && dc_id != "") {
    //     var dc_stem = "https://www.daviscup.com/en/players/player.aspx?id=";
    //     profiles = profiles + '<a href="' + dc_stem + dc_id + '" target="_blank" title="Profile at Davis Cup website">DC</a> | ';
    //     }
    if (typeof wiki_id != 'undefined' && wiki_id != "") {
        var wiki_stem = "https://en.wikipedia.org/wiki/";
        profiles = profiles + '<a href="' + wiki_stem + wiki_id + '" target="_blank" title="Profile at Wikipedia">Wikipedia</a> | '  ;
        }
        
    if (profiles != '') {
        var profile_row = '<tr><td>Profile: ' + profiles.slice(0,-3) + '</td><td>&nbsp;</td></tr>';
        } 
    else {var profile_row = '';}      

    var rhlink = '&nbsp;' // '<a href="https://tennisabstract.herokuapp.com/ATP/RankHistory/' + fullname.replace(/ /g, "_") + '/YearEndDate/Points/">Ranking history and highlights</a>';
    var titlelink = '<span id="titleclick" class="likelink">Titles/Finals</span>'
    var rowfour =  '<tr><td>' + titlelink + '</td><td>' + rhlink + '</td></tr>'; 
    $("#bio").html(biotable + rowtwo + rowthree + profile_row + rowfour + '</table></p>');
    }

function choiceClick(choiceid, filt, ctrl) {
    //var menudef = 0;
    // if click is on default -- shift doesn't matter, presets don't matter; select default and deselect others
    // (possible exception of 'span' menu?
    if (choiceid.slice(-3) == 'def') {
        $("." + filt + "choice").removeClass("selected").removeClass(filt + "selected");
        $('#' + choiceid).addClass("selected").addClass(filt + "selected");
        }
    // if click on choice that is already selected [shift doesn't matter]
    else if ($('#' + choiceid).hasClass('selected')) {
        // - if it's the only one, go back to default
        if ($('.' + filt + 'selected').length == 1) {
            $('#' + filt + 'def').addClass("selected").addClass(filt + "selected");
            }
        $('#' + choiceid).removeClass("selected").removeClass(filt + "selected");
        }
    // if choice not already selected, and shift, then select new choice
    else if (ctrl == 1) {
        $('#' + choiceid).addClass("selected").addClass(filt + "selected");
        }
    // choice not already selected, not shift: take away all, make this selection
    else {
        $("." + filt + "choice").removeClass("selected").removeClass(filt + "selected");
        $('#' + choiceid).addClass("selected").addClass(filt + "selected");
        }
    if (choiceid.slice(-8) == 'Customqq') {return;}
    makeMatchTable({}, 0);
    }

function setPlayerFilter(player, make, defSort) {
    $('.h2hchoice').removeClass('selected').removeClass('h2hselected');
    var playerid = '#' + 'h2h' + player.replace(/ /g, '');
    if ($(playerid).length == 0) { // new player to the list
        $newcell = $('<td>').text(fourspaces + fourspaces + player.replace(/ /g, '\u00a0'));
        $newrow = $('<tr>').attr('class', 'h2hselected h2hchoice selected inmenu').attr('id', playerid.slice(1));
        $newrow.append($newcell);
        $('#nothead').before($newrow);
        if ($('#h2hhead').hasClass('open')) {$newrow.toggle();}
        $(playerid).click(function () {
            //var choiceid = $(this).attr('id')
            if (event.ctrlKey) {var ctrl=1;}
            else {var ctrl=0;}
            choiceClick(playerid.slice(1), 'h2h', ctrl);
            });
        }
    else {$(playerid).addClass('selected').addClass('h2hselected');}
    //set time span to career
    if (make==1) {makeMatchTable({}, defSort);}
    }
    
function setPartnerFilter(player, make, defSort) {
    $('.partnerchoice').removeClass('selected').removeClass('partnerselected');
    var playerid = '#' + 'partner' + player.replace(/ /g, '');
    if ($(playerid).length == 0) { // new player to the list
        $newcell = $('<td>').text(fourspaces + fourspaces + player.replace(/ /g, '\u00a0'));
        $newrow = $('<tr>').attr('class', 'partnerselected partnerchoice selected inmenu').attr('id', playerid.slice(1));
        $newrow.append($newcell);
        $('#opphead').before($newrow);
        if ($('#partnerhead').hasClass('open')) {$newrow.toggle();}
        $(playerid).click(function () {
            //var choiceid = $(this).attr('id')
            if (event.ctrlKey) {var ctrl=1;}
            else {var ctrl=0;}
            choiceClick(playerid.slice(1), 'partner', ctrl);
            });
        }
    else {$(playerid).addClass('selected').addClass('partnerselected');}
    //set time span to career
    if (make==1) {makeMatchTable({}, defSort);}
    }
    
function setOpponentFilter(player, make, defSort) {
    $('.oppchoice').removeClass('selected').removeClass('oppselected');
    var playerid = '#' + 'opp' + player.replace(/ /g, '');
    if ($(playerid).length == 0) { // new player to the list
        $newcell = $('<td>').text(fourspaces + fourspaces + player.replace(/ /g, '\u00a0'));
        $newrow = $('<tr>').attr('class', 'oppselected oppchoice selected inmenu').attr('id', playerid.slice(1));
        $newrow.append($newcell);
        $('#oppteamhead').before($newrow);
        if ($('#opphead').hasClass('open')) {$newrow.toggle();}
        $(playerid).click(function () {
            //var choiceid = $(this).attr('id')
            if (event.ctrlKey) {var ctrl=1;}
            else {var ctrl=0;}
            choiceClick(playerid.slice(1), 'opp', ctrl);
            });
        }
    else {$(playerid).addClass('selected').addClass('oppselected');}
    //set time span to career
    if (make==1) {makeMatchTable({}, defSort);}
    }
    
function setOppteamFilter(player, make, defSort) {
    $('.oppteamchoice').removeClass('selected').removeClass('oppteamselected');
    var playerid = '#' + 'oppteam' + player.replace(/ /g, '');
    if ($(playerid).length == 0) { // new player to the list
        var slash_replace = '/<br/>' + fourspaces + "&nbsp;" + fourspaces
        $newcell = $('<td>').html(fourspaces + fourspaces + player.replace(/ /g, '\u00a0').replace('/', slash_replace));
        $newrow = $('<tr>').attr('class', 'oppteamselected oppteamchoice selected inmenu').attr('id', playerid.slice(1));
        $newrow.append($newcell);
        $('#spanhead').before($newrow);
        if ($('#oppteamhead').hasClass('open')) {$newrow.toggle();}
        $(playerid).click(function () {
            //var choiceid = $(this).attr('id')
            if (event.ctrlKey) {var ctrl=1;}
            else {var ctrl=0;}
            choiceClick(playerid.slice(1), 'oppteam', ctrl);
            });
        }
    else {$(playerid).addClass('selected').addClass('oppteamselected');}
    //set time span to career
    if (make==1) {makeMatchTable({}, defSort);}
    }

function setNotPlayerFilter(player, make) {
    $('.notchoice').removeClass('selected').removeClass('notselected');
    var playerid = '#' + 'not' + player.replace(/ /g, '');
    if ($(playerid).length == 0) { // new player to the list
        $newcell = $('<td>').text(fourspaces + fourspaces + player.replace(/ /g, '\u00a0'));
        $newrow = $('<tr>').attr('class', 'notselected notchoice selected inmenu').attr('id', playerid.slice(1));
        $newrow.append($newcell);
        $('#spanhead').before($newrow);
        if ($('#nothead').hasClass('open')) {$newrow.toggle();}
        $(playerid).click(function () {
            //var choiceid = $(this).attr('id')
            if (event.ctrlKey) {var ctrl=1;}
            else {var ctrl=0;}
            choiceClick(playerid.slice(1), 'not', ctrl);
            });
        }
    else {$(playerid).addClass('selected').addClass('notselected');}
    //set time span to career
    if (make==1) {makeMatchTable({}, 0);}
    }

function fHeaderClick(choiceid) {
    var filt = choiceid.slice(0, -4);
    $("." + filt + "choice").toggle();
    if ($("#" + filt + "head").hasClass("closed")) {$("#" + filt + "head").removeClass("closed").addClass("open");}
    else {$("#" + filt + "head").removeClass("open").addClass("closed");}
    if ($("." + filt + "choice").is(':visible') == false && $("#" + filt + "def").hasClass("selected") == false) {
        // check if default is selected
        $("#" + filt + "head").addClass("selected");
        }
    else {$("#" + filt + "head").removeClass("selected");}
    }
    
var defParams = ''    
window.onpopstate = function (event) {
    if (event.state == null) {
        var prefs = 0;
        for (pf in prefilters) {prefs += 1;}
        if (prefs == 0) {newPrefilters(defParams);}
        }
    else if (event.state.new_text.indexOf('.cgi') != -1) {
        newPrefilters(defParams);
        }
    else {
        //alert('event state '+event.state.slug);
        newPrefilters(event.state.new_text);
        new_text = event.state.new_text;
        }
    };
    
var startdate = '', enddate = '';
var lowrank = '', highrank = '';
var statchoice = '', statoperatorchoice = '', statinput = '';
var statlist = ['Dom Ratio', 'Ace Perc', 'DF Perc', '1st In', '1st WPc', '2nd WPc', 'BP Svd Pc', 'BP Saved', 'BPC Faced',
                    'Time', 'TPW', 'RPW', 'vAce Pc', 'v1st WPc', 'v2nd WPc', 'BP Cnv Pc', 'BP Conv', 'BP Chncs', 'Tot Pts',
                    'Aces', 'DFs', 'Sv Pts', '1Sv Pts', '2Sv Pts', 'vAces'];
var statpercs = {'Ace Perc': 1, 'DF Perc': 1, '1st In': 1, '1st WPc': 1, '2nd WPc': 1, 'BP Svd Pc': 1, 
                     'TPW': 1, 'RPW': 1, 'vAce Pc': 1, 'v1st WPc': 1, 'v2nd WPc': 1, 'BP Cnv Pc': 1}

$(document).ready(function() { 

    if (typeof navbar !== 'undefined') {
        $("#navbar").html(navbar);
        } 

    //var pparams = getPermalinkParams();
    var thisurl = window.location.href
    if (thisurl.indexOf('&') == -1) {var pparams = '';}
    else {var pparams = thisurl.slice(thisurl.indexOf('&')).replace("&f=", "");}
    //else {var pparams = '';}
    if (typeof(history.replaceState) !== "undefined") {
        history.replaceState({
           //old_text: old_text.val(),
           new_text: pparams,
           slug: location.pathname.replace("/", "")
        }, null, null);
    }

    if (typeof photog == 'undefined' || photog == '') {
        insertBio();
        }
    else {
        insertPictureBio();
        }

    // add chart agg link to span id="shotsHere"
    if (typeof chartagg != 'undefined' && chartagg == 1) {
        $ca_span = $('<span />').addClass('tablink').addClass('tabview');
        $ca_span.css('background-color', '#e6EEEE').css('position', 'relative').css('top', '5px');
        var ca_link = 'https://www.tennisabstract.com/charting/' + fullname.replace(/ /g, '') + '.html'
        var ihtml = '&nbsp;<b><a href="' + ca_link + '" target="_blank" style="text-decoration:none">Shot-by-Shot Stats</a></b>&nbsp;';
        $ca_span.html(ihtml);
        $("#shotsHere").append($ca_span);
        // $('<br />').insertBefore($ca_span);
        }
   
    // if (typeof playernews === 'undefined') {var pnewsrows = '';} //|| playernews == ''
    // else if (playernews == '') {var pnewsrows = '';}
    // else {
    //     var pnewsrows = '';
    //     for (j=0; j<playernews.length; j++) {
    //         pnewsrows = pnewsrows + '<br/>' + playernews[j];
    //         }
    //     if (playernews.length > 0) {pnewsrows = pnewsrows + '<br/>&nbsp;';}
    //     }

    // if (typeof upcoming === 'undefined') {var upcomingrow = '';}
    // else if (upcoming == '') {var upcomingrow = '';}
    // else {
    //     if (month < 10) {var udate = day + ' ' + months['0'+month+''];}
    //     else {var udate = day + ' ' + months[month+''];}
    //     var upcomingrow = '<br/><b>' + udate + '</b> Upcoming Tournaments: ' + upcoming;} // add date dynamically
    //     //if (pnewsrows == '') {pnewsrows = '<br/>&nbsp;';}
    // if (pnewsrows == '' && upcomingrow == '') {} //  && upcomingrow == ''
    // else {
    //     var newsanalysis = '<span style="background-color:#e6EEEE;"><b>News and Analysis</b></span>'
    //     var yourlinkhere = '<i><a href="https://tennisabstract.com/main/sitesubmit.html">your link here?</a></i>'
    //     var pnews = '&nbsp;<br/>' + newsanalysis + fourspaces + yourlinkhere + upcomingrow + pnewsrows; // upcomingrow + pnewsrows;
    //     $("#playernews").html(pnews);
    //     }
    
    if (typeof careerjs_dubs === 'undefined') {  
        // in case doubles data didn't load / doesn't exist  
        $("#tabDubs").hide();
        $("#tabDubsSpacer").hide();
        careerjs_dubs = 0;
        view = "";
        }        
    else if (view == "") {  // check ranks / peak ranks to see if should default to dubs view
        if (typeof currentrank === 'undefined' || currentrank == "" || currentrank == "UNR") {currentrank = 3000;}
        if (typeof peakrank === 'undefined' || peakrank == "") {peakrank = 3000;}
        if (typeof current_dubs === 'undefined' || current_dubs == "" || current_dubs == "UNR") {current_dubs = 3000;}
        if (typeof peak_dubs === 'undefined' || peak_dubs == "") {peak_dubs = 3000;}
        if (currentrank <= 50 || peakrank <= 10) {}
        else if (currentrank > (current_dubs * 5)) {view = "doubles";}
        else if (currentrank == "" && peakrank > (peak_dubs * 5)) {view = "doubles";}
        else if (currentrank == 3000 && peakrank > (peak_dubs * 5)) {view = "doubles";}
        // can do this server-side...
        }
    
    if (view == "doubles") {
        makeSplitsTable(doubles=1);
        prefilters['overview'] = 1; // default, show ranks and full names
        filteropts['span'] = ychoices_dubs;
        filteropts['tourney'] = tchoices_dubs;
        filteropts['asrank'] = rchoices_dubs;     
        }
    else {
        makeSplitsTable()
        }
    
//    if (typeof photog != 'undefined' && photog != '') {
//        $(".moresplits").toggle();
//        }
        
    makeMenus();

    applyPrefilters();
    $("#tabHead").click(function () {
        // if switching from doubles, change menus:
        if (!$('#tabDubs').hasClass("tablink")) {
            makeSplitsTable();
            //if (typeof photog != 'undefined' && photog != '') {
            //    $(".moresplits").toggle();
            //    }
            filteropts['span'] = ychoices;
            filteropts['tourney'] = tchoices;
            filteropts['asrank'] = rchoices;
            makeMenus();
            }
        $(".tabview").addClass("tablink");
        $("#tabHead").removeClass("tablink");
        resetFilters();
        if ($("#spanhead").hasClass("closed")) {
            $("#spanhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".spanchoice").toggle();
            }
        $(".spanchoice").removeClass("selected").removeClass('spanselected');
        $("#spanCareerqq").addClass('selected').addClass('spanselected'); 
        // show all filters (heads + choices), then hide minimum
        $(".header").show();
        $("#h2hhead").hide();
        $(".h2hchoice").hide();
        $("#nothead").hide();
        $(".notchoice").hide();
        $("#minyearshead").hide(); 
        $(".minyearschoice").hide();
        $("#partnerhead").hide();
        $(".partnerchoice").hide();
        $("#opphead").hide();
        $(".oppchoice").hide();
        $("#oppteamhead").hide();
        $(".oppteamchoice").hide();
        $("#handshead").hide();
        $(".handschoice").hide(); 
        $("#prankhead").hide();
        $(".prankchoice").hide();
        $("#phandhead").hide();
        $(".phandchoice").hide();
        makeMatchTable({}, 1);
        })
    $("#tabEvents").click(function () {
        // if switching from doubles, change menus:
        if (!$('#tabDubs').hasClass("tablink")) {
            makeSplitsTable();
            filteropts['span'] = ychoices;
            filteropts['tourney'] = tchoices;
            filteropts['asrank'] = rchoices;
            makeMenus();
            }
        $(".tabview").addClass("tablink");
        $("#tabEvents").removeClass("tablink");
        resetFilters();
        if ($("#spanhead").hasClass("closed")) {
            $("#spanhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".spanchoice").toggle();
            }
        $(".spanchoice").removeClass("selected").removeClass('spanselected');
        $("#spanCareerqq").addClass('selected').addClass('spanselected'); 
        // show all filters (heads + choices), then hide minimum
        $(".header").show();
        $("#h2hhead").hide();
        $(".h2hchoice").hide();
        $("#nothead").hide();
        $(".notchoice").hide();
        $("#partnerhead").hide();
        $(".partnerchoice").hide();
        $("#opphead").hide();
        $(".oppchoice").hide();
        $("#oppteamhead").hide();
        $(".oppteamchoice").hide();
        $("#handshead").hide();
        $(".handschoice").hide(); 
        $("#prankhead").hide();
        $(".prankchoice").hide();
        $("#phandhead").hide();
        $(".phandchoice").hide();
        makeMatchTable({}, 1);
        })        
    $("#tabResults").click(function () {
        // if switching from doubles, change menus:
        if (!$('#tabDubs').hasClass("tablink")) {
            makeSplitsTable();
            prefilters['overall'] = 1; // default, show serving stats
            filteropts['span'] = ychoices;
            filteropts['tourney'] = tchoices;
            filteropts['asrank'] = rchoices;
            makeMenus();
            }
        $(".tabview").addClass("tablink");
        $("#tabResults").removeClass("tablink");
        resetFilters();
        if ($("#spanhead").hasClass("closed")) {
            $("#spanhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".spanchoice").toggle();
            }
        $(".spanchoice").removeClass("selected").removeClass('spanselected');
        $("#spandef").addClass('selected').addClass('spanselected'); 
        // show all filters (heads + choices), then hide h2h, not ... more?
        $(".header").show();
        $("#minimumhead").hide(); 
        $(".minimumchoice").hide(); 
        $("#minyearshead").hide(); 
        $(".minyearschoice").hide();  
        $("#partnerhead").hide();
        $(".partnerchoice").hide();
        $("#opphead").hide();
        $(".oppchoice").hide();
        $("#oppteamhead").hide();
        $(".oppteamchoice").hide();
        $("#handshead").hide();
        $(".handschoice").hide();   
        $("#prankhead").hide();
        $(".prankchoice").hide();
        $("#phandhead").hide();
        $(".phandchoice").hide();  
        makeMatchTable({}, 1);
        })          
    $("#tabDubs").click(function () {
        prefilters['overview'] = 1; // default, show ranks and full names
        // switching from singles, so change menus:
        makeSplitsTable(doubles=1);
        filteropts['span'] = ychoices_dubs;
        filteropts['tourney'] = tchoices_dubs;
        filteropts['asrank'] = rchoices_dubs;
        makeMenus();
        $(".tabview").addClass("tablink");
        $("#tabDubs").removeClass("tablink");
        $(".header").show();
        $("#h2hhead").hide();
        $("#nothead").hide(); 
        $("#minimumhead").hide();
        $(".minimumchoice").hide();
        $("#minyearshead").hide();
        $(".minyearschoice").hide();
        $("#crankhead").hide();
        $(".crankchoice").hide();
        $("#handhead").hide();
        $(".handchoice").hide();	
        $("#agehead").hide();
        $(".agechoice").hide();
        $("#heighthead").hide();
        $(".heightchoice").hide();
        $("#countryhead").hide();
        $(".countrychoice").hide();      
        makeMatchTable({}, 1);
        })       
    $(".stattab").click(function () {
        $(".stattab").addClass("likelink");
        $(this).removeClass("likelink");
        makeMatchTable({}, 1);
        })
    $(".revscore").click(function () {
        hidePermalink();
        if ($(".revscore").text() == 'Reverse Loss Scores') {
            $(".revscore").html('Standard Scores');
            makeMatchTable({}, 0);
            }
        else {
            $(".revscore").html('Reverse Loss Scores');
            makeMatchTable({}, 0);
            }
        })
    if (careerjs == 1 && keep_loading == 1) {
        if (view != "doubles" && 'span' in prefilters && (prefilters['span'] != '1' && prefilters['span'] != '2')) {matchmx = matchmx.concat(morematchmx);}  
        else {
            var careerurl = 'https://www.minorleaguesplits.com/tennisabstract/cgi-bin/jsmatches/' + nameparam + 'Career.js';
            $.getScript(careerurl, function() {
                matchmx = matchmx.concat(morematchmx);
                })
            }
        }
    if (careerjs_dubs == 1 && keep_loading == 1) {
        if (view == "doubles" && 'span' in prefilters && (prefilters['span'] != '1' && prefilters['span'] != '2')) {matchmx_dubs = matchmx_dubs.concat(morematchmx_dubs);}  
        else {
            var careerurl = 'https://www.minorleaguesplits.com/tennisabstract/cgi-bin/jsdoubles/' + nameparam + 'Career.js';
            $.getScript(careerurl, function() {
                matchmx_dubs = matchmx_dubs.concat(morematchmx_dubs);
                })
            }
        }
    makeMatchTable({}, 0);
    $.getScript("https://www.tennisabstract.com/jquery.ui.core.js", function() {});
    $.getScript("https://www.tennisabstract.com/jquery.ui.position.js", function() {});
    $.getScript("https://www.tennisabstract.com/jquery.ui.widget.js", function() {});
    $.getScript("https://www.tennisabstract.com/mwplayerlist.js", function() {}); 
    $.getScript("https://www.tennisabstract.com/jquery.ui.autocomplete.js", function() {});    
    $('#playersearch').append($('<input>').attr('id', 'tags'));

    var searchbox = "Player Search";		
    $("#tags").val(searchbox);
    $("#tags").focus(function() {
        if ($(this).val() == searchbox) {$(this).val("");}
        $( "#tags" ).autocomplete({
                source: playerlist,
                minLength: 2,
                select: function(e, ui) {
                    var playerselect = ui.item.value;
                    var player = playerselect.slice(4);
                    var mw = playerselect.slice(1,2);
                    if (mw == 'M') {
                        var playerurl = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + player.replace(/ /g, '');
                        }
                    else {
                        var playerurl = 'https://www.tennisabstract.com/cgi-bin/wplayer.cgi?p=' + player.replace(/ /g, '');
                        }                        
                    window.open(playerurl, "_self");
                    }
            });
        }); 
    })

</script>
</head>
<body>

<div id="header">

<div id="navbar">
</div>

<table width=1240px>
<tr><td>&nbsp;</td><td>&nbsp;</td>
</tr>

<tr>
<td align="left" style="vertical-align:top"><span id="bio">&nbsp;</span>

<span id="tabResults" style="background-color:#e6EEEE;" class="tabview">&nbsp;<b>Singles Results</b>&nbsp;</span>&nbsp;
<span id="tabHead" style="background-color:#e6EEEE;" class="tablink tabview">&nbsp;<b>Head-to-Heads</b>&nbsp;</span>&nbsp;
<span id="tabEvents" style="background-color:#e6EEEE;" class="tablink tabview">&nbsp;<b>Event Records</b>&nbsp;</span>
<br/><span id="tabDubs" style="background-color:#e6EEEE; position:relative; top:5px" class="tablink tabview">&nbsp;<b>Doubles Results</b>&nbsp;</span><span id="tabDubsSpacer">&nbsp;&nbsp;</span>
<span id="shotsHere">
</span>
</td>
<td id="wonloss" align="right" style="vertical-align:top">&nbsp;</td>
</tr>
<tr>
<td id="tabmenu" align="left" style="vertical-align:top">
&nbsp;
</td>
<td>&nbsp;</td>
</tr>
<tr>
<td colspan=2 id="playernews">&nbsp;</td>
</tr>
</tr></table>
</div>

<div id="main">

<table width="1240px" id="maintable">
<tr id="tabletoggles">
<td>&nbsp;</td>
<td id="tablelabel">&nbsp;</td>
<td id="abovestats" class="abovestats" align="right">
&nbsp;&nbsp;&nbsp;<span class="revscore likelink"></span>
&nbsp;&nbsp;&nbsp;<b>Stats:</b>&nbsp;
<span class="statsa stattab">Overview</span><span class="statspacer">&nbsp;|&nbsp;</span><span class="statso stattab">Serve</span>&nbsp;|&nbsp;<span class="statsr stattab likelink">Return</span>&nbsp;|&nbsp;<span class="statsw stattab likelink">Raw</span>
</td></tr>
<tr>
<td id="footer" class="footer">&nbsp;</td>
<td colspan="2" id="stats" class="stats"><table id="matches"></table></td>
</tr>
<tr>
<td id="belowmenus">&nbsp;<br/>&nbsp;<br/>&nbsp;<br/>&nbsp;<br/>&nbsp;</td>
<td colspan="2" id="belowmatches">&nbsp;</td>
</tr>
</table></div>
</div>

</body>

