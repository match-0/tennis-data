
<html><head>
<title>Tennis Abstract: Matthew Barton Match Results, Splits, and Analysis</title>
<link rel="stylesheet" href="https://www.tennisabstract.com/blue/style.css" type="text/css">
<script type="text/javascript" src="https://www.tennisabstract.com/jquery-1.7.1-min.js"></script>
<script type="text/javascript" src="https://www.tennisabstract.com/jquery.tablesorter.js"></script>
<script type="text/javascript" src="https://www.tennisabstract.com/navbar.js"></script>
<script type="text/javascript" src="https://www.minorleaguesplits.com/tennisabstract/cgi-bin/jsplayers/curr_rank_atp.js"></script>

<script language="JavaScript">
var currentTime = new Date();
var month = currentTime.getMonth() + 1;
var day = currentTime.getDate();
var year = currentTime.getFullYear().toString();
var mm, dd;
if (month < 10) {mm = '0' + month.toString();}
else {mm = month.toString();}
if (day < 10) {dd = '0' + day.toString();}
else {dd = day.toString();}
var today = year + mm + dd;
var one_day=1000*60*60*24;
var nameparam = 'MatthewBarton';
var prefilters = {};
var opponent="";
var exclude="";
var opp_team="";
var partner="";
var view="";
var keep_loading = 0;
var fullname = 'Matthew Barton';
var lastname = 'Barton';
var currentrank = 1017;
var peakrank = 183;
var peakfirst = 20161010;
var peaklast = 20161010;
var dob = 19911218;
var ht = '';
var hand = 'R';
var backhand = '2';
var country = 'AUS';
var shortlist = 0;
var careerjs = 0;
var active = 1;
var lastdate = 0;
var twitter = '';
var current_dubs = "UNR";
var peak_dubs = 306;
var peakfirst_dubs = 20130318;
var liverank = 310;
var chartagg = 0;
var photog = 'sirobi';
var photog_credit = 'si.robi';
var photog_link = 'https://www.flickr.com/photos/sirobi';
var itf_id = '100097022';
var atp_id = 'matthew-barton/bh98';
var dc_id = '';
var wiki_id = 'Matthew_Barton_(tennis)';
var ychoices=["Time Span", "Last 52", "Career", "2018", "2017", "2016", "2015", "2014", "2013", "2012", "2011", "2010", "2008"];
var tchoices=["Event", "All", "Australian Open", "Roland Garros", "US Open", "Wimbledon", "An-Ning CH", "Auckland", "Barcelona", "Brisbane", "Burnie CH", "Busan CH", "Caloundra CH", "Canberra CH", "Cary CH", "Columbus CH", "Drummondville CH", "Fairfield CH", "Granby CH", "Guadalajara CH", "Happy Valley CH", "Houston", "Ilkley CH", "Kyoto CH", "Las Vegas CH", "Launceston CH", "Lexington CH", "Manchester CH", "Mexico City CH", "Munich", "New Delhi CH", "Newport", "Nottingham", "Noumea CH", "Playford CH", "Queen's Club", "San Francisco CH", "Seoul CH", "Stockton CH", "Sydney", "Sydney1 CH", "Taipei CH", "Tiburon CH", "Traralgon CH", "Vancouver CH", "Vicenza CH", "Washington", "West Lakes CH", "Winnetka CH", "Wuhan CH", "s-Hertogenbosch"];
var cchoices=["vs Country", "All", "ARG", "AUS", "AUT", "BEL", "BLR", "BRA", "BUL", "CAN", "CHN", "COL", "CRO", "CZE", "DEN", "ESP", "FIN", "FRA", "GBR", "GER", "IND", "IRL", "ISR", "ITA", "JPN", "KAZ", "KOR", "LTU", "LUX", "MEX", "MON", "NED", "NZL", "POL", "RSA", "RUS", "SLO", "SRB", "SUI", "SVK", "SWE", "THA", "TPE", "TUR", "UKR", "USA", "UZB"];
var rchoices=["as Rank", "All"];
var ochoices=["Aaron Addison", "Sam Barry", "Daniel Evans", "Dennis Novikov", "Yuichi Ito", "Thomas Fancutt", "Jae Sung An", "Marcos Giraldi Requena", "Naoki Takeda", "David Ohare", "John Isner", "Marek Michalicka", "Jae Won Choi", "Jonathon Cooper", "Robert Mckenzie", "Ricardas Berankis", "Alexander Sarkissian", "Dino Marcan", "Jason Kubler", "Henry Choi", "Shuichi Sekiguchi", "Maverick Banes", "Henri Laaksonen", "Raven Klaasen", "Nick Lindahl", "Seong Gook Oh", "Marsel Ilhan", "Max Purcell", "Dane Propoggia", "Yusuke Watanuki", "Liang Chi Huang", "Nenad Zimonjic", "Masato Shiga", "Ernesto Escobedo", "Mitchell Krueger", "Austin Krajicek", "Andrew Harris", "Leon Frost", "Jordan M Badenko", "Oscar Sabate Bretos", "Matija Kac", "Ulises Blanch", "Nikita Girey Demir", "Darren K Polkinghorne", "James Lemke", "Bjorn Propst", "James Frawley", "Marc Polmans", "Jack Sock", "Li Tu", "Min Kyu Song", "Brydan Klein", "Daniel Elahi Galan Riveros", "Jose Rubin Statham", "Luke Bambridge", "Dayne Kelly", "Bjorn Phau", "Antun Vidak", "Dominik Meffert", "James Ward", "Blazo N Djurovic", "Corey Karen", "Laurent Recouderc", "Benjamin Mitchell", "Alex Kuznetsov", "Henry Craig", "Hyeon Chung", "Joshua Milton", "Cameron Norrie", "Adrien Bossel", "Matt Reid", "David Ferrer", "Pedro Clar Rossello", "Moerani Bouzige", "Rhys Michael Johnson", "Dimitar Kutrovsky", "Sergiy Stakhovsky", "Oliver Anderson", "Jun Chao Xu", "Matthew Ebden", "Stefan Fiacan", "Luis Patino", "Quentin Halys", "John Lamble", "Go Soeda", "Woong Sun Jun", "Ningyue Cheng", "Dudi Sela", "Akira Santillan", "Oliver Ceranic", "Filip Peliwo", "Alexandre Folie", "Hiroki Moriya", "Alejandro Falla", "Matthew Christopher Romios", "Hugo Di Feo", "Daniel Nolan", "Harry Bourchier", "Marco Chiudinelli", "Jay Andrijic", "Ze Zhang", "Aaron Leeder Chard", "Piercarlo Bianciardi", "Justin Seller", "Andrey Golubev", "Michal Przysiezny", "Kamil Capkovic", "Gianni Mina", "Michael Venus", "Marinko Matosevic", "James Duckworth", "Reilly Opelka", "Lukas Lacko", "Ivo Karlovic", "Sean Berman", "Konstantin Kravchuk", "Harri Heliovaara", "Steve Johnson", "Pavel Filin", "Alessandro Giannessi", "Sebastian Korda", "Jack Jaede", "Nils Langer", "Ervin Eleskovic", "Jeremy Beale", "Gilles Muller", "Kyle Edmund", "Donald Young", "Alejandro Gomez Gb42", "Yong Kyu Lim", "Brendan Moore", "Harrison Keyser", "Artem Sitak", "Tim Smyczek", "Bradley Klahn", "Steven De Waard", "Jarmere Jenkins", "Andrew Gregory", "Gavin Van Peperzeel", "Farrukh Dustov", "Yuya Ito", "Saketh Myneni", "Jimmy Wang", "Jake Eames", "Frederik Nielsen", "Daniel Munoz De La Nava", "Romain Jouan", "Chuhan Wang", "Jay Clarke", "Simon Ede", "Isaac Frost", "Albano Olivetti", "Amir Weintraub", "Devin Mccarthy", "Chieh Fu Wang", "John Patrick Smith", "Greg Jones", "Mitchell William Robins", "James Mcgee", "Peter Torebko", "David Sofaer", "Stephane Robert", "Ivan Nedelko", "Erik Chvojka", "Luke Saville", "Frank Dancevic", "Daniel Guccione", "Lucas Catarina", "Wayne Odesnik", "Peter Polansky", "Michael Look", "Jacob Grills", "Yasutaka Uchiyama", "Philip Lang", "Colin Ebelthite", "Tatsuma Ito", "Karue Sell", "Dusan Lojda", "Danai Udomchoke", "Andrew Whittington", "Francis Tiafoe", "Hyun Woo Nam", "John Millman", "Scott Puodziunas", "Marko Jovanovic", "Young Jun Kim", "Zhe Li", "Daniel Nguyen", "Yuichi Sugita", "Oriol Roca Batalla", "Vincent Millot", "Riccardo Bonadio", "Guido Andreozzi", "Ryan Agar", "Samuel Groth", "Adam Chadaj", "Jan Lennard Struff", "Jack Schipanski", "Alex Bolt", "Jordan Thompson", "Hugo Grenier", "Di Wu", "Matwe Middelkoop", "Adam Feeney", "Omar Jasika", "Denis Kudla", "Yannick Hanfmann", "Matias Franco Descotte", "Bobby Reynolds", "Alexander Lobkov", "Benard Bruno Nkomba", "Daniele Giorgini"];
var tdates=["20081013", "20100215", "20100222", "20100719", "20100809", "20100906", "20101004", "20101011", "20101101", "20101108", "20101122", "20101129", "20110207", "20110221", "20110228", "20110314", "20110321", "20110328", "20110404", "20110516", "20110523", "20110530", "20110620", "20110627", "20110905", "20110912", "20111003", "20111010", "20111024", "20111031", "20111114", "20111121", "20120102", "20120109", "20120206", "20120213", "20120305", "20120319", "20120326", "20120416", "20120514", "20120521", "20120528", "20120618", "20120625", "20120716", "20120723", "20120827", "20120903", "20120910", "20120917", "20121001", "20121008", "20121022", "20121029", "20130107", "20130114", "20130128", "20130204", "20130225", "20130304", "20130408", "20130415", "20130422", "20130429", "20130527", "20130610", "20130624", "20130708", "20130715", "20130722", "20130729", "20130826", "20130923", "20131229", "20140106", "20140113", "20140127", "20140203", "20140217", "20140224", "20140303", "20140331", "20140505", "20140512", "20140519", "20140526", "20141110", "20150202", "20150209", "20150223", "20150302", "20150309", "20150330", "20150427", "20150504", "20150511", "20151026", "20151102", "20160104", "20160111", "20160201", "20160215", "20160222", "20160314", "20160321", "20160404", "20160425", "20160502", "20160509", "20160523", "20160530", "20160606", "20160613", "20160620", "20160627", "20160704", "20160711", "20160718", "20161010", "20161024", "20161031", "20170109", "20170130", "20170206", "20170911", "20170918", "20170925", "20171002", "20171009", "20171016", "20171030", "20180101", "20180108", "20180129", "20180205", "20180226", "20180305", "20180319", "20180326", "20180409"];
var vranks=["8", "17", "25", "32", "34", "45", "68", "78", "81", "85", "87", "95", "97", "102", "103", "105", "107", "108", "110", "119", "121", "124", "125", "128", "129", "130", "138", "140", "143", "144", "150", "151", "157", "163", "165", "166", "167", "174", "177", "180", "181", "184", "186", "189", "191", "192", "193", "197", "203", "209", "214", "216", "218", "219", "221", "224", "225", "229", "230", "233", "236", "238", "240", "244", "245", "249", "250", "251", "254", "255", "256", "258", "259", "262", "263", "265", "268", "269", "270", "271", "273", "276", "277", "279", "280", "283", "290", "292", "295", "297", "298", "299", "303", "304", "307", "309", "310", "311", "313", "315", "316", "319", "321", "323", "324", "327", "330", "336", "339", "340", "342", "352", "353", "356", "358", "361", "362", "367", "368", "369", "370", "371", "379", "380", "381", "383", "388", "389", "393", "394", "397", "399", "402", "403", "419", "420", "428", "455", "459", "460", "461", "462", "466", "477", "485", "488", "492", "504", "506", "509", "510", "512", "515", "521", "531", "537", "538", "542", "553", "569", "571", "573", "582", "589", "593", "610", "611", "626", "634", "670", "672", "678", "696", "699", "700", "702", "704", "721", "724", "725", "728", "767", "772", "774", "793", "794", "799", "815", "826", "848", "852", "859", "864", "883", "886", "900", "910", "912", "913", "935", "944", "945", "976", "995", "999", "1004", "1008", "1025", "1029", "1047", "1051", "1075", "1101", "1111", "1127", "1131", "1163", "1186", "1210", "1221", "1226", "1227", "1248", "1279", "1301", "1319", "1339", "1373", "1379", "1392", "1402", "1403", "1423", "1486", "1501", "1508", "1510", "1517", "1532", "1621", "1628", "1641", "1652", "1661", "1701", "1730", "1944", "2094"];
var playernews=[];
var upcoming = "";
var matchmx = [["20180409", "Taipei CH", "Hard", "C", "L", "853", "", "", "Q1", "6-4 0-0 RET", "3", "Hugo Grenier", "388", "4", "", "U", "22.045174538", "", "FRA", "0", "35", "2", "0", "39", "30", "20", "4", "5", "3", "4", "3", "0", "22", "14", "13", "7", "5", "0", "0", "", "", "", "", "2018-2278-230", "", "", ""],
          ["20180326", "Australia F4", "Clay", "S", "L", "1033", "", "", "SF", "7-6(3) 6-3", "3", "Max Purcell", "271", "3", "", "U", "19.9589322382", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-AUS-04A-2018-030", "", "", ""],
          ["20180326", "Australia F4", "Clay", "S", "W", "1033", "", "", "QF", "3-6 6-3 7-6(5)", "3", "Andrew Whittington", "270", "2", "", "R", "24.6023271732", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2018-M-FU-AUS-04A-2018-028", "", "3", "3"],
          ["20180326", "Australia F4", "Clay", "S", "W", "1033", "", "", "R16", "6-1 6-0", "3", "Matthew Christopher Romios", "1392", "", "", "U", "18.9733059548", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-AUS-04A-2018-023", "", "2", "2"],
          ["20180326", "Australia F4", "Clay", "S", "W", "1033", "", "", "R32", "6-1 6-4", "3", "Luke Saville", "459", "", "", "R", "24.1259411362", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2018-M-FU-AUS-04A-2018-013", "", "1", "1"],
          ["20180319", "Australia F3", "Clay", "S", "L", "1033", "", "", "R32", "6-4 6-4", "3", "Marc Polmans", "197", "", "", "U", "20.8788501027", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-AUS-03A-2018-001", "", "1", "1"],
          ["20180305", "Australia F2", "Grass", "S", "L", "1135", "", "", "QF", "6-7(3) 6-3 6-4", "3", "Marc Polmans", "230", "", "", "U", "20.8405201916", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-AUS-02A-2018-025", "", "3", "3"],
          ["20180305", "Australia F2", "Grass", "S", "W", "1135", "", "", "R16", "6-1 6-4", "3", "Benard Bruno Nkomba", "1510", "", "", "R", "18.4887063655", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2018-M-FU-AUS-02A-2018-018", "", "2", "2"],
          ["20180305", "Australia F2", "Grass", "S", "W", "1135", "", "", "R32", "7-6(10) 7-6(1)", "3", "Moerani Bouzige", "", "", "WC", "R", "18.6447638604", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-AUS-02A-2018-003", "", "1", "1"],
          ["20180226", "Australia F1", "Grass", "S", "L", "1137", "", "", "R32", "6-3 6-3", "3", "Omar Jasika", "512", "5", "", "L", "20.7775496235", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2018-M-FU-AUS-01A-2018-004", "", "1", "1"],
          ["20180205", "Launceston CH", "Hard", "C", "L", "943", "", "", "Q1", "6-3 6-7(1) 7-6(3)", "3", "Ulises Blanch", "504", "8", "", "R", "19.8685831622", "", "USA", "0", "110", "14", "5", "116", "67", "46", "27", "17", "8", "12", "8", "7", "97", "61", "47", "18", "16", "4", "6", "2", "", "", "", "2018-7203-235", "", "", ""],
          ["20180129", "Burnie CH", "Hard", "C", "L", "823", "", "", "Q1", "6-3 6-7(7) 6-3", "3", "Lucas Catarina", "367", "3", "", "R", "21.4264202601", "", "MON", "0", "139", "9", "4", "99", "63", "44", "19", "14", "3", "6", "3", "6", "109", "59", "43", "32", "16", "2", "3", "", "", "", "", "2018-5018-234", "", "", ""],
          ["20180108", "Sydney", "Hard", "A", "L", "573", "", "", "Q1", "7-5 6-3", "3", "Ricardas Berankis", "138", "6", "", "R", "27.5509924709", "175", "LTU", "0", "69", "15", "5", "75", "37", "28", "16", "11", "4", "7", "4", "1", "49", "32", "29", "11", "10", "0", "0", "2", "", "", "", "2018-M001-243", "", "", ""],
          ["20180108", "Sydney", "Hard", "A", "L", "573", "", "", "Q1", "7-5 6-3", "3", "Ricardas Berankis", "138", "6", "", "R", "27.5509924709", "175", "LTU", "0", "69", "15", "5", "75", "37", "28", "16", "11", "4", "7", "4", "1", "49", "32", "29", "11", "10", "0", "0", "2", "", "", "", "2018-M001-243", "", "", ""],
          ["20180101", "Playford CH", "Hard", "C", "L", "573", "", "", "Q1", "6-1 5-7 7-6(4)", "3", "Sebastian Korda", "848", "", "", "U", "17.492128679", "", "USA", "0", "103", "18", "5", "95", "62", "49", "15", "15", "4", "6", "8", "2", "103", "69", "52", "20", "16", "6", "7", "", "", "", "", "2018-7841-228", "", "", ""],
          ["20171030", "Canberra CH", "Hard", "C", "L", "586", "", "Q", "R32", "6-4 7-6(4)", "3", "Jose Rubin Statham", "307", "", "", "R", "30.51608487", "183", "NZL", "0", "92", "17", "1", "78", "47", "37", "18", "11", "6", "7", "9", "3", "78", "44", "35", "22", "11", "0", "0", "2", "", "", "0", "2017-7586-280", "", "1", "1"],
          ["20171030", "Canberra CH", "Hard", "C", "W", "586", "4", "", "Q3", "6-3 6-4", "3", "Benjamin Mitchell", "826", "8", "", "R", "24.91444216", "", "AUS", "0", "60", "7", "1", "55", "28", "24", "14", "10", "2", "4", "3", "6", "59", "44", "24", "7", "9", "6", "10", "2", "", "", "", "2017-7586-251", "", "", ""],
          ["20171030", "Canberra CH", "Hard", "C", "W", "586", "4", "", "Q2", "6-1 3-6 6-3", "3", "James Frawley", "912", "", "", "R", "23.58932238", "", "AUS", "0", "95", "16", "1", "80", "46", "36", "16", "13", "5", "7", "1", "15", "95", "47", "33", "20", "12", "4", "8", "", "", "", "", "2017-7586-244", "", "", ""],
          ["20171030", "Canberra CH", "Hard", "C", "W", "586", "4", "", "Q1", "6-1 6-3", "3", "Blazo N Djurovic", "", "", "WC", "U", "21.57700205", "", "AUS", "0", "58", "6", "0", "48", "29", "25", "10", "8", "4", "4", "7", "8", "69", "29", "21", "15", "8", "6", "10", "", "", "", "", "2017-7586-230", "", "", ""],
          ["20171016", "Las Vegas CH", "Hard", "C", "L", "516", "5", "", "Q2", "6-4 7-6(4)", "3", "Karue Sell", "772", "", "", "R", "23.92334018", "", "BRA", "0", "69", "11", "4", "71", "41", "35", "13", "11", "4", "6", "3", "4", "65", "42", "33", "17", "11", "0", "1", "2", "", "", "", "2017-7345-245", "", "", ""],
          ["20171016", "Las Vegas CH", "Hard", "C", "W", "516", "5", "", "Q1", "7-6(8) 3-6 6-3", "3", "Henry Craig", "704", "", "", "R", "23.01711157", "", "USA", "0", "88", "17", "2", "89", "53", "47", "18", "15", "2", "3", "6", "3", "85", "53", "40", "23", "15", "1", "2", "2", "", "", "", "2017-7345-231", "", "", ""],
          ["20171009", "Fairfield CH", "Hard", "C", "L", "511", "", "", "Q1", "7-5 4-6 6-2", "3", "Daniel Elahi Galan Riveros", "240", "2", "", "U", "21.30869268", "", "COL", "0", "93", "10", "5", "90", "56", "38", "17", "15", "2", "6", "4", "3", "88", "50", "39", "20", "15", "3", "5", "", "", "", "", "2017-7339-238", "", "", ""],
          ["20171002", "Stockton CH", "Hard", "C", "L", "505", "7", "", "Q1", "6-3 5-0 RET", "3", "Matias Franco Descotte", "634", "", "", "R", "23.09377139", "", "ARG", "0", "67", "2", "4", "57", "29", "17", "10", "7", "4", "8", "1", "0", "32", "20", "17", "11", "7", "0", "0", "2", "", "", "", "2017-3351-231", "", "", ""],
          ["20170925", "Tiburon CH", "Hard", "C", "L", "505", "", "", "Q2", "6-4 6-3", "3", "Filip Peliwo", "283", "5", "", "R", "23.65229295", "", "CAN", "0", "60", "9", "3", "60", "37", "26", "8", "10", "4", "7", "3", "3", "50", "28", "22", "16", "9", "1", "1", "2", "", "", "", "2017-1768-243", "", "", ""],
          ["20170925", "Tiburon CH", "Hard", "C", "W", "505", "", "", "Q1", "6-3 6-4", "3", "John Lamble", "910", "", "WC", "U", "25.48665298", "", "USA", "0", "70", "4", "2", "61", "33", "27", "15", "10", "5", "6", "4", "3", "67", "34", "25", "13", "9", "10", "13", "", "", "", "", "2017-1768-228", "", "", ""],
          ["20170918", "Columbus CH", "Hard", "C", "L", "519", "", "Q", "R32", "5-7 6-1 6-3", "3", "Dennis Novikov", "225", "7", "", "R", "23.86584531", "", "USA", "0", "94", "13", "3", "85", "56", "42", "6", "14", "6", "11", "12", "5", "93", "52", "40", "20", "14", "4", "6", "2", "", "", "1", "2017-7318-282", "", "1", "1"],
          ["20170918", "Columbus CH", "Hard", "C", "W", "519", "2", "", "Q3", "4-6 7-6(3) 6-4", "3", "Luis Patino", "945", "6", "", "R", "23.95071869", "", "MEX", "0", "131", "17", "5", "113", "64", "48", "25", "16", "7", "10", "7", "2", "104", "46", "34", "31", "16", "5", "8", "2", "", "", "", "2017-7318-253", "", "", ""],
          ["20170911", "Cary CH", "Hard", "C", "L", "518", "2", "", "Q2", "7-6(2) 6-2", "3", "David Ohare", "", "", "", "U", "27.27994524", "", "IRL", "0", "71", "6", "1", "61", "36", "23", "9", "10", "1", "4", "5", "4", "70", "38", "30", "19", "10", "4", "5", "", "", "", "", "2017-7316-248", "", "", ""],
          ["20170206", "San Francisco CH", "Hard", "C", "L", "198", "", "", "R32", "6-4 6-3", "3", "Henri Laaksonen", "124", "5", "", "R", "24.85420945", "", "SUI", "0", "59", "10", "4", "68", "32", "26", "12", "10", "3", "6", "6", "4", "44", "25", "23", "13", "9", "0", "0", "2", "", "", "0", "2017-7697-277", "", "1", "1"],
          ["20170130", "Burnie CH", "Hard", "C", "L", "195", "5", "", "R16", "6-1 7-5", "3", "Omar Jasika", "361", "", "", "L", "19.70431212", "", "AUS", "0", "65", "7", "1", "57", "34", "23", "8", "9", "4", "7", "0", "3", "63", "40", "31", "13", "10", "1", "1", "", "", "", "1", "2017-5018-289", "", "2", "2"],
          ["20170130", "Burnie CH", "Hard", "C", "W", "195", "5", "", "R32", "6-1 6-4", "3", "Marc Polmans", "224", "", "", "U", "19.74811773", "", "AUS", "0", "56", "13", "5", "66", "35", "25", "17", "9", "4", "4", "1", "2", "42", "28", "18", "7", "8", "1", "4", "", "", "", "1", "2017-5018-277", "", "1", "1"],
          ["20170109", "Sydney", "Hard", "A", "L", "198", "", "Q", "R16", "6-1 3-6 6-4", "3", "Gilles Muller", "34", "6", "", "L", "33.6728268309", "193", "LUX", "0", "102", "17", "4", "96", "51", "42", "15", "13", "10", "13", "22", "3", "64", "40", "36", "15", "13", "0", "1", "2", "", "", "", "2017-M001-289", "", "2", "2"],
          ["20170109", "Sydney", "Hard", "A", "W", "198", "", "Q", "R32", "7-6(3) 7-6(5)", "3", "Kyle Edmund", "45", "", "", "R", "22.0041067762", "", "GBR", "0", "103", "17", "4", "78", "48", "39", "17", "12", "2", "2", "11", "4", "82", "45", "38", "17", "12", "2", "2", "2", "", "", "", "2017-M001-274", "", "1", "1"],
          ["20161031", "Canberra CH", "Hard", "C", "L", "192", "7", "", "R32", "6-3 6-4", "3", "Daniel Nolan", "696", "", "WC", "U", "19.6386036961", "", "AUS", "0", "70", "2", "1", "57", "35", "21", "11", "9", "2", "6", "1", "5", "62", "40", "30", "9", "10", "4", "6", "", "", "", "1", "2016-7586-277", "", "1", "1"],
          ["20161024", "Traralgon CH", "Hard", "C", "L", "189", "6", "", "QF", "6-1 6-2", "3", "Jordan Thompson", "95", "1", "", "R", "22.5133470226", "", "AUS", "0", "63", "3", "2", "54", "37", "20", "5", "7", "8", "12", "6", "1", "52", "36", "26", "11", "8", "7", "7", "2", "", "", "1", "2016-6865-297", "", "3", "3"],
          ["20161024", "Traralgon CH", "Hard", "C", "W", "189", "6", "", "R16", "7-6(4) 3-6 7-5", "3", "Matt Reid", "510", "", "", "R", "26.2724161533", "", "AUS", "0", "108", "20", "4", "100", "61", "47", "25", "16", "4", "5", "17", "3", "117", "78", "53", "23", "17", "4", "5", "2", "", "", "1", "2016-6865-292", "", "2", "2"],
          ["20161024", "Traralgon CH", "Hard", "C", "W", "189", "6", "", "R32", "7-6(5) 6-4", "3", "Darren K Polkinghorne", "1029", "", "WC", "U", "23.6577686516", "", "AUS", "0", "83", "17", "4", "83", "46", "39", "14", "11", "3", "4", "5", "5", "74", "39", "26", "20", "11", "5", "7", "", "", "", "0", "2016-6865-282", "", "1", "1"],
          ["20161010", "Australia F8", "Hard", "S", "L", "183", "1", "WC", "QF", "6-4 6-2", "3", "Dayne Kelly", "339", "6", "", "U", "26.2176591376", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2016-M-FU-AUS-08A-2016-025", "", "3", "3"],
          ["20161010", "Australia F8", "Hard", "S", "W", "183", "1", "WC", "R16", "2-6 6-3 7-5", "3", "Oliver Anderson", "728", "", "", "U", "18.4476386037", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2016-M-FU-AUS-08A-2016-017", "", "2", "2"],
          ["20161010", "Australia F8", "Hard", "S", "W", "183", "1", "WC", "R32", "7-5 6-2", "3", "Aaron Addison", "1075", "", "", "R", "20.9117043121", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2016-M-FU-AUS-08A-2016-001", "", "1", "1"],
          ["20160718", "Washington", "Hard", "A", "L", "188", "5", "", "Q2", "6-4 6-3", "3", "Alex Kuznetsov", "311", "12", "", "R", "29.4483230664", "183", "USA", "0", "76", "7", "3", "61", "34", "27", "8", "10", "8", "12", "5", "1", "60", "40", "32", "8", "9", "6", "7", "2", "", "", "0", "2016-M035-233", "", "", ""],
          ["20160718", "Washington", "Hard", "A", "W", "188", "5", "", "Q1", "6-0 6-1", "3", "Nikita Girey Demir", "", "", "WC", "U", "", "", "USA", "0", "38", "6", "1", "34", "20", "18", "10", "7", "0", "0", "0", "10", "34", "15", "9", "3", "6", "1", "6", "", "", "", "1", "2016-M035-223", "", "", ""],
          ["20160711", "Newport", "Grass", "A", "L", "192", "3", "", "Q2", "6-3 6-3", "3", "Michal Przysiezny", "315", "7", "", "R", "32.3997262149", "185", "POL", "0", "67", "6", "2", "68", "38", "27", "10", "9", "6", "9", "5", "5", "55", "33", "28", "12", "9", "0", "0", "1", "", "", "1", "2016-0315-267", "", "", ""],
          ["20160711", "Newport", "Grass", "A", "W", "192", "3", "", "Q1", "7-6(1) 6-3", "3", "Adrien Bossel", "455", "", "", "L", "29.5359342916", "", "SUI", "0", "85", "13", "4", "82", "48", "34", "21", "11", "8", "9", "2", "5", "72", "37", "26", "17", "10", "3", "5", "2", "", "", "0", "2016-0315-261", "", "", ""],
          ["20160704", "Winnetka CH", "Hard", "C", "L", "248", "", "", "R32", "6-4 6-4", "3", "Frank Dancevic", "265", "", "", "R", "31.7508555784", "185", "CAN", "0", "66", "11", "3", "63", "33", "23", "15", "10", "5", "7", "8", "3", "55", "25", "21", "21", "10", "1", "1", "1", "", "", "0", "2016-0228-280", "", "1", "1"],
          ["20160627", "Wimbledon", "Grass", "G", "L", "248", "", "", "R64", "7-6(8) 7-6(3) 7-6(8)", "5", "John Isner", "17", "18", "", "R", "31.1704312115", "206", "USA", "0", "136", "16", "7", "125", "72", "59", "31", "18", "3", "4", "43", "5", "119", "86", "72", "22", "18", "0", "1", "2", "", "", "0", "2016-540-190", "", "2", "2"],
          ["20160627", "Wimbledon", "Grass", "G", "W", "248", "", "", "R128", "6-7(7) 7-6(5) 6-3 6-7(5) 14-12", "5", "Albano Olivetti", "793", "", "", "R", "24.59137577", "203", "FRA", "0", "242", "32", "9", "215", "147", "126", "35", "36", "1", "1", "56", "17", "218", "128", "108", "54", "35", "11", "13", "1", "", "", "1", "2016-540-153", "", "1", "1"],
          ["20160620", "Nottingham", "Grass", "A", "L", "247", "5", "", "Q2", "7-5 6-3", "3", "Stephane Robert", "81", "1", "", "R", "36.0930869268", "185", "FRA", "0", "61", "9", "2", "55", "42", "30", "5", "10", "2", "5", "6", "3", "66", "44", "39", "7", "11", "2", "3", "2", "", "", "1", "2016-0741-237", "", "", ""],
          ["20160620", "Nottingham", "Grass", "A", "W", "247", "5", "", "Q1", "6-4 7-5", "3", "Jay Clarke", "1621", "", "WC", "R", "17.9000684463", "", "GBR", "0", "69", "10", "2", "64", "50", "38", "10", "11", "2", "2", "1", "0", "63", "33", "20", "21", "11", "3", "5", "2", "", "", "1", "2016-0741-232", "", "", ""],
          ["20160613", "Ilkley CH", "Grass", "C", "L", "251", "", "Q", "R32", "6-4 6-3", "3", "Quentin Halys", "143", "", "", "R", "19.6303901437", "", "FRA", "0", "54", "8", "0", "48", "25", "18", "15", "9", "1", "3", "10", "3", "61", "38", "33", "11", "10", "1", "1", "2", "", "", "1", "2016-9005-276", "", "1", "1"],
          ["20160613", "Ilkley CH", "Grass", "C", "W", "251", "", "", "Q3", "6-4 6-7(9) 7-6(3)", "3", "Ernesto Escobedo", "262", "", "", "R", "19.9425051335", "", "USA", "0", "100", "20", "4", "102", "69", "62", "21", "17", "1", "1", "16", "4", "105", "75", "62", "18", "17", "6", "7", "2", "", "", "", "2016-9005-269", "", "", ""],
          ["20160613", "Ilkley CH", "Grass", "C", "W", "251", "", "", "Q2", "6-4 6-3", "3", "Daniel Nguyen", "225", "6", "", "U", "25.659137577", "", "USA", "0", "78", "9", "3", "61", "43", "34", "9", "10", "7", "7", "6", "4", "57", "33", "22", "13", "9", "1", "3", "", "", "", "", "2016-9005-264", "", "", ""],
          ["20160613", "Ilkley CH", "Grass", "C", "W", "251", "", "", "Q1", "7-6(6) 6-4", "3", "Marinko Matosevic", "304", "", "", "R", "30.8473648186", "194", "AUS", "0", "76", "16", "2", "71", "49", "39", "12", "11", "1", "2", "6", "2", "77", "47", "34", "15", "11", "4", "6", "2", "", "", "", "2016-9005-255", "", "", ""],
          ["20160606", "s-Hertogenbosch", "Grass", "A", "L", "250", "", "", "Q1", "6-4 7-5", "3", "Alejandro Falla", "177", "8", "", "L", "32.5612594114", "185", "COL", "0", "85", "11", "5", "82", "42", "29", "16", "11", "5", "9", "4", "2", "67", "42", "32", "12", "11", "1", "3", "2", "", "", "0", "2016-M010-262", "", "", ""],
          ["20160530", "Manchester CH", "Grass", "C", "L", "263", "4", "", "Q2", "6-7(4) 6-2 3-0 RET", "3", "Luke Bambridge", "515", "", "", "R", "21.3360711841", "", "GBR", "0", "76", "8", "2", "63", "33", "24", "17", "11", "0", "3", "15", "3", "72", "41", "37", "15", "12", "0", "0", "2", "", "", "", "2016-7293-259", "", "", ""],
          ["20160523", "Vicenza CH", "Clay", "C", "L", "263", "6", "", "Q1", "6-2 7-6(2)", "3", "Riccardo Bonadio", "488", "", "", "U", "22.8610540726", "", "ITA", "0", "87", "9", "3", "76", "45", "27", "10", "10", "3", "8", "6", "0", "64", "39", "25", "15", "10", "6", "9", "", "", "", "", "2016-7015-246", "", "", ""],
          ["20160509", "Seoul CH", "Hard", "C", "L", "257", "", "", "R16", "6-4 4-6 6-4", "3", "Lukas Lacko", "121", "8", "", "R", "28.514715948", "185", "SVK", "0", "126", "10", "2", "88", "47", "33", "20", "15", "5", "9", "3", "9", "108", "52", "38", "29", "15", "5", "8", "2", "", "", "0", "2016-7288-292", "", "2", "2"],
          ["20160509", "Seoul CH", "Hard", "C", "W", "257", "", "", "R32", "6-3 3-6 6-3", "3", "Konstantin Kravchuk", "102", "", "", "R", "31.2060232717", "190", "RUS", "0", "84", "11", "4", "70", "38", "30", "18", "14", "3", "6", "9", "2", "77", "48", "33", "13", "13", "2", "6", "2", "", "", "1", "2016-7288-283", "", "1", "1"],
          ["20160502", "Busan CH", "Hard", "C", "L", "265", "", "Q", "R32", "6-1 6-4", "3", "Jimmy Wang", "330", "", "Q", "R", "31.227926078", "178", "TPE", "0", "55", "8", "5", "51", "24", "16", "13", "8", "1", "4", "1", "2", "50", "32", "26", "11", "9", "0", "0", "2", "", "", "1", "2016-1741-280", "", "1", "1"],
          ["20160502", "Busan CH", "Hard", "C", "W", "265", "2", "", "Q3", "7-6(5) 6-4", "3", "Dayne Kelly", "369", "", "", "U", "25.7768651608", "", "AUS", "0", "90", "10", "2", "80", "41", "30", "22", "11", "2", "3", "3", "3", "67", "39", "28", "19", "11", "3", "5", "", "", "", "", "2016-1741-268", "", "", ""],
          ["20160502", "Busan CH", "Hard", "C", "W", "265", "2", "", "Q2", "7-6(2) 6-4", "3", "Min Kyu Song", "794", "", "", "U", "25.6865160849", "", "KOR", "0", "80", "5", "6", "68", "34", "29", "15", "11", "1", "3", "1", "5", "68", "28", "22", "18", "11", "3", "6", "", "", "", "", "2016-1741-263", "", "", ""],
          ["20160502", "Busan CH", "Hard", "C", "W", "265", "2", "", "Q1", "6-4 6-2", "3", "Seong Gook Oh", "1532", "", "WC", "R", "24.0246406571", "", "KOR", "0", "78", "2", "5", "69", "35", "25", "10", "9", "7", "11", "1", "5", "55", "31", "14", "7", "9", "1", "8", "2", "", "", "", "2016-1741-253", "", "", ""],
          ["20160425", "Taipei CH", "Hard", "C", "L", "248", "", "", "R32", "7-6(6) 6-3", "3", "Konstantin Kravchuk", "125", "8", "", "R", "31.1676933607", "190", "RUS", "0", "72", "10", "4", "63", "42", "34", "10", "10", "4", "5", "11", "1", "59", "40", "38", "13", "11", "0", "0", "2", "", "", "", "2016-2278-277", "", "1", "1"],
          ["20160404", "Houston", "Clay", "A", "L", "270", "", "Q", "R16", "6-2 7-6(5)", "3", "Jack Sock", "25", "4", "", "R", "23.5263518138", "185", "USA", "0", "75", "7", "5", "64", "37", "27", "11", "10", "4", "7", "5", "2", "58", "31", "25", "17", "10", "2", "3", "2", "", "", "0", "2016-0717-291", "", "2", "2"],
          ["20160404", "Houston", "Clay", "A", "W", "270", "", "Q", "R32", "6-3 6-4", "3", "Francis Tiafoe", "174", "", "WC", "R", "18.2039698836", "", "USA", "0", "63", "9", "1", "57", "32", "27", "12", "10", "3", "4", "4", "5", "58", "35", "22", "12", "9", "2", "5", "2", "", "", "1", "2016-0717-280", "", "1", "1"],
          ["20160404", "Houston", "Clay", "A", "W", "270", "", "", "Q2", "7-6(2) 6-1", "3", "Reilly Opelka", "1008", "", "WC", "U", "18.6009582478", "", "USA", "0", "70", "9", "1", "63", "35", "30", "16", "10", "1", "1", "14", "13", "68", "38", "30", "9", "9", "4", "6", "", "", "", "0", "2016-0717-266", "", "", ""],
          ["20160404", "Houston", "Clay", "A", "W", "270", "", "", "Q1", "6-3 6-4", "3", "Guido Andreozzi", "180", "7", "", "R", "24.6652977413", "", "ARG", "0", "69", "12", "2", "61", "35", "26", "17", "10", "1", "1", "4", "1", "62", "38", "25", "11", "9", "3", "5", "2", "", "", "1", "2016-0717-258", "", "", ""],
          ["20160321", "USA F11", "Hard", "S", "W", "293", "2", "", "F", "7-6(6) 6-3", "3", "Henri Laaksonen", "214", "1", "", "R", "23.9726214921", "", "SUI", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "1", "2016-M-FU-USA-11A-2016-031", "", "", ""],
          ["20160321", "USA F11", "Hard", "S", "W", "293", "2", "", "SF", "7-6(6) 6-4", "3", "Mitchell Krueger", "258", "3", "", "R", "22.1875427789", "", "USA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "1", "2016-M-FU-USA-11A-2016-030", "", "", ""],
          ["20160321", "USA F11", "Hard", "S", "W", "293", "2", "", "QF", "6-4 6-3", "3", "Marek Michalicka", "295", "6", "", "R", "29.2429842574", "", "CZE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "1", "2016-M-FU-USA-11A-2016-028", "", "3", "3"],
          ["20160321", "USA F11", "Hard", "S", "W", "293", "2", "", "R16", "6-4 7-6(5)", "3", "Alejandro Gomez Gb42", "537", "", "Q", "U", "24.6023271732", "", "COL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "0", "2016-M-FU-USA-11A-2016-024", "", "2", "2"],
          ["20160321", "USA F11", "Hard", "S", "W", "293", "2", "", "R32", "6-0 6-2", "3", "Corey Karen", "", "", "WC", "L", "20.8815879535", "", "USA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "1", "2016-M-FU-USA-11A-2016-016", "", "1", "1"],
          ["20160314", "Drummondville CH", "Hard", "C", "L", "241", "", "", "R32", "1-6 6-2 6-3", "3", "Daniel Evans", "157", "4", "", "R", "25.7905544148", "175", "GBR", "0", "80", "11", "5", "78", "46", "34", "12", "12", "3", "6", "2", "5", "70", "35", "27", "18", "12", "2", "4", "1", "", "", "0", "2016-7235-274", "", "1", "1"],
          ["20160222", "Kyoto CH", "Hard", "C", "L", "273", "", "", "SF", "6-4 7-5", "3", "Yuichi Sugita", "119", "1", "", "R", "27.4277891855", "", "JPN", "0", "68", "13", "4", "73", "45", "33", "13", "11", "4", "6", "13", "3", "57", "32", "31", "15", "11", "1", "1", "2", "", "", "0", "2016-0091-299", "", "", ""],
          ["20160222", "Kyoto CH", "Hard", "C", "W", "273", "", "", "QF", "4-6 7-5 6-3", "3", "Go Soeda", "130", "3", "", "R", "31.4633812457", "178", "JPN", "0", "91", "21", "3", "79", "55", "49", "12", "16", "0", "1", "7", "4", "89", "54", "41", "20", "15", "6", "8", "2", "", "", "1", "2016-0091-296", "", "3", "3"],
          ["20160222", "Kyoto CH", "Hard", "C", "W", "273", "", "", "R16", "6-1 7-6(5)", "3", "Benjamin Mitchell", "249", "", "", "R", "23.227926078", "", "AUS", "0", "69", "15", "1", "71", "43", "36", "17", "10", "3", "3", "3", "3", "61", "34", "27", "12", "9", "3", "5", "2", "", "", "1", "2016-0091-290", "", "2", "2"],
          ["20160222", "Kyoto CH", "Hard", "C", "W", "273", "", "", "R32", "7-6(2) 3-6 7-6(8)", "3", "Yasutaka Uchiyama", "238", "", "WC", "R", "23.5482546201", "", "JPN", "0", "114", "19", "2", "97", "63", "55", "16", "16", "3", "5", "15", "2", "108", "66", "47", "28", "17", "3", "4", "2", "", "", "1", "2016-0091-279", "", "1", "1"],
          ["20160215", "New Delhi CH", "Hard", "C", "L", "273", "", "", "R16", "6-3 6-4", "3", "Saketh Myneni", "166", "4", "", "R", "28.3258042437", "", "IND", "0", "60", "5", "4", "55", "34", "26", "7", "9", "0", "2", "5", "0", "51", "34", "27", "13", "10", "0", "0", "2", "", "", "1", "2016-6961-288", "", "2", "2"],
          ["20160215", "New Delhi CH", "Hard", "C", "W", "273", "", "", "R32", "6-3 6-2", "3", "Sam Barry", "399", "", "", "R", "24.052019165", "", "IRL", "0", "62", "7", "2", "55", "38", "31", "9", "9", "1", "1", "5", "1", "50", "35", "20", "7", "8", "7", "10", "2", "", "", "1", "2016-6961-275", "", "1", "1"],
          ["20160201", "Launceston CH", "Hard", "C", "L", "267", "", "", "QF", "6-4 3-6 6-3", "3", "Andrey Golubev", "221", "8", "", "R", "28.5311430527", "185", "KAZ", "0", "108", "8", "3", "89", "43", "36", "23", "14", "8", "10", "4", "1", "77", "48", "38", "18", "14", "2", "3", "1", "", "", "0", "2016-7203-294", "", "3", "3"],
          ["20160201", "Launceston CH", "Hard", "C", "W", "267", "", "", "R16", "6-2 3-6 6-3", "3", "Omar Jasika", "276", "", "", "L", "18.7077344285", "", "AUS", "0", "106", "11", "4", "88", "49", "37", "18", "13", "8", "11", "3", "3", "85", "57", "35", "12", "13", "7", "12", "", "", "", "0", "2016-7203-286", "", "2", "2"],
          ["20160201", "Launceston CH", "Hard", "C", "W", "267", "", "", "R32", "7-5 6-7(5) 6-4", "3", "Jordan Thompson", "144", "2", "", "R", "21.7850787132", "", "AUS", "0", "146", "9", "3", "110", "61", "50", "28", "17", "9", "9", "10", "0", "106", "66", "49", "25", "17", "3", "5", "2", "", "", "1", "2016-7203-270", "", "1", "1"],
          ["20160111", "Auckland", "Hard", "A", "L", "299", "", "Q", "R16", "6-2 6-4", "3", "David Ferrer", "8", "1", "", "R", "33.7768651608", "175", "ESP", "0", "65", "6", "2", "59", "35", "22", "12", "9", "4", "7", "1", "0", "47", "26", "23", "13", "9", "0", "0", "2", "", "", "0", "2016-0301-293", "", "2", "2"],
          ["20160111", "Auckland", "Hard", "A", "W", "299", "", "Q", "R32", "6-3 3-6 6-3", "3", "Steve Johnson", "32", "", "", "R", "26.0479123888", "188", "USA", "0", "98", "13", "1", "91", "55", "46", "15", "14", "5", "6", "12", "3", "86", "56", "40", "14", "13", "5", "7", "2", "20160111-M-Auckland-R32-Matthew_Barton-Steve_Johnson.html", "", "1", "2016-0301-284", "", "1", "1"],
          ["20160111", "Auckland", "Hard", "A", "W", "299", "6", "", "Q2", "6-2 6-0", "3", "Denis Kudla", "68", "2", "", "R", "23.4004106776", "180", "USA", "0", "42", "6", "0", "40", "23", "18", "9", "7", "1", "2", "3", "3", "35", "22", "7", "3", "7", "0", "6", "2", "", "", "1", "2016-0301-268", "", "", ""],
          ["20160111", "Auckland", "Hard", "A", "W", "299", "6", "", "Q1", "7-6(8) 6-0", "3", "Artem Sitak", "1210", "", "WC", "R", "29.9219712526", "", "NZL", "0", "69", "6", "3", "63", "38", "31", "12", "9", "0", "1", "1", "10", "73", "41", "29", "11", "9", "2", "6", "2", "", "", "1", "2016-0301-262", "", "", ""],
          ["20160104", "Happy Valley CH", "Hard", "C", "L", "299", "", "WC", "R32", "7-5 6-3", "3", "Nils Langer", "218", "", "", "R", "25.9411362081", "", "GER", "0", "64", "9", "2", "64", "39", "29", "13", "11", "2", "5", "2", "1", "48", "26", "23", "17", "10", "0", "0", "", "", "", "0", "2016-7182-275", "", "1", "1"],
          ["20151102", "Canberra CH", "Hard", "C", "L", "292", "", "", "R16", "6-4 7-6(3)", "3", "Alex Bolt", "268", "8", "", "L", "22.8227241615", "", "AUS", "0", "", "13", "2", "71", "32", "25", "19", "11", "4", "6", "7", "3", "69", "43", "34", "15", "11", "2", "3", "2", "", "", "0", "2015-7393-023", "", "2", "2"],
          ["20151102", "Canberra CH", "Hard", "C", "W", "292", "", "", "R32", "6-2 7-6(4)", "3", "Maverick Banes", "420", "", "", "R", "23.5619438741", "", "AUS", "0", "", "14", "6", "72", "44", "37", "12", "10", "3", "3", "2", "3", "66", "44", "26", "12", "10", "3", "5", "2", "", "", "1", "2015-7393-014", "", "1", "1"],
          ["20151026", "Traralgon CH", "Hard", "C", "L", "344", "", "", "SF", "6-4 6-4", "3", "Matthew Ebden", "128", "1", "", "R", "27.9151266256", "188", "AUS", "0", "", "3", "5", "62", "38", "31", "7", "10", "3", "5", "6", "2", "50", "32", "28", "12", "10", "0", "0", "2", "", "", "", "2015-6865-029", "", "", ""],
          ["20151026", "Traralgon CH", "Hard", "C", "W", "344", "", "", "QF", "6-3 6-2", "3", "Jose Rubin Statham", "368", "", "", "R", "28.5037645448", "183", "NZL", "0", "", "6", "0", "40", "29", "24", "6", "8", "0", "1", "3", "1", "61", "43", "22", "8", "9", "3", "8", "2", "", "", "0", "2015-6865-026", "", "3", "3"],
          ["20151026", "Traralgon CH", "Hard", "C", "W", "344", "", "", "R16", "6-1 7-6(5)", "3", "Matt Reid", "370", "", "", "R", "25.2758384668", "", "AUS", "0", "", "10", "1", "69", "39", "28", "22", "10", "3", "3", "5", "2", "74", "43", "27", "17", "9", "6", "8", "2", "", "", "1", "2015-6865-019", "", "2", "2"],
          ["20151026", "Traralgon CH", "Hard", "C", "W", "344", "", "", "R32", "7-6(5) 7-6(8)", "3", "Luke Saville", "203", "4", "", "R", "21.7303216975", "", "AUS", "0", "", "7", "4", "87", "55", "41", "20", "12", "3", "4", "0", "5", "94", "54", "42", "20", "12", "3", "4", "2", "", "", "1", "2015-6865-005", "", "1", "1"],
          ["20150511", "Seoul CH", "Hard", "C", "L", "338", "", "Q", "R16", "7-6(7) 3-0 RET", "3", "Dimitar Kutrovsky", "321", "", "Q", "R", "27.704312115", "", "BUL", "0", "79", "13", "2", "52", "38", "27", "7", "7", "3", "5", "2", "3", "58", "33", "26", "14", "8", "0", "1", "2", "", "", "", "2015-7288-022", "", "2", "2"],
          ["20150511", "Seoul CH", "Hard", "C", "W", "338", "", "Q", "R32", "6-2 7-6(1)", "3", "Tatsuma Ito", "110", "4", "", "R", "26.9787816564", "180", "JPN", "0", "89", "13", "1", "66", "35", "29", "17", "10", "1", "3", "4", "5", "72", "51", "29", "9", "10", "4", "8", "2", "", "", "1", "2015-7288-012", "", "1", "1"],
          ["20150504", "Busan CH", "Hard", "C", "L", "330", "", "LL", "R32", "6-2 6-4", "3", "Go Soeda", "85", "3", "", "R", "30.6584531143", "178", "JPN", "0", "65", "6", "1", "59", "38", "28", "7", "9", "4", "7", "2", "1", "46", "26", "22", "15", "9", "2", "2", "2", "", "", "0", "2015-1741-012", "", "1", "1"],
          ["20150427", "Taipei CH", "Carpet", "C", "L", "365", "", "Q", "R16", "6-7(3) 6-3 6-4", "3", "Go Soeda", "87", "3", "", "R", "30.6392881588", "178", "JPN", "0", "131", "15", "2", "102", "70", "51", "13", "15", "4", "7", "7", "1", "99", "66", "47", "22", "16", "3", "4", "2", "", "", "0", "2015-2278-022", "", "2", "2"],
          ["20150427", "Taipei CH", "Carpet", "C", "W", "365", "", "Q", "R32", "6-3 6-2", "3", "Chieh Fu Wang", "999", "", "WC", "U", "21.6235455168", "", "TPE", "0", "58", "8", "1", "48", "36", "32", "6", "9", "0", "0", "5", "3", "42", "26", "20", "6", "8", "5", "8", "", "", "", "1", "2015-2278-011", "", "1", "1"],
          ["20150330", "Australia F5", "Clay", "S", "L", "382", "5", "Q", "F", "2-6 6-3 6-4", "3", "Jose Rubin Statham", "509", "", "", "R", "27.909650924", "183", "NZL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-M-FU-AUS-05A-2015-031", "", "", ""],
          ["20150330", "Australia F5", "Clay", "S", "W", "382", "5", "Q", "SF", "6-4 6-4", "3", "Peter Torebko", "250", "3", "", "R", "27.112936345", "", "GER", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-M-FU-AUS-05A-2015-030", "", "", ""],
          ["20150330", "Australia F5", "Clay", "S", "W", "382", "5", "Q", "QF", "6-2 6-2", "3", "Luke Saville", "186", "2", "", "R", "21.1362080767", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-M-FU-AUS-05A-2015-028", "", "3", "3"],
          ["20150330", "Australia F5", "Clay", "S", "W", "382", "5", "Q", "R16", "6-1 6-2", "3", "Isaac Frost", "", "", "Q", "R", "26.2067077344", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-M-FU-AUS-05A-2015-023", "", "2", "2"],
          ["20150330", "Australia F5", "Clay", "S", "W", "382", "5", "Q", "R32", "5-7 6-2 6-2", "3", "Jeremy Beale", "1730", "", "Q", "L", "20.4654346338", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2015-M-FU-AUS-05A-2015-013", "", "1", "1"],
          ["20150309", "Australia F3", "Grass", "S", "W", "500", "5", "", "F", "6-4 6-2", "3", "Harry Bourchier", "772", "8", "", "R", "19.1211498973", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-M-FU-AUS-03A-2015-031", "", "", ""],
          ["20150309", "Australia F3", "Grass", "S", "W", "500", "5", "", "SF", "6-3 6-3", "3", "Brydan Klein", "209", "1", "", "R", "25.1854893908", "183", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-M-FU-AUS-03A-2015-029", "", "", ""],
          ["20150309", "Australia F3", "Grass", "S", "W", "500", "5", "", "QF", "6-3 6-3", "3", "Thomas Fancutt", "2094", "", "", "R", "20.0328542094", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2015-M-FU-AUS-03A-2015-026", "", "3", "3"],
          ["20150309", "Australia F3", "Grass", "S", "W", "500", "5", "", "R16", "6-7(6) 6-4 6-3", "3", "Jeremy Beale", "", "", "Q", "L", "20.4271047228", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2015-M-FU-AUS-03A-2015-020", "", "2", "2"],
          ["20150309", "Australia F3", "Grass", "S", "W", "500", "5", "", "R32", "6-0 6-2", "3", "Daniel Guccione", "1279", "", "", "R", "19.0308008214", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2015-M-FU-AUS-03A-2015-008", "", "1", "1"],
          ["20150302", "Australia F2", "Hard", "S", "W", "509", "5", "", "F", "6-3 6-4", "3", "Alexander Sarkissian", "542", "7", "", "R", "24.9117043121", "", "USA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-M-FU-AUS-02A-2015-031", "", "", ""],
          ["20150302", "Australia F2", "Hard", "S", "W", "509", "5", "", "SF", "6-7(3) 6-4 6-1", "3", "Matt Reid", "397", "3", "", "R", "24.6242299795", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-M-FU-AUS-02A-2015-030", "", "", ""],
          ["20150302", "Australia F2", "Hard", "S", "W", "509", "5", "", "QF", "6-2 3-0 RET", "3", "Harry Bourchier", "767", "", "", "R", "19.1019849418", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-M-FU-AUS-02A-2015-028", "", "3", "3"],
          ["20150302", "Australia F2", "Hard", "S", "W", "509", "5", "", "R16", "6-0 6-1", "3", "David Sofaer", "1226", "", "", "U", "23.6358658453", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2015-M-FU-AUS-02A-2015-023", "", "2", "2"],
          ["20150302", "Australia F2", "Hard", "S", "W", "509", "5", "", "R32", "6-1 6-0", "3", "Jack Jaede", "", "", "WC", "R", "17.2950034223", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-M-FU-AUS-02A-2015-013", "", "1", "1"],
          ["20150223", "Australia F1", "Hard", "S", "L", "499", "7", "", "QF", "6-4 6-7(4) 7-5", "3", "Brydan Klein", "244", "1", "", "R", "25.1471594798", "183", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2015-M-FU-AUS-01A-2015-025", "", "3", "3"],
          ["20150223", "Australia F1", "Hard", "S", "W", "499", "7", "", "R16", "6-2 6-1", "3", "David Sofaer", "1227", "", "", "U", "23.6167008898", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2015-M-FU-AUS-01A-2015-018", "", "2", "2"],
          ["20150223", "Australia F1", "Hard", "S", "W", "499", "7", "", "R32", "6-2 6-2", "3", "Mitchell William Robins", "1319", "", "WC", "U", "18.6146475017", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2015-M-FU-AUS-01A-2015-004", "", "1", "1"],
          ["20150209", "Launceston CH", "Hard", "C", "L", "531", "", "WC", "R16", "6-3 6-7(5) 7-6(5)", "3", "Ze Zhang", "192", "", "", "R", "24.6023271732", "", "CHN", "0", "184", "15", "3", "119", "72", "55", "20", "17", "7", "10", "3", "7", "123", "82", "60", "21", "16", "8", "9", "2", "", "", "0", "2015-7203-019", "", "2", "2"],
          ["20150209", "Launceston CH", "Hard", "C", "W", "531", "", "WC", "R32", "3-6 6-3 2-0 RET", "3", "Kyle Edmund", "144", "3", "", "R", "20.0876112252", "", "GBR", "0", "101", "17", "0", "75", "47", "33", "15", "10", "8", "9", "1", "1", "64", "42", "28", "11", "10", "3", "5", "2", "", "", "", "2015-7203-005", "", "1", "1"],
          ["20150202", "Burnie CH", "Hard", "C", "L", "609", "", "LL", "SF", "6-2 6-7(4) 6-3", "3", "Hyeon Chung", "151", "8", "", "R", "18.7077344285", "", "KOR", "0", "123", "19", "4", "106", "63", "46", "14", "14", "8", "12", "8", "1", "85", "61", "48", "13", "15", "5", "6", "2", "", "", "0", "2015-5018-030", "", "", ""],
          ["20150202", "Burnie CH", "Hard", "C", "W", "609", "", "LL", "QF", "6-2 6-4", "3", "Matthew Ebden", "313", "", "", "R", "27.1868583162", "188", "AUS", "0", "72", "3", "2", "48", "33", "26", "8", "9", "1", "2", "2", "7", "63", "40", "23", "9", "9", "8", "12", "2", "", "", "0", "2015-5018-028", "", "3", "3"],
          ["20150202", "Burnie CH", "Hard", "C", "W", "609", "", "LL", "R16", "4-6 6-3 6-4", "3", "Brydan Klein", "251", "", "", "R", "25.0896646133", "183", "AUS", "0", "139", "11", "5", "124", "72", "50", "24", "15", "13", "16", "5", "4", "85", "52", "37", "15", "14", "2", "6", "2", "", "", "1", "2015-5018-023", "", "2", "2"],
          ["20150202", "Burnie CH", "Hard", "C", "W", "609", "", "LL", "R32", "6-3 6-4", "3", "Luke Saville", "163", "7", "", "R", "21.0020533881", "", "AUS", "0", "82", "0", "2", "69", "35", "25", "23", "10", "5", "5", "4", "4", "58", "39", "26", "8", "9", "4", "6", "2", "", "", "1", "2015-5018-013", "", "1", "1"],
          ["20141110", "Australia F9", "Hard", "S", "L", "539", "", "", "QF", "2-6 7-6(3) RET", "3", "Maverick Banes", "370", "6", "", "R", "22.5845311431", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-AUS-09A-2014-027", "", "3", "3"],
          ["20141110", "Australia F9", "Hard", "S", "W", "539", "", "", "R16", "6-4 6-1", "3", "Dane Propoggia", "327", "4", "", "R", "24.5475701574", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-AUS-09A-2014-022", "", "2", "2"],
          ["20141110", "Australia F9", "Hard", "S", "W", "539", "", "", "R32", "7-5 6-3", "3", "Jake Eames", "699", "", "", "R", "23.8384668036", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-AUS-09A-2014-011", "", "1", "1"],
          ["20140526", "Croatia F11", "Clay", "S", "L", "517", "6", "", "R32", "6-3 1-0 RET", "3", "Piercarlo Bianciardi", "1701", "", "Q", "L", "19.1759069131", "", "ITA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-CRO-11A-2014-008", "", "1", "1"],
          ["20140519", "Croatia F10", "Clay", "S", "L", "542", "6", "", "QF", "6-4 6-4", "3", "Chuhan Wang", "670", "", "", "R", "22.2313483915", "", "CHN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-CRO-10A-2014-026", "", "3", "3"],
          ["20140519", "Croatia F10", "Clay", "S", "W", "542", "6", "", "R16", "7-6(3) 6-3", "3", "Jake Eames", "1186", "", "Q", "R", "23.3593429158", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-CRO-10A-2014-020", "", "2", "2"],
          ["20140519", "Croatia F10", "Clay", "S", "W", "542", "6", "", "R32", "4-6 6-3 6-4", "3", "Stefan Fiacan", "1486", "", "WC", "R", "20.1396303901", "", "SUI", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-CRO-10A-2014-008", "", "1", "1"],
          ["20140512", "Croatia F9", "Clay", "S", "L", "549", "4", "", "SF", "7-5 3-6 6-2", "3", "Dino Marcan", "573", "6", "", "R", "23.2443531828", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-CRO-09A-2014-029", "", "", ""],
          ["20140512", "Croatia F9", "Clay", "S", "W", "549", "4", "", "QF", "6-1 6-3", "3", "Akira Santillan", "1944", "", "Q", "R", "16.9719370294", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-CRO-09A-2014-026", "", "3", "3"],
          ["20140512", "Croatia F9", "Clay", "S", "W", "549", "4", "", "R16", "6-2 3-6 6-1", "3", "Antun Vidak", "1641", "", "", "U", "20.9993155373", "", "CRO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-CRO-09A-2014-019", "", "2", "2"],
          ["20140512", "Croatia F9", "Clay", "S", "W", "549", "4", "", "R32", "6-2 6-1", "3", "Matija Kac", "", "", "Q", "L", "18.636550308", "", "SLO", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-CRO-09A-2014-005", "", "1", "1"],
          ["20140505", "Croatia F8", "Clay", "S", "L", "551", "6", "", "QF", "5-7 6-1 6-0", "3", "Jordan Thompson", "277", "2", "", "R", "20.0410677618", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-CRO-08A-2014-028", "", "3", "3"],
          ["20140505", "Croatia F8", "Clay", "S", "W", "551", "6", "", "R16", "6-1 6-2", "3", "Bjorn Propst", "1373", "", "", "R", "26.9158110883", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-CRO-08A-2014-023", "", "2", "2"],
          ["20140505", "Croatia F8", "Clay", "S", "W", "551", "6", "", "R32", "6-2 6-2", "3", "Marko Jovanovic", "", "", "Q", "R", "18.9979466119", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-CRO-08A-2014-013", "", "1", "1"],
          ["20140331", "Australia F4", "Clay", "S", "L", "554", "7", "", "SF", "5-7 6-2 6-2", "3", "Alex Bolt", "460", "5", "", "L", "21.2320328542", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-AUS-04A-2014-030", "", "", ""],
          ["20140331", "Australia F4", "Clay", "S", "W", "554", "7", "", "QF", "6-4 6-3", "3", "Jordan Thompson", "324", "3", "", "R", "19.9452429843", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-AUS-04A-2014-027", "", "3", "3"],
          ["20140331", "Australia F4", "Clay", "S", "W", "554", "7", "", "R16", "4-6 6-2 6-3", "3", "Marc Polmans", "1047", "", "", "U", "16.9117043121", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-AUS-04A-2014-021", "", "2", "2"],
          ["20140331", "Australia F4", "Clay", "S", "W", "554", "7", "", "R32", "6-2 4-6 6-4", "3", "Oliver Ceranic", "1661", "", "LL", "U", "19.1457905544", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-AUS-04A-2014-009", "", "1", "1"],
          ["20140303", "Australia F3", "Grass", "S", "L", "478", "5", "", "SF", "6-4 6-4", "3", "Luke Saville", "369", "2", "", "R", "20.0821355236", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-AUS-03A-2014-030", "", "", ""],
          ["20140303", "Australia F3", "Grass", "S", "W", "478", "5", "", "QF", "7-6(5) 6-4", "3", "Andrew Whittington", "420", "3", "", "R", "20.5585215606", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-AUS-03A-2014-027", "", "3", "3"],
          ["20140303", "Australia F3", "Grass", "S", "W", "478", "5", "", "R16", "6-3 6-2", "3", "Devin Mccarthy", "799", "", "", "R", "23.3073237509", "", "USA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-AUS-03A-2014-021", "", "2", "2"],
          ["20140303", "Australia F3", "Grass", "S", "W", "478", "5", "", "R32", "6-2 6-3", "3", "Scott Puodziunas", "", "", "WC", "U", "24.3121149897", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-AUS-03A-2014-009", "", "1", "1"],
          ["20140224", "Australia F2", "Hard", "S", "L", "440", "7", "", "R16", "7-5 4-6 7-5", "3", "Ryan Agar", "724", "", "", "R", "26.6803559206", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-AUS-02A-2014-023", "", "2", "2"],
          ["20140224", "Australia F2", "Hard", "S", "W", "440", "7", "", "R32", "6-2 6-2", "3", "Steven De Waard", "1403", "", "Q", "R", "22.8090349076", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-AUS-02A-2014-013", "", "1", "1"],
          ["20140217", "Australia F1", "Hard", "S", "L", "433", "7", "", "QF", "4-6 6-4 6-4", "3", "Luke Saville", "393", "4", "", "R", "20.0438056126", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-AUS-01A-2014-027", "", "3", "3"],
          ["20140217", "Australia F1", "Hard", "S", "W", "433", "7", "", "R16", "4-6 6-0 6-0", "3", "Li Tu", "", "", "Q", "U", "17.7275838467", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2014-M-FU-AUS-01A-2014-021", "", "2", "2"],
          ["20140217", "Australia F1", "Hard", "S", "W", "433", "7", "", "R32", "6-3 6-3", "3", "Steven De Waard", "1402", "", "Q", "R", "22.7898699521", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2014-M-FU-AUS-01A-2014-009", "", "1", "1"],
          ["20140203", "West Lakes CH", "Hard", "C", "L", "293", "", "", "QF", "6-4 1-6 6-3", "3", "Hiroki Moriya", "180", "4", "", "R", "23.3018480493", "", "JPN", "0", "97", "12", "7", "84", "54", "37", "11", "13", "2", "5", "1", "2", "73", "45", "29", "18", "13", "2", "5", "2", "", "", "", "2014-6714-026", "", "3", "3"],
          ["20140203", "West Lakes CH", "Hard", "C", "W", "293", "", "", "R16", "7-5 6-4", "3", "Cameron Norrie", "976", "", "Q", "L", "18.4503764545", "", "NZL", "0", "80", "16", "4", "63", "42", "37", "9", "11", "1", "1", "3", "1", "74", "41", "25", "22", "11", "5", "7", "2", "", "", "", "2014-6714-020", "", "2", "2"],
          ["20140203", "West Lakes CH", "Hard", "C", "W", "293", "", "", "R32", "6-3 6-1", "3", "Jose Rubin Statham", "342", "", "", "R", "26.7789185489", "183", "NZL", "0", "58", "3", "6", "60", "33", "25", "12", "8", "3", "4", "2", "3", "46", "30", "14", "6", "8", "1", "6", "2", "", "", "", "2014-6714-007", "", "1", "1"],
          ["20140127", "Burnie CH", "Hard", "C", "L", "273", "", "", "QF", "6-2 6-7(7) 7-6(13)", "3", "Jarmere Jenkins", "323", "", "WC", "R", "23.1731690623", "", "USA", "0", "157", "9", "5", "136", "80", "61", "25", "16", "4", "7", "2", "2", "117", "78", "59", "21", "16", "2", "3", "2", "", "", "1", "2014-5018-025", "", "3", "3"],
          ["20140127", "Burnie CH", "Hard", "C", "W", "273", "", "", "R16", "4-6 6-3 7-6(4)", "3", "Greg Jones", "259", "8", "", "R", "24.9883641342", "190", "AUS", "0", "143", "15", "5", "122", "74", "55", "17", "16", "6", "10", "8", "8", "105", "63", "45", "17", "15", "11", "15", "2", "", "", "1", "2014-5018-018", "", "2", "2"],
          ["20140127", "Burnie CH", "Hard", "C", "W", "273", "", "", "R32", "6-2 6-2", "3", "Shuichi Sekiguchi", "290", "", "", "R", "22.5379876797", "", "JPN", "0", "64", "10", "2", "56", "35", "24", "13", "8", "1", "1", "0", "2", "56", "41", "23", "4", "8", "2", "6", "2", "", "", "1", "2014-5018-003", "", "1", "1"],
          ["20140113", "Australian Open Q", "Hard", "Q", "L", "263", "", "", "Q1", "6-1 6-1", "3", "Marsel Ilhan", "186", "", "", "R", "26.5927446954", "190", "TUR", "0", "55", "2", "3", "58", "29", "18", "8", "7", "5", "10", "3", "0", "47", "32", "25", "10", "7", "6", "6", "2", "", "", "0", "2014-987-035", "", "", ""],
          ["20140106", "Sydney Q", "Hard", "Q", "L", "258", "", "WC", "Q1", "6-2 7-6(5)", "3", "Wayne Odesnik", "140", "", "", "L", "28.1259411362", "180", "USA", "0", "80", "15", "0", "72", "39", "31", "17", "10", "3", "5", "3", "0", "64", "42", "33", "17", "10", "2", "2", "2", "", "", "1", "2014-12-007", "", "", ""],
          ["20131229", "Brisbane Q", "Hard", "Q", "L", "257", "", "", "Q1", "7-6(3) 6-3", "3", "Bradley Klahn", "97", "2", "", "L", "23.3620807666", "190", "USA", "0", "87", "7", "3", "66", "26", "19", "23", "10", "4", "7", "9", "4", "72", "47", "39", "10", "11", "2", "4", "2", "", "", "", "2014-10-005", "", "", ""],
          ["20130923", "Australia F8", "Hard", "S", "L", "244", "1", "", "R32", "7-6(4) 4-3 RET", "3", "Jack Schipanski", "1051", "", "", "R", "19.4387405886", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-AUS-08A-2013-001", "", "1", "1"],
          ["20130826", "US Open Q", "Hard", "Q", "L", "213", "", "", "Q1", "7-5 6-0", "3", "Donald Young", "157", "", "", "L", "24.0930869268", "183", "USA", "0", "64", "3", "5", "51", "25", "16", "11", "9", "1", "5", "2", "4", "51", "28", "23", "14", "9", "1", "1", "2", "", "", "", "2013-995-030", "", "", ""],
          ["20130729", "Vancouver CH", "Hard", "C", "L", "213", "", "", "R32", "6-1 6-3", "3", "Bobby Reynolds", "138", "5", "", "R", "31.0335386721", "183", "USA", "0", "55", "6", "2", "47", "32", "20", "2", "8", "2", "7", "3", "2", "39", "24", "22", "7", "8", "1", "2", "2", "", "", "0", "2013-254-008", "", "1", "1"],
          ["20130722", "Lexington CH", "Hard", "C", "L", "211", "", "", "R32", "7-5 6-1", "3", "James Duckworth", "167", "6", "", "R", "21.5003422313", "183", "AUS", "0", "72", "9", "9", "64", "37", "26", "8", "10", "2", "6", "8", "1", "52", "22", "19", "20", "9", "3", "3", "2", "", "", "0", "2013-586-004", "", "1", "1"],
          ["20130715", "Granby CH", "Hard", "C", "L", "217", "", "", "R32", "3-6 7-5 6-1", "3", "Matt Reid", "189", "5", "", "R", "22.9952087611", "", "AUS", "0", "93", "19", "2", "84", "49", "35", "18", "14", "5", "8", "14", "2", "71", "48", "40", "14", "14", "0", "1", "2", "", "", "0", "2013-877-004", "", "1", "1"],
          ["20130708", "Canada F4", "Hard", "S", "L", "220", "1", "", "SF", "6-4 6-3", "3", "Austin Krajicek", "277", "3", "", "L", "23.06091718", "", "USA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-CAN-04A-2013-029", "", "", ""],
          ["20130708", "Canada F4", "Hard", "S", "W", "220", "1", "", "QF", "6-3 4-1 RET", "3", "Jonathon Cooper", "721", "", "", "R", "21.8590006845", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-M-FU-CAN-04A-2013-025", "", "3", "3"],
          ["20130708", "Canada F4", "Hard", "S", "W", "220", "1", "", "R16", "6-7(4) 6-4 7-6(5)", "3", "Hugo Di Feo", "1163", "", "WC", "U", "18.2231348392", "", "CAN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-CAN-04A-2013-017", "", "2", "2"],
          ["20130708", "Canada F4", "Hard", "S", "W", "220", "1", "", "R32", "6-2 1-0 RET", "3", "Henry Choi", "1131", "", "WC", "U", "32.476386037", "", "CAN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2013-M-FU-CAN-04A-2013-001", "", "1", "1"],
          ["20130624", "Wimbledon Q", "Grass", "Q", "L", "215", "", "", "Q1", "3-6 6-2 6-4", "3", "Farrukh Dustov", "193", "", "", "R", "27.0910335387", "196", "UZB", "0", "104", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2013-990-058", "", "", ""],
          ["20130610", "Queen's Club Q", "Grass", "Q", "L", "210", "3", "", "Q2", "6-2 7-6(3)", "3", "Nenad Zimonjic", "", "", "", "R", "37.015742642", "190", "SRB", "0", "66", "6", "4", "71", "41", "33", "11", "10", "4", "6", "6", "3", "56", "35", "29", "16", "10", "0", "0", "1", "", "", "0", "2013-866-015", "", "", ""],
          ["20130527", "Roland Garros Q", "Clay", "Q", "L", "209", "", "", "Q1", "6-2 6-3", "3", "Di Wu", "163", "", "", "R", "21.7002053388", "", "CHN", "0", "63", "8", "3", "59", "25", "20", "9", "9", "4", "9", "1", "2", "52", "34", "24", "9", "8", "3", "4", "2", "", "", "", "2013-989-019", "", "", ""],
          ["20130429", "Munich Q", "Clay", "Q", "L", "204", "", "", "Q1", "7-6(5) 6-2", "3", "Sergiy Stakhovsky", "95", "3", "", "R", "27.3100616016", "193", "UKR", "0", "75", "5", "3", "71", "43", "25", "13", "10", "3", "6", "2", "1", "60", "50", "35", "7", "10", "1", "2", "1", "", "", "1", "2013-29-009", "", "", ""],
          ["20130422", "Barcelona Q", "Clay", "Q", "L", "203", "12", "", "Q1", "6-4 6-2", "3", "Matwe Middelkoop", "269", "", "", "R", "29.6344969199", "", "NED", "0", "78", "5", "6", "86", "52", "31", "12", "9", "8", "12", "4", "1", "59", "43", "31", "9", "9", "4", "5", "2", "", "", "0", "2013-977-002", "", "", ""],
          ["20130415", "Mexico City CH", "Hard", "C", "L", "201", "", "", "R16", "6-3 7-5", "3", "Dudi Sela", "108", "2", "", "R", "28.0301163587", "175", "ISR", "0", "71", "6", "13", "63", "27", "20", "12", "11", "2", "8", "3", "3", "66", "44", "27", "13", "10", "2", "5", "1", "", "", "", "2013-6724-024", "", "2", "2"],
          ["20130415", "Mexico City CH", "Hard", "C", "W", "201", "", "", "R32", "6-4 7-6(5)", "3", "Gianni Mina", "815", "", "Q", "R", "21.1800136893", "185", "FRA", "0", "86", "9", "3", "64", "34", "28", "21", "11", "3", "3", "2", "10", "75", "42", "32", "16", "11", "5", "6", "2", "", "", "", "2013-6724-015", "", "1", "1"],
          ["20130408", "Guadalajara CH", "Hard", "C", "L", "206", "", "", "R32", "3-6 6-4 7-6(3)", "3", "Daniel Munoz De La Nava", "129", "7", "", "L", "31.189596167", "", "ESP", "0", "121", "14", "11", "116", "50", "39", "34", "16", "7", "9", "6", "6", "81", "39", "32", "27", "15", "1", "3", "2", "", "", "0", "2013-6284-009", "", "1", "1"],
          ["20130304", "Kyoto CH", "Carpet", "C", "L", "221", "", "", "SF", "7-6(6) 6-4", "3", "Marco Chiudinelli", "165", "2", "", "R", "31.4798083504", "185", "SUI", "0", "87", "13", "2", "64", "33", "28", "17", "11", "2", "4", "3", "0", "73", "54", "40", "14", "11", "7", "8", "2", "", "", "", "2013-91-030", "", "", ""],
          ["20130304", "Kyoto CH", "Carpet", "C", "W", "221", "", "", "QF", "3-6 6-3 6-4", "3", "Dominik Meffert", "191", "8", "", "R", "31.9014373717", "198", "GER", "0", "86", "19", "1", "73", "46", "43", "13", "14", "2", "3", "9", "1", "81", "51", "39", "18", "14", "1", "3", "2", "", "", "0", "2013-91-027", "", "3", "3"],
          ["20130304", "Kyoto CH", "Carpet", "C", "W", "221", "", "", "R16", "7-6(0) 6-4", "3", "Yasutaka Uchiyama", "403", "", "", "R", "20.5776865161", "", "JPN", "0", "81", "12", "5", "83", "44", "34", "22", "11", "4", "4", "9", "3", "60", "37", "30", "14", "11", "0", "1", "2", "", "", "", "2013-91-022", "", "2", "2"],
          ["20130304", "Kyoto CH", "Carpet", "C", "W", "221", "", "", "R32", "6-0 6-3", "3", "Masato Shiga", "1111", "", "WC", "U", "21.5715263518", "", "JPN", "0", "66", "8", "1", "37", "20", "15", "11", "7", "0", "1", "0", "2", "71", "45", "20", "10", "8", "8", "14", "", "", "", "0", "2013-91-011", "", "1", "1"],
          ["20130225", "Sydney1 CH", "Hard", "C", "L", "235", "", "", "QF", "6-3 6-2", "3", "Stephane Robert", "192", "5", "", "R", "32.7775496235", "185", "FRA", "0", "57", "4", "3", "65", "30", "21", "12", "9", "10", "14", "5", "1", "37", "25", "23", "9", "8", "0", "0", "2", "", "", "0", "2013-6720-028", "", "3", "3"],
          ["20130225", "Sydney1 CH", "Hard", "C", "W", "235", "", "", "R16", "6-3 6-3", "3", "John Millman", "165", "2", "", "R", "23.7015742642", "183", "AUS", "0", "59", "16", "2", "56", "37", "31", "9", "9", "3", "3", "3", "4", "50", "34", "26", "4", "9", "2", "5", "2", "", "", "0", "2013-6720-024", "", "2", "2"],
          ["20130225", "Sydney1 CH", "Hard", "C", "W", "235", "", "", "R32", "6-3 1-0 RET", "3", "Adam Feeney", "297", "", "", "R", "27.9726214921", "178", "AUS", "0", "33", "9", "2", "24", "16", "15", "5", "5", "0", "0", "0", "1", "31", "21", "12", "5", "5", "3", "5", "1", "", "", "", "2013-6720-015", "", "1", "1"],
          ["20130204", "West Lakes CH", "Hard", "C", "W", "345", "", "", "F", "6-2 6-3", "3", "James Ward", "263", "", "", "R", "25.9876796715", "190", "GBR", "0", "61", "9", "0", "53", "31", "24", "15", "9", "2", "2", "3", "2", "55", "32", "21", "10", "8", "4", "7", "2", "", "", "1", "2013-6714-031", "", "", ""],
          ["20130204", "West Lakes CH", "Hard", "C", "W", "345", "", "", "SF", "6-1 7-5", "3", "Alexander Lobkov", "327", "", "", "R", "22.3299110198", "", "RUS", "0", "70", "3", "1", "45", "28", "23", "11", "9", "1", "2", "3", "3", "73", "52", "31", "6", "10", "7", "12", "2", "", "", "0", "2013-6714-030", "", "", ""],
          ["20130204", "West Lakes CH", "Hard", "C", "W", "345", "", "", "QF", "6-4 6-1", "3", "Stephane Robert", "219", "", "", "R", "32.720054757", "185", "FRA", "0", "54", "11", "1", "46", "29", "26", "8", "9", "0", "1", "5", "1", "57", "24", "17", "11", "8", "2", "6", "2", "", "", "1", "2013-6714-027", "", "3", "3"],
          ["20130204", "West Lakes CH", "Hard", "C", "W", "345", "", "", "R16", "6-2 6-2", "3", "Luke Saville", "340", "", "", "R", "19.0088980151", "", "AUS", "0", "74", "6", "1", "55", "31", "23", "14", "8", "3", "3", "1", "3", "69", "35", "18", "17", "8", "5", "9", "2", "", "", "0", "2013-6714-021", "", "2", "2"],
          ["20130204", "West Lakes CH", "Hard", "C", "W", "345", "", "", "R32", "4-3 RET", "3", "Alessandro Giannessi", "236", "8", "", "L", "22.6858316222", "183", "ITA", "0", "22", "3", "0", "23", "16", "12", "4", "3", "0", "0", "2", "1", "24", "13", "9", "7", "4", "1", "2", "2", "", "", "", "2013-6714-009", "", "1", "1"],
          ["20130128", "Burnie CH", "Hard", "C", "L", "405", "", "", "SF", "7-6(5) 7-6(5)", "3", "Stephane Robert", "279", "", "", "R", "32.7008898015", "185", "FRA", "0", "88", "8", "3", "72", "43", "36", "14", "12", "1", "3", "9", "6", "110", "72", "51", "18", "12", "5", "7", "2", "", "", "0", "2013-5018-030", "", "", ""],
          ["20130128", "Burnie CH", "Hard", "C", "W", "405", "", "", "QF", "2-6 7-6(1) 6-3", "3", "Peter Polansky", "181", "2", "", "R", "24.6214921287", "180", "CAN", "0", "111", "14", "5", "83", "45", "39", "19", "14", "4", "6", "4", "4", "105", "65", "45", "23", "15", "11", "13", "2", "", "", "1", "2013-5018-028", "", "3", "3"],
          ["20130128", "Burnie CH", "Hard", "C", "W", "405", "", "", "R16", "5-7 6-3 6-1", "3", "Matt Reid", "292", "", "", "R", "22.5352498289", "", "AUS", "0", "99", "10", "8", "92", "52", "35", "22", "14", "9", "12", "5", "4", "90", "54", "31", "17", "14", "5", "11", "2", "", "", "", "2013-5018-023", "", "2", "2"],
          ["20130128", "Burnie CH", "Hard", "C", "W", "405", "", "", "R32", "6-2 6-2", "3", "John Patrick Smith", "240", "8", "", "L", "23.151266256", "", "AUS", "0", "57", "4", "2", "47", "24", "18", "16", "8", "0", "0", "1", "2", "45", "27", "16", "6", "8", "1", "5", "2", "", "", "1", "2013-5018-013", "", "1", "1"],
          ["20130114", "Australian Open Q", "Hard", "Q", "L", "430", "", "WC", "Q2", "3-6 6-4 6-1", "3", "Tim Smyczek", "125", "11", "", "R", "25.0431211499", "175", "USA", "0", "89", "10", "4", "80", "52", "38", "12", "13", "1", "4", "4", "3", "75", "51", "39", "16", "13", "2", "3", "2", "", "", "0", "2013-987-085", "", "", ""],
          ["20130114", "Australian Open Q", "Hard", "Q", "W", "430", "", "WC", "Q1", "6-1 6-3", "3", "Kamil Capkovic", "292", "", "", "R", "26.6201232033", "", "SVK", "0", "65", "6", "3", "49", "23", "18", "17", "8", "0", "0", "1", "3", "58", "32", "17", "11", "8", "3", "7", "2", "", "", "", "2013-987-042", "", "", ""],
          ["20130107", "Sydney Q", "Hard", "Q", "L", "445", "", "WC", "Q3", "6-4 6-2", "3", "Bjorn Phau", "78", "3", "", "R", "33.2621492129", "175", "GER", "0", "70", "5", "2", "58", "32", "21", "11", "9", "4", "8", "1", "3", "55", "27", "21", "17", "9", "2", "3", "1", "", "", "0", "2013-12-027", "", "", ""],
          ["20130107", "Sydney Q", "Hard", "Q", "W", "445", "", "WC", "Q2", "7-5 6-1", "3", "Tatsuma Ito", "85", "5", "", "R", "24.6406570842", "180", "JPN", "0", "77", "7", "4", "67", "35", "26", "20", "10", "2", "2", "5", "0", "62", "42", "26", "9", "9", "3", "6", "2", "", "", "1", "2013-12-022", "", "", ""],
          ["20130107", "Sydney Q", "Hard", "Q", "W", "445", "", "WC", "Q1", "6-7(0) 7-6(5) 7-6(5)", "3", "Ivo Karlovic", "103", "", "", "R", "33.8590006845", "208", "CRO", "0", "146", "13", "8", "115", "68", "58", "25", "18", "1", "2", "27", "3", "117", "77", "65", "21", "18", "5", "6", "1", "", "", "1", "2013-12-011", "", "", ""],
          ["20121029", "Australia F12", "Hard", "S", "L", "411", "8", "", "R16", "6-4 6-4", "3", "Michael Venus", "462", "", "", "R", "25.0376454483", "", "NZL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-AUS-12A-2012-021", "", "2", "2"],
          ["20121029", "Australia F12", "Hard", "S", "W", "411", "8", "", "R32", "6-2 RET", "3", "Nick Lindahl", "611", "", "", "R", "24.2464065708", "183", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-AUS-12A-2012-009", "", "1", "1"],
          ["20121022", "Australia F11", "Hard", "S", "L", "411", "8", "", "R32", "6-2 6-4", "3", "Nick Lindahl", "610", "", "", "R", "24.2272416153", "183", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-AUS-11A-2012-013", "", "1", "1"],
          ["20121008", "Australia F10", "Hard", "S", "L", "411", "5", "", "QF", "6-3 6-4", "3", "Benjamin Mitchell", "304", "1", "", "R", "19.8548939083", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUS-10A-2012-025", "", "3", "3"],
          ["20121008", "Australia F10", "Hard", "S", "W", "411", "5", "", "R16", "6-3 6-3", "3", "Darren K Polkinghorne", "", "", "Q", "U", "19.613963039", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-AUS-10A-2012-018", "", "2", "2"],
          ["20121008", "Australia F10", "Hard", "S", "W", "411", "5", "", "R32", "7-5 2-1 RET", "3", "Aaron Leeder Chard", "1339", "", "", "U", "21.5906913073", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-AUS-10A-2012-004", "", "1", "1"],
          ["20121001", "Australia F9", "Hard", "S", "L", "407", "5", "", "R32", "7-6(7) 4-6 6-4", "3", "Gavin Van Peperzeel", "883", "", "", "R", "20.5092402464", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUS-09A-2012-004", "", "1", "1"],
          ["20120917", "Australia F8", "Hard", "S", "L", "418", "7", "", "QF", "6-4 6-2", "3", "Matt Reid", "298", "2", "", "R", "22.1711156742", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUS-08A-2012-028", "", "3", "3"],
          ["20120917", "Australia F8", "Hard", "S", "W", "418", "7", "", "R16", "6-1 6-3", "3", "Jay Andrijic", "", "", "WC", "R", "16.9582477755", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUS-08A-2012-023", "", "2", "2"],
          ["20120917", "Australia F8", "Hard", "S", "W", "418", "7", "", "R32", "6-2 6-3", "3", "Yusuke Watanuki", "1025", "", "", "R", "22.3299110198", "", "JPN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUS-08A-2012-013", "", "1", "1"],
          ["20120910", "Australia F7", "Hard", "S", "L", "488", "4", "", "QF", "7-6(5) 7-5", "3", "Adam Feeney", "521", "6", "", "R", "27.5126625599", "178", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "", "", "", "2012-M-FU-AUS-07A-2012-027", "", "3", "3"],
          ["20120910", "Australia F7", "Hard", "S", "W", "488", "4", "", "R16", "6-2 6-2", "3", "Yuya Ito", "", "", "Q", "U", "15.6687200548", "", "JPN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-AUS-07A-2012-022", "", "2", "2"],
          ["20120910", "Australia F7", "Hard", "S", "W", "488", "4", "", "R32", "6-3 7-6(4)", "3", "Jacob Grills", "1652", "", "WC", "U", "17.2320328542", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-AUS-07A-2012-012", "", "1", "1"],
          ["20120903", "Australia F6", "Hard", "S", "W", "494", "4", "", "F", "7-6(3) 6-3", "3", "Samuel Groth", "256", "1", "", "R", "24.8569472964", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "", "", "", "2012-M-FU-AUS-06A-2012-031", "", "", ""],
          ["20120903", "Australia F6", "Hard", "S", "W", "494", "4", "", "SF", "6-3 6-4", "3", "Michael Look", "352", "2", "", "R", "24.758384668", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUS-06A-2012-030", "", "", ""],
          ["20120903", "Australia F6", "Hard", "S", "W", "494", "4", "", "QF", "6-2 6-3", "3", "Nick Lindahl", "569", "8", "", "R", "24.0739219713", "183", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-AUS-06A-2012-027", "", "3", "3"],
          ["20120903", "Australia F6", "Hard", "S", "W", "494", "4", "", "R16", "6-3 6-4", "3", "Harry Bourchier", "", "", "WC", "R", "16.59137577", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUS-06A-2012-022", "", "2", "2"],
          ["20120903", "Australia F6", "Hard", "S", "W", "494", "4", "", "R32", "3-6 6-1 6-3", "3", "Michael Venus", "610", "", "", "R", "24.8651608487", "", "NZL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-AUS-06A-2012-012", "", "1", "1"],
          ["20120827", "Australia F5", "Hard", "S", "L", "494", "3", "", "R32", "2-6 7-5 6-0", "3", "Andrew Whittington", "799", "", "Q", "R", "19.0444900753", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUS-05A-2012-005", "", "1", "1"],
          ["20120723", "Wuhan CH", "Hard", "C", "L", "496", "", "Q", "R32", "1-6 6-4 6-1", "3", "Luke Saville", "589", "", "Q", "R", "18.4722792608", "", "AUS", "0", "41", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "0", "2012-6576-014", "", "1", "1"],
          ["20120716", "An-Ning CH", "Clay", "C", "L", "503", "", "Q", "R32", "7-6(5) 5-7 6-4", "3", "Ze Zhang", "184", "5", "", "R", "22.0342231348", "", "CHN", "0", "143", "9", "6", "114", "65", "49", "25", "17", "6", "8", "8", "3", "94", "58", "47", "22", "17", "1", "3", "2", "", "", "0", "2012-6572-008", "", "1", "1"],
          ["20120625", "China F10", "Hard", "S", "L", "528", "", "", "R16", "7-5 7-6(2)", "3", "Young Jun Kim", "859", "", "", "R", "32.3367556468", "", "KOR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-CHN-10A-2012-022", "", "2", "2"],
          ["20120625", "China F10", "Hard", "S", "W", "528", "", "", "R32", "6-4 6-3", "3", "Yong Kyu Lim", "383", "4", "", "U", "21.0212183436", "", "KOR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-CHN-10A-2012-012", "", "1", "1"],
          ["20120618", "China F9", "Hard", "S", "L", "522", "8", "", "QF", "6-4 6-0", "3", "Zhe Li", "358", "3", "", "R", "25.7440109514", "", "CHN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-CHN-09A-2012-026", "", "3", "3"],
          ["20120618", "China F9", "Hard", "S", "W", "522", "8", "", "R16", "6-1 6-2", "3", "Young Jun Kim", "852", "", "", "R", "32.3175906913", "", "KOR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-CHN-09A-2012-020", "", "2", "2"],
          ["20120618", "China F9", "Hard", "S", "W", "522", "8", "", "R32", "6-1 6-4", "3", "Ningyue Cheng", "", "", "Q", "U", "18.431211499", "", "CHN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-CHN-09A-2012-008", "", "1", "1"],
          ["20120528", "Korea F3", "Hard", "S", "L", "528", "", "", "R16", "6-2 6-1", "3", "Di Wu", "379", "6", "", "R", "20.7036276523", "", "CHN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-KOR-03A-2012-021", "", "2", "2"],
          ["20120528", "Korea F3", "Hard", "S", "W", "528", "", "", "R32", "3-6 6-4 6-4", "3", "Woong Sun Jun", "611", "", "", "R", "25.954825462", "190", "KOR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-KOR-03A-2012-010", "", "1", "1"],
          ["20120521", "Korea F2", "Hard", "S", "L", "549", "", "", "R16", "6-3 7-5", "3", "Liang Chi Huang", "485", "", "", "R", "20.2026009582", "", "TPE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-KOR-02A-2012-021", "", "2", "2"],
          ["20120521", "Korea F2", "Hard", "S", "W", "549", "", "", "R32", "6-0 6-3", "3", "Hyun Woo Nam", "", "", "Q", "R", "27.3620807666", "", "KOR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-KOR-02A-2012-010", "", "1", "1"],
          ["20120514", "Korea F1", "Hard", "S", "L", "548", "", "", "SF", "6-4 6-4", "3", "Frederik Nielsen", "273", "1", "", "R", "28.7145790554", "190", "DEN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-KOR-01A-2012-029", "", "", ""],
          ["20120514", "Korea F1", "Hard", "S", "W", "548", "", "", "QF", "7-6(5) 4-6 7-5", "3", "Michal Przysiezny", "466", "6", "", "R", "28.2409308693", "185", "POL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "", "", "", "2012-M-FU-KOR-01A-2012-026", "", "3", "3"],
          ["20120514", "Korea F1", "Hard", "S", "W", "548", "", "", "R16", "1-6 6-4 6-1", "3", "Jae Won Choi", "1628", "", "WC", "U", "22.6228610541", "", "KOR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-KOR-01A-2012-019", "", "2", "2"],
          ["20120514", "Korea F1", "Hard", "S", "W", "548", "", "", "R32", "7-6(8) 6-0", "3", "Yuichi Ito", "913", "", "Q", "R", "25.7713894593", "", "JPN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-KOR-01A-2012-006", "", "1", "1"],
          ["20120416", "Chinese Taipei F2", "Hard", "S", "L", "581", "", "", "SF", "3-6 6-3 7-6(3)", "3", "James Ward", "150", "1", "", "R", "25.18275154", "190", "GBR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-TPE-02A-2012-029", "", "", ""],
          ["20120416", "Chinese Taipei F2", "Hard", "S", "W", "581", "", "", "QF", "6-4 7-6(3)", "3", "Amir Weintraub", "191", "4", "", "R", "25.582477755", "188", "ISR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "", "", "", "2012-M-FU-TPE-02A-2012-026", "", "3", "3"],
          ["20120416", "Chinese Taipei F2", "Hard", "S", "W", "581", "", "", "R16", "6-4 2-6 6-1", "3", "Vincent Millot", "280", "7", "", "L", "26.2094455852", "173", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-TPE-02A-2012-020", "", "2", "2"],
          ["20120416", "Chinese Taipei F2", "Hard", "S", "W", "581", "", "", "R32", "7-6(3) 6-3", "3", "Jae Sung An", "538", "", "", "R", "26.8856947296", "", "KOR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-TPE-02A-2012-007", "", "1", "1"],
          ["20120326", "Australia F4", "Clay", "S", "L", "567", "", "", "R32", "7-5 6-3", "3", "Jason Kubler", "403", "5", "", "R", "18.8336755647", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUS-04A-2012-008", "", "1", "1"],
          ["20120319", "Australia F3", "Clay", "S", "L", "567", "", "", "QF", "7-6(1) 6-4", "3", "Samuel Groth", "394", "5", "", "R", "24.4161533196", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "", "", "", "2012-M-FU-AUS-03A-2012-026", "", "3", "3"],
          ["20120319", "Australia F3", "Clay", "S", "W", "567", "", "", "R16", "6-4 6-4", "3", "Rhys Michael Johnson", "1423", "", "WC", "U", "17.363449692", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2012-M-FU-AUS-03A-2012-019", "", "2", "2"],
          ["20120319", "Australia F3", "Clay", "S", "W", "567", "", "", "R32", "3-6 6-1 7-6(4)", "3", "Brydan Klein", "380", "3", "", "R", "22.2149212868", "183", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUS-03A-2012-005", "", "1", "1"],
          ["20120305", "Kyoto CH", "Carpet", "C", "L", "607", "", "Q", "R16", "3-6 6-4 6-0", "3", "Tatsuma Ito", "105", "3", "", "R", "23.7973990418", "180", "JPN", "0", "98", "11", "7", "94", "49", "34", "21", "13", "9", "13", "5", "2", "62", "33", "27", "20", "12", "4", "5", "2", "", "", "", "2012-91-019", "", "2", "2"],
          ["20120305", "Kyoto CH", "Carpet", "C", "W", "607", "", "Q", "R32", "7-6(4) 6-7(6) 6-4", "3", "Raven Klaasen", "255", "", "", "R", "29.3853524983", "180", "RSA", "0", "144", "18", "6", "115", "64", "50", "23", "17", "7", "10", "7", "3", "131", "82", "54", "23", "17", "6", "10", "2", "", "", "1", "2012-91-006", "", "1", "1"],
          ["20120213", "Australia F1", "Hard", "S", "L", "610", "", "", "R16", "6-3 7-6(0)", "3", "Luke Saville", "886", "", "WC", "R", "18.0314852841", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUS-01A-2012-023", "", "2", "2"],
          ["20120213", "Australia F1", "Hard", "S", "W", "610", "", "", "R32", "6-2 4-6 6-0", "3", "Joshua Milton", "403", "6", "", "R", "22.3326488706", "", "GBR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2012-M-FU-AUS-01A-2012-013", "", "1", "1"],
          ["20120206", "Caloundra CH", "Hard", "C", "L", "632", "", "Q", "R32", "6-1 6-0", "3", "Jimmy Wang", "229", "", "", "R", "26.9924709103", "178", "TPE", "0", "70", "3", "4", "41", "16", "6", "6", "7", "7", "14", "4", "2", "44", "27", "16", "10", "6", "4", "5", "2", "", "", "", "2012-2153-010", "", "1", "1"],
          ["20120109", "Sydney Q", "Hard", "Q", "L", "634", "", "WC", "Q1", "6-2 6-7(4) 6-3", "3", "Stephane Robert", "107", "", "", "R", "31.6468172485", "185", "FRA", "0", "123", "8", "7", "97", "49", "29", "17", "14", "4", "12", "3", "9", "91", "44", "28", "25", "15", "4", "9", "2", "", "", "", "2012-12-006", "", "", ""],
          ["20120102", "Noumea CH", "Hard", "C", "L", "666", "", "Q", "R32", "6-4 7-5", "3", "Romain Jouan", "233", "", "", "R", "26.4640657084", "183", "FRA", "0", "88", "8", "2", "61", "32", "22", "19", "11", "3", "5", "7", "1", "63", "34", "28", "18", "11", "1", "1", "2", "", "", "", "2012-2205-015", "", "1", "1"],
          ["20111121", "Australia F13", "Hard", "S", "L", "660", "", "", "R16", "7-6(7) 4-6 6-3", "3", "Michael Look", "356", "4", "", "R", "23.9917864476", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-AUS-13A-2011-019", "", "2", "2"],
          ["20111121", "Australia F13", "Hard", "S", "W", "660", "", "", "R32", "6-4 6-1", "3", "Andrew Harris", "1221", "", "WC", "R", "17.7084188912", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2011-M-FU-AUS-13A-2011-006", "", "1", "1"],
          ["20111114", "Australia F12", "Hard", "S", "L", "654", "", "", "R16", "6-2 6-3", "3", "Dane Propoggia", "678", "", "", "R", "21.5578370979", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2011-M-FU-AUS-12A-2011-020", "", "2", "2"],
          ["20111114", "Australia F12", "Hard", "S", "W", "654", "", "", "R32", "6-4 6-3", "3", "Ryan Agar", "1301", "", "Q", "R", "24.3997262149", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-AUS-12A-2011-007", "", "1", "1"],
          ["20111031", "Australia F11", "Hard", "S", "L", "733", "", "", "SF", "6-4 6-4", "3", "Colin Ebelthite", "700", "", "Q", "R", "26.9240246407", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2011-M-FU-AUS-11A-2011-029", "", "", ""],
          ["20111031", "Australia F11", "Hard", "S", "W", "733", "", "", "QF", "7-6(5) 6-4", "3", "Nick Lindahl", "626", "8", "", "R", "23.2498288843", "183", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2011-M-FU-AUS-11A-2011-026", "", "3", "3"],
          ["20111031", "Australia F11", "Hard", "S", "W", "733", "", "", "R16", "7-6(4) 7-5", "3", "Michael Venus", "428", "4", "", "R", "24.0410677618", "", "NZL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2011-M-FU-AUS-11A-2011-019", "", "2", "2"],
          ["20111031", "Australia F11", "Hard", "S", "W", "733", "", "", "R32", "6-3 6-2", "3", "Simon Ede", "1501", "", "", "R", "19.6331279945", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2011-M-FU-AUS-11A-2011-006", "", "1", "1"],
          ["20111024", "Australia F10", "Hard", "S", "L", "734", "", "", "R16", "6-4 6-4", "3", "Yasutaka Uchiyama", "582", "9", "", "R", "19.2169746749", "", "JPN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-AUS-10A-2011-018", "", "2", "2"],
          ["20111024", "Australia F10", "Hard", "S", "W", "734", "", "", "R32", "6-3 7-6(3)", "3", "Robert Mckenzie", "1101", "", "", "R", "24.8405201916", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2011-M-FU-AUS-10A-2011-003", "", "1", "1"],
          ["20111010", "Australia F9", "Hard", "S", "L", "761", "", "", "QF", "6-3 6-2", "3", "Benjamin Mitchell", "303", "1", "", "R", "18.8583162218", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-AUS-09A-2011-025", "", "3", "3"],
          ["20111010", "Australia F9", "Hard", "S", "W", "761", "", "", "R16", "6-3 6-2", "3", "Michael Look", "402", "5", "", "R", "23.8767967146", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-AUS-09A-2011-018", "", "2", "2"],
          ["20111010", "Australia F9", "Hard", "S", "W", "761", "", "", "R32", "3-6 6-3 6-4", "3", "Simon Ede", "1508", "", "", "R", "19.575633128", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2011-M-FU-AUS-09A-2011-003", "", "1", "1"],
          ["20111003", "Australia F8", "Hard", "S", "L", "765", "8", "", "QF", "6-4 4-6 7-5", "3", "Brydan Klein", "381", "3", "", "R", "21.7549623546", "183", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-AUS-08A-2011-026", "", "3", "3"],
          ["20111003", "Australia F8", "Hard", "S", "W", "765", "8", "", "R16", "6-3 6-2", "3", "Leon Frost", "900", "", "", "R", "27.7097878166", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-AUS-08A-2011-020", "", "2", "2"],
          ["20111003", "Australia F8", "Hard", "S", "W", "765", "8", "", "R32", "6-0 6-0", "3", "Justin Seller", "", "", "Q", "U", "19.0800821355", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2011-M-FU-AUS-08A-2011-008", "", "1", "1"],
          ["20110912", "Australia F6", "Hard", "S", "L", "797", "", "", "R32", "6-3 6-1", "3", "Nick Lindahl", "492", "6", "", "R", "23.1156741958", "183", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2011-M-FU-AUS-06A-2011-004", "", "1", "1"],
          ["20110905", "Australia F5", "Hard", "S", "L", "801", "8", "", "QF", "W/O", "3", "James Lemke", "283", "1", "", "R", "23.5920602327", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-AUS-05A-2011-025", "", "3", "3"],
          ["20110905", "Australia F5", "Hard", "S", "W", "801", "8", "", "R16", "6-1 6-1", "3", "Naoki Takeda", "", "", "Q", "U", "18.2149212868", "", "JPN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2011-M-FU-AUS-05A-2011-018", "", "2", "2"],
          ["20110905", "Australia F5", "Hard", "S", "W", "801", "8", "", "R32", "4-6 6-3 6-4", "3", "Andrew Gregory", "", "", "Q", "L", "21.6098562628", "", "GBR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-AUS-05A-2011-004", "", "1", "1"],
          ["20110627", "Serbia F3", "Clay", "S", "L", "786", "", "Q", "R32", "6-1 4-6 6-1", "3", "Henri Laaksonen", "859", "", "LL", "R", "19.2197125257", "", "SUI", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-SRB-03A-2011-005", "", "1", "1"],
          ["20110620", "Serbia F2", "Clay", "S", "L", "786", "", "", "R32", "6-2 6-7(4) 6-3", "3", "Dusan Lojda", "254", "1", "", "L", "23.2826830938", "", "CZE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-SRB-02A-2011-001", "", "1", "1"],
          ["20110530", "Poland F3", "Clay", "S", "L", "812", "", "", "R16", "6-2 6-4", "3", "Laurent Recouderc", "309", "2", "", "R", "26.8665297741", "", "FRA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-POL-03A-2011-024", "", "2", "2"],
          ["20110530", "Poland F3", "Clay", "S", "W", "812", "", "", "R32", "6-2 4-6 7-5", "3", "Pavel Filin", "995", "", "", "U", "19.1485284052", "", "BLR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2011-M-FU-POL-03A-2011-015", "", "1", "1"],
          ["20110523", "Poland F2", "Clay", "S", "L", "812", "", "", "R32", "6-3 6-1", "3", "Adam Chadaj", "634", "", "", "L", "27.0581793292", "178", "POL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-POL-02A-2011-010", "", "1", "1"],
          ["20110516", "Poland F1", "Clay", "S", "L", "804", "", "", "R16", "2-6 6-1 7-5", "3", "James Duckworth", "672", "", "", "R", "19.3155373032", "183", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-POL-01A-2011-022", "", "2", "2"],
          ["20110516", "Poland F1", "Clay", "S", "W", "804", "", "", "R32", "7-5 4-6 7-5", "3", "Matt Reid", "553", "3", "", "R", "20.8295687885", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-POL-01A-2011-012", "", "1", "1"],
          ["20110404", "Spain F11", "Clay", "S", "L", "842", "", "Q", "R16", "6-4 6-4", "3", "Yannick Hanfmann", "944", "", "Q", "U", "19.3894592745", "", "GER", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2011-M-FU-ESP-11A-2011-021", "", "2", "2"],
          ["20110404", "Spain F11", "Clay", "S", "W", "842", "", "Q", "R32", "1-6 6-4 6-4", "3", "Alexandre Folie", "477", "8", "", "R", "21.1718001369", "", "BEL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-ESP-11A-2011-009", "", "1", "1"],
          ["20110328", "Spain F10", "Clay", "S", "L", "896", "", "SE", "R16", "6-4 6-3", "3", "Jan Lennard Struff", "353", "2", "", "R", "20.9034907598", "", "GER", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-ESP-10A-2011-024", "", "2", "2"],
          ["20110328", "Spain F10", "Clay", "S", "W", "896", "", "SE", "R32", "6-4 6-4", "3", "Oriol Roca Batalla", "1319", "", "WC", "R", "17.8891170431", "", "ESP", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2011-M-FU-ESP-10A-2011-015", "", "1", "1"],
          ["20110321", "Spain F9", "Clay", "S", "L", "896", "", "Q", "QF", "4-6 6-4 6-2", "3", "Pedro Clar Rossello", "321", "1", "", "R", "25.1553730322", "", "ESP", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-ESP-09A-2011-025", "", "3", "3"],
          ["20110321", "Spain F9", "Clay", "S", "W", "896", "", "Q", "R16", "6-0 1-6 6-4", "3", "Oscar Sabate Bretos", "593", "", "", "R", "24.553045859", "", "ESP", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-ESP-09A-2011-018", "", "2", "2"],
          ["20110321", "Spain F9", "Clay", "S", "W", "896", "", "Q", "R32", "4-6 6-0 6-3", "3", "Ivan Nedelko", "531", "", "", "R", "24.8569472964", "", "RUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-ESP-09A-2011-003", "", "1", "1"],
          ["20110314", "Spain F8", "Clay", "S", "L", "932", "", "Q", "R16", "6-1 7-6(3)", "3", "Daniele Giorgini", "310", "3", "", "R", "26.8665297741", "180", "ITA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-ESP-08A-2011-022", "", "2", "2"],
          ["20110314", "Spain F8", "Clay", "S", "W", "932", "", "Q", "R32", "6-1 6-3", "3", "Marcos Giraldi Requena", "1127", "", "WC", "R", "17.2758384668", "", "ESP", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-ESP-08A-2011-011", "", "1", "1"],
          ["20110228", "Australia F2", "Grass", "S", "L", "895", "", "", "R16", "6-3 6-1", "3", "Brendan Moore", "774", "6", "", "L", "25.6481861739", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-AUS-02A-2011-018", "", "2", "2"],
          ["20110228", "Australia F2", "Grass", "S", "W", "895", "", "", "R32", "1-6 6-3 6-4", "3", "Luke Saville", "1379", "", "WC", "R", "17.0732375086", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-AUS-02A-2011-003", "", "1", "1"],
          ["20110221", "Australia F1", "Grass", "S", "L", "874", "", "", "R32", "6-4 6-4", "3", "James Duckworth", "702", "", "", "R", "19.0855578371", "183", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2011-M-FU-AUS-01A-2011-014", "", "1", "1"],
          ["20110207", "Caloundra CH", "Hard", "C", "L", "871", "", "WC", "R32", "7-5 7-6(4)", "3", "Dayne Kelly", "389", "", "Q", "U", "20.5448323066", "", "AUS", "0", "131", "0", "5", "69", "38", "30", "17", "12", "3", "5", "3", "0", "77", "57", "40", "12", "12", "3", "4", "", "", "", "", "2011-2153-015", "", "1", "1"],
          ["20101129", "Australia F13", "Hard", "S", "L", "928", "", "Q", "R16", "3-6 6-3 7-6(5)", "3", "Samuel Groth", "316", "8", "", "R", "23.112936345", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "", "", "", "2010-M-FU-AUS-13A-2010-023", "", "2", "2"],
          ["20101129", "Australia F13", "Hard", "S", "W", "928", "", "Q", "R32", "7-6(3) 6-3", "3", "Sean Berman", "864", "", "WC", "U", "17.8891170431", "", "USA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2010-M-FU-AUS-13A-2010-014", "", "1", "1"],
          ["20101122", "Australia F12", "Hard", "S", "L", "922", "", "WC", "R16", "6-3 6-1", "3", "Danai Udomchoke", "461", "", "", "R", "29.2813141684", "173", "THA", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "", "", "", "2010-M-FU-AUS-12A-2010-022", "", "2", "2"],
          ["20101122", "Australia F12", "Hard", "S", "W", "922", "", "WC", "R32", "6-4 6-4", "3", "Michael Venus", "319", "3", "", "R", "23.1019849418", "", "NZL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2010-M-FU-AUS-12A-2010-012", "", "1", "1"],
          ["20101108", "Australia F11", "Hard", "S", "L", "976", "", "Q", "R16", "7-6(3) 6-1", "3", "Harri Heliovaara", "362", "3", "", "R", "21.4291581109", "", "FIN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2010-M-FU-AUS-11A-2010-019", "", "2", "2"],
          ["20101108", "Australia F11", "Hard", "S", "W", "976", "", "Q", "R32", "6-1 6-0", "3", "Jordan M Badenko", "", "", "LL", "U", "19.0965092402", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2010-M-FU-AUS-11A-2010-006", "", "1", "1"],
          ["20101101", "Australia F10", "Hard", "S", "L", "975", "", "WC", "R16", "6-4 6-7(5) 6-1", "3", "Matt Reid", "419", "6", "", "U", "20.2929500342", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2010-M-FU-AUS-10A-2010-018", "", "2", "2"],
          ["20101101", "Australia F10", "Hard", "S", "W", "975", "", "WC", "R32", "6-1 6-4", "3", "Harrison Keyser", "", "", "Q", "R", "22.9295003422", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2010-M-FU-AUS-10A-2010-003", "", "1", "1"],
          ["20101011", "Australia F9", "Hard", "S", "L", "1212", "", "Q", "QF", "6-1 5-7 6-1", "3", "Erik Chvojka", "571", "7", "", "L", "23.9589322382", "", "CAN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2010-M-FU-AUS-09A-2010-027", "", "3", "3"],
          ["20101011", "Australia F9", "Hard", "S", "W", "1212", "", "Q", "R16", "7-5 6-3", "3", "Dayne Kelly", "336", "3", "", "U", "20.219028063", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2010-M-FU-AUS-09A-2010-022", "", "2", "2"],
          ["20101011", "Australia F9", "Hard", "S", "W", "1212", "", "Q", "R32", "6-1 6-2", "3", "Ryan Agar", "", "", "Q", "U", "23.3073237509", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2010-M-FU-AUS-09A-2010-011", "", "1", "1"],
          ["20101004", "Australia F8", "Hard", "S", "L", "1220", "", "Q", "R16", "6-1 6-3", "3", "Nick Lindahl", "245", "1", "", "R", "22.1765913758", "183", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2010-M-FU-AUS-08A-2010-017", "", "2", "2"],
          ["20101004", "Australia F8", "Hard", "S", "W", "1220", "", "Q", "R32", "5-7 6-4 6-1", "3", "Isaac Frost", "1248", "", "", "U", "21.7412731006", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2010-M-FU-AUS-08A-2010-002", "", "1", "1"],
          ["20100906", "Australia F5", "Hard", "S", "L", "1206", "", "WC", "R32", "6-7(8) 7-6(6) 6-1", "3", "Jun Chao Xu", "", "", "", "U", "21.954825462", "", "CHN", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2010-M-FU-AUS-05A-2010-007", "", "1", "1"],
          ["20100809", "Austria F3", "Clay", "S", "L", "1309", "", "Q", "R16", "7-5 6-2", "3", "Philip Lang", "1004", "", "", "R", "19.8384668036", "", "AUT", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2010-M-FU-AUT-03A-2010-017", "", "2", "2"],
          ["20100809", "Austria F3", "Clay", "S", "W", "1309", "", "Q", "R32", "6-3 6-4", "3", "Ervin Eleskovic", "371", "1", "", "R", "23.2553045859", "", "SWE", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2010-M-FU-AUT-03A-2010-001", "", "1", "1"],
          ["20100719", "Ireland F1", "Carpet", "S", "L", "1301", "", "Q", "R32", "6-4 6-3", "3", "James Mcgee", "506", "5", "", "R", "23.1074606434", "", "IRL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2010-M-FU-IRL-01A-2010-008", "", "1", "1"],
          ["20100222", "Australia F2", "Grass", "S", "L", "", "", "WC", "R16", "6-2 3-6 6-2", "3", "Jose Rubin Statham", "299", "5", "", "R", "22.8309377139", "183", "NZL", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2010-M-FU-AUS-02A-2010-023", "", "2", "2"],
          ["20100222", "Australia F2", "Grass", "S", "W", "", "", "WC", "R32", "6-3 6-4", "3", "Leon Frost", "935", "", "", "U", "26.0999315537", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2010-M-FU-AUS-02A-2010-014", "", "1", "1"],
          ["20100215", "Australia F1", "Grass", "S", "L", "", "", "Q", "R16", "4-6 7-5 6-2", "3", "Greg Jones", "216", "1", "", "R", "21.0403832991", "190", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2010-M-FU-AUS-01A-2010-017", "", "2", "2"],
          ["20100215", "Australia F1", "Grass", "S", "W", "", "", "Q", "R32", "3-6 6-4 6-2", "3", "Dane Propoggia", "725", "", "", "U", "19.8138261465", "", "AUS", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2010-M-FU-AUS-01A-2010-002", "", "1", "1"],
          ["20081013", "Australia F9", "Clay", "S", "L", "", "", "Q", "R32", "6-0 6-0", "3", "Andrew Gregory", "1517", "", "WC", "L", "18.7351129363", "", "GBR", "0", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2", "", "", "", "2008-M-FU-AUS-09A-2008-010", "", "1", "1"]
          ];


var fourspaces = "\u00a0\u00a0\u00a0\u00a0";

var round_dict = { "R16": 9,
                   "W": 14,
                   "F": 13,
                   "RR": 8,
                   "R64": 6,
                   "R128": 5,
                   "QF": 10,
                   "SF": 11,
                   "R32": 7,
                   'Q1': 1,
                   'Q2': 2,
                   'Q3': 3,
                   'Q4': 4,
                   "": 0,
                   "BR": 12
                  };

// add parser through the tablesorter addParser method 
$.tablesorter.addParser({ 
    // set a unique id 
    id: 'rounds', 
    is: function(s) { 
        // return false so this parser is not auto detected 
        return false; 
    }, 
    format: function(s) { 
        // format your data for normalization 
        return round_dict[s]; 
    }, 
    // set type, either numeric or text 
    type: 'numeric'
});

$.tablesorter.addParser({ 
    id: 'roundsDesc', 
    is: function(s) {  
        return false; 
    }, 
    format: function(s) {  
        return 100 - round_dict[s]; 
    }, 
    type: 'numeric'
});

$.tablesorter.addParser({  
    id: 'scores', 
    is: function(s) {return false;}, 
    format: function(s) {
        if (s == 'W/O') {return 0;}
        if (s.slice(-3) == 'RET') {s = s.slice(0, -4);}        
        if (s == 'UNR') {return 2000;}
        else {return s;}
    },  
    type: 'numeric'
});

$.tablesorter.addParser({  
    id: 'ranks', 
    is: function(s) {return false;}, 
    format: function(s) { 
        if (s == 'UNR') {return 3000;}
        else if (s.indexOf('/') !== -1) {
            var dranks = s.split(/\//);
            if (dranks[0] == "UNR") {var rank1 = 3000;}
            else {rank1 = parseInt(dranks[0]);}
            if (dranks[1] == "UNR") {var rank2 = 3000;}
            else {rank2 = parseInt(dranks[1]);}
            return rank1 + rank2;
            }
        else {return s;} 
    },  
    type: 'numeric'
});

$.tablesorter.addParser({  
    id: 'ascNum', 
    is: function(s) {return false;}, 
    format: function(s) { 
        if (s == '' || s == '-') {return 1000;} 
        else if (s.indexOf("%") != -1) {return parseFloat(s.slice(0,-1));}
        else if (s.indexOf(":") != -1) {
            var hm = s.split(':');
            var minutes = (parseInt(hm[0])*60) + parseInt(hm[1]);
            return minutes;
            }
        else {return s;} 
    },  
    type: 'numeric'
});

$.tablesorter.addParser({  
    id: 'descNum', 
    is: function(s) {return false;}, 
    format: function(s) { 
        if (s == '' || s == '-') {return 1000;} 
        else if (s.indexOf("%") != -1) {return 1000 - parseFloat(s.slice(0,-1));}
        else if (s.indexOf(":") != -1) {
            var hm = s.split(':');
            var minutes = (parseInt(hm[0])*60) + parseInt(hm[1]);
            return 1000 - minutes;
            }        
        else {return 1000 - s;} 
    },  
    type: 'numeric'
});

$.tablesorter.addParser({  
    id: 'dates', 
    is: function(s) {return false;}, 
    format: function(s) { 
        // format your data for normalization
        var yyyy = s.slice(-4);
        var mm = rmonths[s.slice(-8, -5)];
        var day = s.slice(0, -9);
        if (day.length == 1) {
            var dd = '0' + day;
            }
        else {
            var dd = day;
            }
        return yyyy + mm + dd; 
    },  
    type: 'numeric'
}); 

$.tablesorter.addParser({ 
    id: 'datesDesc', 
    is: function(s) {return false;}, 
    format: function(s) { 
        var yyyy = s.slice(-4);
        var mm = rmonths[s.slice(-8, -5)];
        var day = s.slice(0, -9);
        if (day.length == 1) {
            var dd = '0' + day;
            }
        else {
            var dd = day;
            }
        var ymd = yyyy + mm + dd; 
        return 100000000 - parseInt(ymd);
    },  
    type: 'numeric'
});
 
function playeratt(pname, s, q, cc, lk) {
    // lk = 1 or 0
    var precede = ''
    if (s != '') {
        precede = '(' + s;
        if (q != '') {
            precede = precede + '/' + q;
            }
        precede = precede + ')';
        }
    else if (q != '') {
        precede = '(' + q + ')';
        }
    //var nlink = '<a href="http://www.tennisabstract.com/cgi-bin/player.cgi?p=' + pname.replace(/ /g, '') + '">' + pname + '</a>'
    if (cc == '') {var country = '';}
    else {var country = ' [' + cc + ']';}
    if (lk == 1) {return precede + nlink + country;}
    else {return precede + pname + country;}
    
    };

function alignRound(num, dec, perc) {
    if (perc == 1) {
        num = num*100;
        }
    var intrate = Math.round((num)*Math.pow(10, dec))/Math.pow(10, dec);
    var extra = intrate + Math.pow(10, -1*(dec+1));
    var strex = String(extra);
    var indexdot = strex.indexOf('.');
    var done;
    if (perc == 1) {done = strex.slice(0, (indexdot+dec+1)) + '%';}
    else {done = strex.slice(0, (indexdot+dec+1));}
    if (done[0] == 'N' || done[0] == '%') {return '-';}
    else if (done[0] == 'I') {return '-';} // infinity
    else if (dec == 0) {return done.slice(0, -2) + done.slice(-1);}
    else {return done;}
    };
                  
function make(tag, attr, cont) {
    if (arguments.length == 2 && (attr instanceof Array || typeof attr == "string")) {
        cont = attr;
        attributes = null;
        }
    var open = "<" + tag;
    var close = "</" + tag + ">";
    if (attr) {
	for(var name in attr) {
            attx = " " + name + '="' + attr[name] + '"';
	    open = open.concat(attx);
            }
        }
    open = open.concat(">");
    if (cont instanceof Array) {
	var content = cont.join("");
	}
    else {
	var content = cont;
	} 
    var elem = open + content + close;
    return elem;
    }

function sortRev(a,b) {return b - a;}

url2filter = {'K': 'hand',
              'E': 'round',
              'I': 'rank',
              'L': 'age',
              'C': 'level',
              'B': 'surface',
              'A': 'span', 
              'N': 'country', 
              'D': 'tourney', 
              'G': 'asrank',
              'H': 'entry',
              'J': 'oentry',
              'M': 'height',
              'F': 'results',
              'P': 'sets',
              'Q': 'scores',
              'T': 'stats',
              'X': 'extras',
              'U': 'minimum',
              'R': 'crank',
              'Y': 'minyears',
              's': 'sort',
              'r': 'return',
              'v': 'reverse',
              'o': 'overall',
              'w': 'raw',
              'z': 'hands',
              'S': 'prank',
              'V': 'phand'
              };

filter2url = {'hand': 'K',
              'round': 'E',
              'rank': 'I',
              'age': 'L',
              'level': 'C',
              'surface': 'B',
              'span': 'A', 
              'country': 'N', 
              'tourney': 'D', 
              'asrank': 'G',
              'entry': 'H',
              'oentry': 'J',
              'height': 'M',
              'results': 'F',
              'sets': 'P',
              'scores': 'Q',
              'stats': 'T',
              'extras': 'X',
              'minimum': 'U',
              'crank': 'R',
              'minyears': 'Y',
              'hands': 'Z',
              'prank': 'S',
              'phand': 'V'
              };

var filterlist = ['span', 'minyears', 'minimum', 'surface', 'level', 'tourney', 'round', 'results', 'sets', 'scores', 'asrank', 'entry',
              'rank', 'crank', 'oentry', 'hand', 'hands', 'age', 'height', 'country', 'phand', 'prank', 'stats']; //, 'extras'];

var filteropts = {'hand': ['vs Hand', 'All', 'Right', 'Left', 'One-hand BH', 'Two-hand BH'],
                  'phand': ['Partner Hand', 'All', 'Right', 'Left'],
                  'hands': ['vs Hands', 'All', 'Right/Right', 'Right/Left', 'Left/Left'],
                  'round': ['Round', 'All', 'Final', 'Semis', 'Quarters', 'R16', 'R32', 'R64', 'R128', "First Round", "Second Round", "Third Round", "First Match", "Second Match", "Third Match"],
                  'rank': ['vs Rank', 'All', 'Top 5', 'Top 10', 'Top 20', 'Top 50', 'Top 100', '11+', '21+', '51+', '101+', 'Higher', 'Lower'], 
                  'prank': ['Partner Rank', 'All', 'Top 5', 'Top 10', 'Top 20', 'Top 50', 'Top 100', '11+', '21+', '51+', '101+', 'Higher', 'Lower'], 
                  'age': ['vs Age', 'All', 'Younger', 'Older', 'Under 21', 'Under 23', '28 & Over', '30 & Over'],
                  'level': ['Level', 'All', 'Grand Slams', 'Masters', 'All ATP', 'Qualifying', 'Challengers', 'CH Qualies', 'Futures', 'Davis Cup', 'All Pro', 'Juniors'],
                  'surface': ['Surface', 'All', 'Hard', 'Clay', 'Grass', 'Carpet'], // add indoor!
                  'span': ychoices, 
                  'country': cchoices, 
                  'tourney': tchoices, 
                  'asrank': rchoices,
                  'entry': ['as Entry', 'All', 'Seeded', 'Unseeded', 'Qualifier', 'Wild Card'],
                  'oentry': ['vs Entry', 'All', 'Seeded', 'Unseeded', 'Qualifier', 'Wild Card'],
                  'height': ['vs Height', 'All', 'Shorter', 'Taller', "Under 5'10", "Under 6'0", "Over 6'2", "Over 6'4"],
                  'results': ['Results', 'All', 'Wins', 'Losses', 'Completed', 'W by RET', 'L by RET', 'W by W/O', 'L by W/O', 'Won 1st Set', 'Lost 1st Set', 'Won Sets 1&2', 'Lost Sets 1&2', 'Split 1&2', 'Up 2-1 Sets', 'Down 1\u20112 Sets'],
                  'scores': ['Scores', 'All', 'All tiebreaks', 'TB won', 'TB lost', 'Deciding TB', 'All 7-5', '7-5 won', '7-5 lost', 'All bagels', '6-0 won', '6-0 lost', 'All 6-1', '6-1 won', '6-1 lost'],
                  'sets': ['Sets', 'All', 'Straights', 'Deciders', 'All Best of 5', '3 Sets (of 5)', '4-Setters', '5-Setters', 'All Best of 3', '2-Setters', '3 Sets (of 3)'],
                  'stats': ['Stats', 'All'],
                  'extras': ['Extras', 'All', 'Charting', 'Pt-by-Pt', 'Video'],
                  'minimum': ['Min Matches', 'All', '2', '3', '4', '5', '6', '7', '8', '9', '10', '12', '15'],
                  'minyears': ['Min Years', 'All', '2', '3', '4', '5', '6', '7', '8', '9', '10'],
                  'crank': ['vs Curr Rank', 'All', 'Top 10', 'Top 20', 'Top 50', 'Top 100', 'Active', 'Inactive']
                  };

var rmonths = {'Jan': '01',
                'Feb': '02',
                'Mar': '03',
                'Apr': '04',
                'May': '05',
                'Jun': '06',
                'Jul': '07',
                'Aug': '08',
                'Sep': '09',
                'Oct': '10',
                'Nov': '11',
                'Dec': '12'
                };

var months = {'01': 'Jan',
                '02': 'Feb',
                '03': 'Mar',
                '04': 'Apr',
                '05': 'May',
                '06': 'Jun',
                '07': 'Jul',
                '08': 'Aug',
                '09': 'Sep',
                '10': 'Oct',
                '11': 'Nov',
                '12': 'Dec'
                };

var titleTips = {'DR': 'Dominance Ratio: % of return points won\ndivided by % of serve points lost.',
                 'TPW': 'Total points won',
                 'RPW': 'Return points won',
                 'vA%': 'Ace rate against',
                 'v1st%': '1st serve return points won',
                 'v2nd%': '2nd serve return points won',
                 'BPCnv': 'Break point opportunities converted',
                 'BPSvd': 'Break point opportunities saved',
                 'A%': 'Ace rate',
                 'Ace%': 'Ace rate',
                 'DF%': 'Double fault rate',
                 '1st In': 'First serve percentage',
                 '1st%': 'First serve points won',
                 '2nd%': 'Second serve points won',
                 'Rk': "Player's ATP Ranking when the tournament began",
                 'Ranks': "Player's and partner's ATP Rankings when the tournament began",
                 'vRk': "Opponent's ATP Ranking when the tournament began",
                 'vRanks': "Opponents' ATP Rankings when the tournament began",
                 'TP': 'Total Points',
                 'DFs': 'Double faults',
                 'SP': 'Service points',
                 '1SP': '1st serve points',
                 '2SP': '2nd serve points',
                 'vA': 'Opponent aces',
                 'SPW': 'Service points won',
                 'BPSvd%': 'Percentage of break points saved',
                 'BPCnv%': 'Percentage of break points converted',
                 'MS': 'Number of H2H matches with stats\nincluded in the totals to the right',
                 'M': 'Matches played',
                 'Yrs': 'Number of years entered'
                 };

var hdrsServe = ['Date', 'Tournament', 'Surface', 'Rd', 'Rk', 'vRk', '', 'Score', 'More', 'DR', 'A%', 'DF%', '1stIn', '1st%', '2nd%', 'BPSvd', 'Time'];
var hdrsReturn = ['Date', 'Tournament', 'Surface', 'Rd', 'Rk', 'vRk', '', 'Score', 'More', 'DR', 'TPW', 'RPW', 'vA%', 'v1st%', 'v2nd%', 'BPCnv', 'Time'];
var hdrsRaw = ['Date', 'Tournament', 'Surface', 'Rd', 'Rk', 'vRk', '', 'Score', 'More', 'TP', 'Aces', 'DFs', 'SP', '1SP', '2SP', 'vA', 'Time'];

var hdrsDoubles = ['Date', 'Tournament', 'Surface', 'Rd', 'Ranks', 'vRanks', '', 'Score', 'DR', 'Time'];
var hdrsDoublesServe = ['Date', 'Tournament', 'Surface', 'Rd', '', 'Score', 'DR', 'A%', 'DF%', '1stIn', '1st%', '2nd%', 'BPSvd', 'Time'];
var hdrsDoublesReturn = ['Date', 'Tournament', 'Surface', 'Rd', '', 'Score', 'DR', 'TPW', 'RPW', 'vA%', 'v1st%', 'v2nd%', 'BPCnv', 'Time'];
var hdrsDoublesRaw = ['Date', 'Tournament', 'Surface', 'Rd', '', 'Score', 'TP', 'Aces', 'DFs', 'SP', '1SP', '2SP', 'vA', 'Time'];

var hdrsHead = ['H2Hs', 'Opponent', 'W', 'L', 'Win%', 'TB', 'W', 'L', 'TB%', 'First Match', 'Last Match', 'MS', 
                'DR', 'A%', 'DF%', '1stIn', '1st%', '2nd%', 'SPW', 'RPW', 'BPSvd%', 'BPCnv%'];
var hdrsEvents = ['Yrs', 'Event', 'Surface', 'M', 'W', 'L', 'Win%', 'TB', 'W', 'L', 'TB%', 'First', 'Last', 'Best', 'MS', 
                'DR', 'A%', 'DF%', '1stIn', '1st%', '2nd%', 'SPW', 'RPW', 'BPSvd%', 'BPCnv%'];                

var hdict = {'Left': 'L',
             'Right': 'R'
             };

var hdict2 = {'L': 'Left',
              'R': 'Right',
              '': 'Unknown'
             };
             
var levdict = {'Grand Slams': 'G',
               'Masters': 'M',
               'Challengers': 'C',
               'Qualifying': 'Q',
               'Davis Cup': 'D',
               'Juniors': 'J',
               'Futures': 'S'
               }

var levdict2 = {'G': 'Grand Slams',
               'M': 'Masters',
               //'C': 'Challengers',
               'Q': 'Qualifying',
               'D': 'Davis Cup',
               'J': 'Juniors',
               'S': 'Futures'
               }

var rddict = {'Final': 'F',
              'Semis': 'SF',
              'Quarters': 'QF',
              'R16': 'R16',
              'R32': 'R32',
              'R64': 'R64',
              'R128': 'R128',
              'Other': 'RR'
              }

var rddict2 = {'F': 'Final',
              'SF': 'Semis',
              'QF': 'Quarters',
              'R16': 'R16',
              'R32': 'R32',
              'R64': 'R64',
              'R128': 'R128',
              'RR': 'Other'
              }                            

function filterDict(fid, match, mults) {
    if (!$('#tabDubs').hasClass("tablink")) {var doubles = 1;}
    else {doubles = 0;}
    if (fid == 'hand') {
        if (hdict2[match.ohand] in mults) {return 1;}
        else if (match.obackhand == '1' && 'One-hand BH' in mults) {return 1;}
        else if (match.obackhand == '2' && 'Two-hand BH' in mults) {return 1;}
        else {return 0;}
        }
    if (fid == 'phand') {
        if (hdict2[match.phand] in mults) {return 1;}
        else {return 0;}
        }
    else if (fid == 'hands') {
        if ('Right/Right' in mults) {
            if (match.ohand == 'R' && match.o2hand == 'R') {return 1;}
            }
        if ('Left/Left' in mults) {
            if (match.ohand == 'L' && match.o2hand == 'L') {return 1;}
            }
        if ('Right/Left' in mults) {
            var hh = match.ohand + match.o2hand;
            if (hh == 'RL' || hh == 'LR') {return 1;}
            }
        return 0;
        }
    else if (fid == 'extras') { 
        if ('Charting' in mults && match.chartlink != "") {return 1;}
        else if ('Pt-by-Pt' in mults && match.pslink != "") {return 1;}
        else if ('Video' in mults && match.vidlink != "") {return 1;}
        else {return 0;}
        }
    else if (fid == 'age') {
        if ('Younger' in mults && (parseInt(match.obday)) > dob) {return 1;}
        else if ('Older' in mults && (parseInt(match.obday) < dob)) {return 1;}
        else if ('Under 21' in mults && (parseInt(match.date) - parseInt(match.obday)) < 210000) {return 1;}
        else if ('Under 23' in mults && (parseInt(match.date) - parseInt(match.obday)) < 230000) {return 1;}
        else if ('28 & Over' in mults && (parseInt(match.date) - parseInt(match.obday)) > 280000) {return 1;}
        else if ('30 & Over' in mults && (parseInt(match.date) - parseInt(match.obday)) > 300000) {return 1;}
        else {return 0;}
        }
    else if (fid == 'rank') {
        if (match.orank == 'UNR') {match.orank = 2000;}
        if (match.rank == 'UNR') {match.rank = 2000;}
        if (doubles == 1) {
            if (match.o2rank == 'UNR') {match.o2rank = 2000;}
            var vsrank = (parseInt(match.orank) + parseInt(match.o2rank))/2;
            if (match.prank == 'UNR') {match.prank = 2000;}
            var asrank = (parseInt(match.rank) + parseInt(match.prank))/2;
            }
        else {
            vsrank = parseInt(match.orank);
            asrank = parseInt(match.rank);
            }        
        if ('Top 5' in mults && vsrank < 6) {return 1;}
        else if ('Top 10' in mults && vsrank < 11) {return 1;}
        else if ('Top 20' in mults && vsrank < 21) {return 1;}
        else if ('Top 50' in mults && vsrank < 51) {return 1;}
        else if ('Top 100' in mults && vsrank < 101) {return 1;}
        else if ('11+' in mults && vsrank > 10) {return 1;}
        else if ('21+' in mults && vsrank > 20) {return 1;}
        else if ('51+' in mults && vsrank > 50) {return 1;}
        else if ('101+' in mults && vsrank > 100) {return 1;}
        else if ('Higher' in mults && (vsrank < asrank)) {return 1;}
        else if ('Lower' in mults && (vsrank > asrank)) {return 1;}
        else if ('Custom' in mults) {
            if (vsrank >= lowrank && vsrank <= highrank) {return 1;}
            return 0;
            }
        else {return 0;}
        }
    else if (fid == 'prank') {
        if (match.orank == 'UNR') {match.orank = 2000;}
        if (match.rank == 'UNR') {match.rank = 2000;}
        var vsrank = parseInt(match.prank);  // misleading variable name; partner rank
        var asrank = parseInt(match.rank);        // as 'vsrank'
        if ('Top 5' in mults && vsrank < 6) {return 1;}
        else if ('Top 10' in mults && vsrank < 11) {return 1;}
        else if ('Top 20' in mults && vsrank < 21) {return 1;}
        else if ('Top 50' in mults && vsrank < 51) {return 1;}
        else if ('Top 100' in mults && vsrank < 101) {return 1;}
        else if ('11+' in mults && vsrank > 10) {return 1;}
        else if ('21+' in mults && vsrank > 20) {return 1;}
        else if ('51+' in mults && vsrank > 50) {return 1;}
        else if ('101+' in mults && vsrank > 100) {return 1;}
        else if ('Higher' in mults && (vsrank < asrank)) {return 1;}
        else if ('Lower' in mults && (vsrank > asrank)) {return 1;}
        else if ('Custom' in mults) {
            if (vsrank >= lowrank && vsrank <= highrank) {return 1;}
            return 0;
            }
        else {return 0;}
        }
    else if (fid == 'crank') {
        if (!(match.opp in currRank)) {
            if ('Inactive' in mults) {return 1;}
            else {return 0;} // disallows, say, 'Retired' + 'Top 10' -- not strictly correct    
            }  
        else if ('Top 10' in mults && parseInt(currRank[match.opp]) < 11) {return 1;}
        else if ('Top 20' in mults && parseInt(currRank[match.opp]) < 21) {return 1;}
        else if ('Top 50' in mults && parseInt(currRank[match.opp]) < 51) {return 1;}
        else if ('Top 100' in mults && parseInt(currRank[match.opp]) < 101) {return 1;}
        else if ('Active' in mults) {return 1;}
        else {return 0;}
        }        
    else if (fid == 'asrank') {
        if (match.rank == 'UNR') {match.rank = 2000;}
        if ('Number 1' in mults&& parseInt(match.rank) <= 1) {return 1;}
        if ('Top 5' in mults && parseInt(match.rank) <= 5) {return 1;}
        if ('Top 10' in mults && parseInt(match.rank) <= 10) {return 1;}
        else if ('Top 20' in mults && parseInt(match.rank) <= 20) {return 1;}
        else if ('Top 50' in mults && parseInt(match.rank) <= 50) {return 1;}
        else if ('Top 100' in mults && parseInt(match.rank) <= 100) {return 1;}
        else if ('Top 200' in mults && parseInt(match.rank) <= 200) {return 1;}
        else if ('2+' in mults && parseInt(match.rank) >= 2) {return 1;}
        else if ('6+' in mults && parseInt(match.rank) >= 6) {return 1;}
        else if ('11+' in mults && parseInt(match.rank) >= 11) {return 1;}
        else if ('21+' in mults && parseInt(match.rank) >= 21) {return 1;}
        else if ('51+' in mults && parseInt(match.rank) >= 51) {return 1;}
        else if ('101+' in mults && parseInt(match.rank) >= 101) {return 1;}
        else if ('201+' in mults && parseInt(match.rank) >= 201) {return 1;}
        else if ('Custom' in mults) {
            if (parseInt(match.rank) >= lowrank && parseInt(match.rank) <= highrank) {return 1;}
            return 0;
            }
        else {return 0;}
        }
    else if (fid == 'level') {
        if ('All ATP' in mults) {
            if (match.level == 'Q' || match.level == 'C') {}
            else if (match.level == 'J' || match.level == 'S') {}
            else if (match.level == '15' || match.level == '25') {}
            else if (match.round == 'Q1' || match.round == 'Q2') {} // redundant, but current week
            else if (match.round == 'Q3' || match.round == 'Q4') {} // qualies 'level' aren't correctly labeled
            else {return 1;} 
            }
        if ('All Pro' in mults) {
            if (match.level == 'J') {}
            else {return 1;}
            }
        if ('Challengers' in mults) {
            if (match.level != 'C') {}
            else if (match.round == 'Q1' || match.round == 'Q2') {} // redundant, but current week
            else if (match.round == 'Q3' || match.round == 'Q4') {} // qualies 'level' aren't correctly labeled
            else {return 1;} 
            }
        if ('CH Qualies' in mults) {
            if (match.level != 'C') {}
            else if (match.round.slice(0,1) == 'R' || match.round == 'QF') {} // redundant, but current week
            else if (match.round == 'SF' || match.round == 'F') {} // qualies 'level' aren't correctly labeled
            else {return 1;} 
            }
        if (levdict2[match.level] in mults) {return 1;}
        else {return 0;}
        }
    else if (fid == 'round') {
        if (rddict2[match.round] in mults) {return 1;}
        if ('First Round' in mults && parseInt(match.roundnum) == 1) {return 1;}
        if ('Second Round' in mults && parseInt(match.roundnum) == 2) {return 1;}
        if ('Third Round' in mults && parseInt(match.roundnum) == 3) {return 1;}
        if ('First Match' in mults && parseInt(match.matchnum) == 1) {return 1;}
        if ('Second Match' in mults && parseInt(match.matchnum) == 2) {return 1;}
        if ('Third Match' in mults && parseInt(match.matchnum) == 3) {return 1;}
        else {return 0;}
        }
    else if (fid == 'span') {
        if ('Career' in mults) {return 1;}
        else if ('Last 52' in mults) {
            var keyday;
            if (doubles == 1) {
                if (active_dubs == 1) {keyday = today;}
                else {keyday = lastdate_dubs;}
                }
            else {
                if (active == 1) {keyday = today;}
                else {keyday = lastdate;}
                }
            if (parseInt(match.date) < (keyday-10000)) {}
            //else if (parseInt(match.date) > keyday) {}
            else {return 1;}
            }
        if ('Custom' in mults) {
            if (parseInt(match.date) >= startdate && parseInt(match.date) <= enddate) {return 1;}
            return 0;
            }
        var yr = match.date.slice(0,4);
        var mmdd = match.date.slice(4);
        var syr;
        if (parseInt(mmdd) > 1226) {
            syr = (parseInt(yr) + 1) + '';
            }
        else {syr = yr;}
        if (syr in mults) {return 1;}
        else {return 0;}
        }
    else if (fid == 'entry') {  // -1 because entry can be '' for seeds
        if ('Qualifier' in mults && (match.entry == 'Q' || match.entry == 'LL')) {return 1;}
        else if ('Wild Card' in mults && match.entry == 'WC') {return 1;}
        else if ('Seeded' in mults && match.seed.length > 0) {return 1;}
        else if (match.level == 'F' || match.level == 'D') {return 0;}
        else if ('Unseeded' in mults && match.seed.length == 0) {return 1;}
        else {return 0;}
        }
    else if (fid == 'oentry') {  // -1 because entry can be '' for seeds
        if ('Qualifier' in mults && (match.oentry == 'Q' || match.oentry == 'LL')) {return 1;}
        else if ('Wild Card' in mults && match.oentry == 'WC') {return 1;}
        else if ('Seeded' in mults && match.oseed.length > 0) {return 1;}
        else if (match.level == 'F' || match.level == 'D') {return 0;}
        else if ('Unseeded' in mults && match.oseed.length == 0) {return 1;}
        else {return 0;}
        }
    else if (fid == 'height') {  
        if ('Shorter' in mults && parseInt(match.oht) < ht) {return 1;}
        else if ('Taller' in mults && parseInt(match.oht) > ht) {return 1;}
        else if ("Under 5'10" in mults && parseInt(match.oht) < 178) {return 1;}
        else if ("Under 6'0" in mults && parseInt(match.oht) < 183) {return 1;}
        else if ("Over 6'2" in mults && parseInt(match.oht) > 188) {return 1;}
        else if ("Over 6'4" in mults && parseInt(match.oht) > 193) {return 1;}
        else {return 0;}
        }
    else if (fid == 'sets') {
        if (match.score == '') {return 0;}
        if (match.score == 'W/O') {return 0;}
        if ('All Best of 3' in mults && (parseInt(match.max) == 3)) {return 1;}
        else if ('All Best of 5' in mults && (parseInt(match.max) == 5)) {return 1;}
        if ('Straights' in mults || 'Deciders' in mults) {
            //if (match.score == 'W/O') {return 0;} // only because later filters could not possibly include this
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if ('Straights' in mults && (match.max/nsets >= 1.4)) {return 1;}
            else if ('Deciders' in mults && (parseInt(match.max) == nsets)) {return 1;}
            }
        if ('5-Setters' in mults && (parseInt(match.max) == 5)) {
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if (nsets == 5) {return 1;}
            }
        if ('4-Setters' in mults && (parseInt(match.max) == 5)) {
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if (nsets == 4) {return 1;}
            }
        if ('3 Sets (of 5)' in mults && (parseInt(match.max) == 5)) {
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if (nsets == 3) {return 1;}
            }
        if ('3 Sets (of 3)' in mults && (parseInt(match.max) == 3)) {
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if (nsets == 3) {return 1;}
            }
        if ('2-Setters' in mults && (parseInt(match.max) == 3)) {
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if (nsets == 2) {return 1;}
            }
        }
    else if (fid == 'scores') {
        if (match.score.indexOf('7-6') != -1) {
            if ('All tiebreaks' in mults) {return 1;}
            else if ('TB won' in mults && match.wl == 'W') {return 1;}
            else if ('TB lost' in mults && match.wl == 'L') {return 1;}
            }
        if (match.score.indexOf('6-7') != -1) {
            if ('All tiebreaks' in mults) {return 1;}
            else if ('TB won' in mults && match.wl == 'L') {return 1;}
            else if ('TB lost' in mults && match.wl == 'W') {return 1;}
            }
        if ('Deciding TB' in mults) {
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if (parseInt(match.max) == nsets) {
                var lastset = sets[sets.length-1];
                if (lastset.indexOf('7-6') != -1) {return 1;}
                else if (lastset.indexOf('6-7') != -1) {return 1;}
                }     
            }
        if (match.score.indexOf('7-5') != -1) {
            if ('All 7-5' in mults) {return 1;}
            else if ('7-5 won' in mults && match.wl == 'W') {return 1;}
            else if ('7-5 lost' in mults && match.wl == 'L') {return 1;}
            }
        if (match.score.indexOf('5-7') != -1) {
            if ('All 7-5' in mults) {return 1;}
            else if ('7-5 won' in mults && match.wl == 'L') {return 1;}
            else if ('7-5 lost' in mults && match.wl == 'W') {return 1;}
            }  
        if (match.score.indexOf('6-0') != -1) {
            if ('All bagels' in mults) {return 1;}
            else if ('6-0 won' in mults && match.wl == 'W') {return 1;}
            else if ('6-0 lost' in mults && match.wl == 'L') {return 1;}
            }
        if (match.score.indexOf('0-6') != -1) {
            if (match.score.indexOf('70-68') != -1) {return 0;} 
            else if ('All bagels' in mults) {return 1;}
            else if ('6-0 won' in mults && match.wl == 'L') {return 1;}
            else if ('6-0 lost' in mults && match.wl == 'W') {return 1;}
            }  
        if (match.score.indexOf('6-1') != -1) {
            if ('All 6-1' in mults) {return 1;}
            else if ('6-1 won' in mults && match.wl == 'W') {return 1;}
            else if ('6-1 lost' in mults && match.wl == 'L') {return 1;}
            }
        if (match.score.indexOf('1-6') != -1) {
            if ('All 6-1' in mults) {return 1;}
            else if ('6-1 won' in mults && match.wl == 'L') {return 1;}
            else if ('6-1 lost' in mults && match.wl == 'W') {return 1;}
            } 
        return 0;                    
        }
    else if (fid == 'results') {
        if (match.score == '') {return 0;}
        if (match.score.indexOf('W') != -1 || match.score.indexOf('w') != -1) {
            if ('W by W/O' in mults && match.wl == 'W') {return 1;}
            else if ('L by W/O' in mults && match.wl == 'L') {return 1;}
            else {return 0;}
            } // only because later filters could not possibly include this
        else if (match.score.slice(-3) == 'RET') {
            if ('W by RET' in mults && match.wl == 'W') {return 1;}
            else if ('Wins' in mults && match.wl == 'W') {return 1;}
            else if ('L by RET' in mults && match.wl == 'L') {return 1;}
            else if ('Losses' in mults && match.wl == 'L') {return 1;}
            else {return 0;}
            }  
        else if (match.score.slice(-3) == 'DEF' || match.score.slice(-3) == 'ABD') {
            if ('Completed' in mults) {return 0;}
            }     
        else if ('Completed' in mults) {return 1;}
        if ('Wins' in mults && match.wl == 'W') {return 1;}
        else if ('Losses' in mults && match.wl == 'L') {return 1;}
        var sets = match.score.split(' ');
        if (sets[1] == 'RET') {return 0;} // only because this is the last filter
        var firstset = sets[0];
        var a = parseInt(firstset[0]), b = parseInt(firstset[2]);
        var wonfirst;
        if (match.wl == 'W') {
            if (a>b) {wonfirst=1;}
            else {wonfirst=0;}
            }
        else {
            if (a>b) {wonfirst=0;}
            else {wonfirst=1;}
            }
        if ('Won 1st Set' in mults && wonfirst == 1) {return 1;}
        else if ('Lost 1st Set' in mults && wonfirst == 0) {return 1;}
        if (sets.length < 3) {return 0;} // limit to five-setters
        else if (sets[2] == 'RET') {return 0;} // only because this is the last filter
        var secondset = sets[1];
        var a = parseInt(secondset[0]), b = parseInt(secondset[2]);
        var wonsecond;
        if (match.wl == 'W') {
            if (a>b) {wonsecond=1;}
            else {wonsecond=0;}
            }
        else {
            if (a>b) {wonsecond=0;}
            else {wonsecond=1;}
            }
        if ('Won Sets 1&2' in mults && (wonfirst == 1 && wonsecond == 1)) {return 1;}
        else if ('Lost Sets 1&2' in mults && (wonsecond == 0 && wonfirst == 0)) {return 1;}
        else if ('Split 1&2' in mults && (wonfirst != wonsecond)) {return 1;}
        if (sets.length < 4) {return 0;} // limit to four-plus setters
        else if (sets[3] == 'RET') {return 0;} // only because this is the last filter
        var thirdset = sets[2];
        var a = parseInt(thirdset[0]), b = parseInt(thirdset[2]);
        var wonthird;
        if (match.wl == 'W') {
            if (a>b) {wonthird=1;}
            else {wonthird=0;}
            }
        else {
            if (a>b) {wonthird=0;}
            else {wonthird=1;}
            }
        var setswon = wonfirst+wonsecond+wonthird
        if ('Up 2-1 Sets' in mults && setswon == 2) {return 1;}
        else if ('Down 1\u20112 Sets' in mults && setswon == 1) {return 1;}        
        return 0;
        }
    else if (fid == 'tourney') {
        if ('Tour Finals' in mults) {
            if (match.tourn == 'Tour Finals' || match.tourn == 'Masters Cup') {return 1;}
            }
        else if ('Olympics' in mults) {
            if (match.tourn.indexOf('Olympics') != -1) {return 1;}
            }
        else if ('Davis Cup' in mults) {
            if (match.tourn.indexOf('Davis Cup') != -1) {return 1;}
            }
        else if (match.tourn.slice(-2) == ' Q') {
            if (match.tourn.slice(0,-2) in mults) {return 1;}
            }
        if (match.tourn in mults) {return 1;}
        else if (match.tourn.slice(4) in mults) {return 1;}
        return 0;
        }
    else if (fid == 'country') {
        if (match.ocountry in mults) {return 1;}
        return 0;
        }
    else if (fid == 'surface') {
        if (match.surf in mults) {return 1;}
        return 0;
        }
    else if (fid == 'h2h') {
        if (match.opp in mults) {return 1;}
        return 0;
        }
    else if (fid == 'not') {
        if (match.opp in mults) {return 0;}
        return 1;
        }
    else if (fid == 'partner') {
        if (match.partner in mults) {return 1;}
        return 0;        
        }
    else if (fid == 'opp') {
        if (match.opp in mults) {return 1;}
        else if (match.opp2 in mults) {return 1;}
        return 0;        
        }
    else if (fid == 'oppteam') {
        var fullteam = match.opp + '/' + match.opp2;
        if (fullteam in mults) {return 1;}
        return 0;        
        }    
    else if (fid == 'stats') {
        //alert('in stats filter');
        // eventually validate / check that choice and operator are not defaults
        var thresh = Number(statinput);
        if (isNaN(thresh) == true) {return 1;} // some kind of message?
        // get relevant stat for this match; eventually put this in an external function
        // if no stats, return 0 ?
        var mstat = 0;
        if (statchoice == 'Dom Ratio') {
            if (match.ofwon == "") {return 0;}
            var rpw = 1 - (parseInt(match.ofwon) + parseInt(match.oswon))/match.opts; // dominance ratio:
            var spl = 1 - ((parseInt(match.fwon) + parseInt(match.swon))/match.pts);
            mstat = rpw/spl;
            }
        else if (statchoice == 'Ace Perc') {
            if (match.aces == "") {return 0;}
            mstat = (match.aces/match.pts)*100;
            }
        else if (statchoice == 'DF Perc') {
            if (match.dfs == "") {return 0;}
            mstat = (match.dfs/match.pts)*100;
            }
        else if (statchoice == '1st In') {
            if (match.firsts == "") {return 0;}
            mstat = (match.firsts/match.pts)*100;
            }
        else if (statchoice == '1st WPc') {
            if (match.fwon == "") {return 0;}
            mstat = (match.fwon/match.firsts)*100;
            }
        else if (statchoice == '2nd WPc') {
            if (match.swon == "") {return 0;}
            mstat = (match.swon/(match.pts-match.firsts))*100;
            }
        else if (statchoice == 'BP Svd Pc') {
            if (match.saved == "") {return 0;}
            mstat = (match.saved/match.chances)*100;
            }
        else if (statchoice == 'BP Saved') {
            if (match.saved == "") {return 0;}
            mstat = parseInt(match.saved);
            }
        else if (statchoice == 'BPC Faced') {
            if (match.chances == "") {return 0;}
            mstat = parseInt(match.chances);
            }
        else if (statchoice == 'TPW') {
            if (match.fwon == "") {return 0;}
            var pointswon = parseInt(match.fwon) + parseInt(match.swon) + (match.opts - match.ofwon - match.oswon);
            mstat = (pointswon/(parseInt(match.pts) + parseInt(match.opts)))*100;
            }
        else if (statchoice == 'RPW') {
            if (match.ofwon == "") {return 0;}
            mstat = (1 - ((parseInt(match.ofwon) + parseInt(match.oswon))/match.opts))*100;
            }
        else if (statchoice == 'vAce Pc') {
            if (match.oaces == "") {return 0;}
            mstat = (match.oaces/match.opts)*100;
            }
        else if (statchoice == 'v1st WPc') {
            if (match.ofwon == "") {return 0;}
            mstat = (1 - (match.ofwon/match.ofirsts))*100;
            }
        else if (statchoice == 'v2nd WPc') {
            if (match.oswon == "") {return 0;}
            mstat = (1 - (match.oswon/(match.opts-match.ofirsts)))*100;
            }
        else if (statchoice == 'BP Cnv Pc') {
            if (match.osaved == "") {return 0;}
            mstat = (1 - (match.osaved/match.ochances))*100;
            }
        else if (statchoice == 'BP Conv') {
            if (match.ochances == "") {return 0;}
            mstat = (match.ochances - match.osaved);
            }
        else if (statchoice == 'BP Chncs') {
            if (match.ochances == "") {return 0;}
            mstat = parseInt(match.ochances);
            }
        else if (statchoice == 'Tot Pts') {
            if (match.pts == "") {return 0;}
            mstat = (parseInt(match.pts) + parseInt(match.opts));
            }
        else if (statchoice == 'Aces') {
            if (match.aces == "") {return 0;}
            mstat = parseInt(match.aces);
            }
        else if (statchoice == 'DFs') {
            if (match.dfs == "") {return 0;}
            mstat = parseInt(match.dfs);
            }
        else if (statchoice == 'Sv Pts') {
            if (match.pts == "") {return 0;}
            mstat = parseInt(match.pts);
            }
        else if (statchoice == '1Sv Pts') {
            if (match.firsts == "") {return 0;}
            mstat = parseInt(match.firsts);
            }
        else if (statchoice == '2Sv Pts') {
            if (match.pts == "") {return 0;}
            mstat = match.pts-match.firsts;
            }
        else if (statchoice == 'vAces') {
            if (match.oaces == "") {return 0;}
            mstat = parseInt(match.oaces);
            }
        else if (statchoice == 'Time') {
            if (match.time == "") {return 0;}
            mstat = parseInt(match.time);
            }            
        else {return 1;} // invalid stat choice; some kind of message?
        // separate based on operator
        if (statoperatorchoice == 'gt' && mstat <= thresh) {return 0;}
        else if (statoperatorchoice == 'lt' && mstat >= thresh) {return 0;}
        else if (statoperatorchoice == 'ge' && mstat < thresh) {return 0;}
        else if (statoperatorchoice == 'le' && mstat > thresh) {return 0;}
        else if (statoperatorchoice == 'eq' && mstat != thresh) {return 0;}
        else {return 1;} // invalid operator; some kind of message?
        }
    }
    
function unitePartners(multselect) {
    // filter displays doubles team on two lines,
    // so filter parser thinks that's two items, not 
    // one. this function glues them back together
    var mults = {};
    var mult_list = [];
    for (var i=0; i<multselect.length; i++) {
        if (i % 2 == 0) {
            var team = multselect[i];
            }
        else {
            team = team + multselect[i].slice(1);
            mults[team.replace(/\u00a0/g, ' ')] = 1;
            mult_list.push(team.replace(/\u00a0/g, ' '));
            }
        }  
    return [mults, mult_list];  
    }

function genfilter(fid, first, match, att) {
    // fid = filter id; first = default select; match = relevant match object; att = rel attribute
    // find e.g. 'surfaceselected' text -- that's it
    var selname = '.' + fid + 'selected';
    var multselect = $(selname).text().split(fourspaces + fourspaces).slice(1); // list of selected for this filter
    if (multselect[0] == undefined) { // ugly IE hack
    	var multselect = $(selname).text().split("        ").slice(1);
    	}
    if (fid == "oppteam" && multselect[0] != "All") {
        var mult_unit = unitePartners(multselect);
        var mults = mult_unit[0];
        }
    else {
        var mults = {};
        // make list into object, for 'in' searching
        for (var i=0; i<multselect.length; i++) {mults[multselect[i].replace(/\u00a0/g, ' ')] = 1;}  
        }
    if ('All' in mults) {return 1;}
    else if (filterDict(fid, match, mults) != 1) {return 0;} // this is where it gets messy
    return 1;
    }

function hidePermalink() {
    if ($(".perma").text() == 'Hide Permalink') { // generalize this, also add to other toggles that change permalink?
        $(".perma").html('Table Permalink');
        $("#permalink").remove();
        }
    }

function getWinLossTiebreak(match) {
    var tb = 0, tbwon = 0;
    if (match.score.search('W/O') == -1 && match.score != '') {
        if (match.wl == 'W') {match["wins"] = 1; match["losses"] = 0;}
        else {match["losses"] = 1; match["wins"] = 0;}
        }
    else {match["wins"] = 0; match["losses"] = 0;}
    // do some calculations
    sets = match.score.split(' ');       
    for (var i=0; i<sets.length; i++) {
        // tb counting
        if (sets[i].slice(0, 3) == '7-6' || sets[i] == '13-12') {
            tb++;
            if (match.wl == 'W') {tbwon++;}
            }
        else if (sets[i].slice(0, 3) == '6-7') {
            tb++;
            if (match.wl == 'L') {tbwon++;}
            }
        }
    match["tiebreaks"] = tb;
    match["tbwon"] = tbwon;
    return match;
    }

function makeSplitStatRow(mt) {
    var wl = mt["wins"] + '-' + mt["losses"] + ' (' + alignRound((mt["wins"]/(mt['wins'] + mt['losses'])), 0, 1) + ')';
    var tbrecord = mt["tbwon"] + '-' + (mt["tiebreaks"]-mt["tbwon"]) + ' (' + alignRound((mt["tbwon"]/(mt["tiebreaks"])), 0, 1) + ')';
    var acerate = alignRound((mt["aces"]/mt["pts"]), 1, 1);
    var firstin = alignRound((mt["firsts"]/mt["pts"]), 1, 1);
    var fwin = alignRound((mt.fwon/mt.firsts), 1, 1);
    var swin = alignRound((mt.swon/(mt.pts-mt.firsts)), 1, 1);
    var rpw = 1 - (mt.ofwon + mt.oswon)/mt.opts;
    var rpwShow = alignRound(rpw, 1, 1)
    var spw = (mt.fwon + mt.swon)/mt.pts;
    var spwShow = alignRound(spw, 1, 1)
    var spl = 1 - spw;
    var tpw = (mt.fwon + mt.swon + mt.opts - mt.ofwon - mt.oswon)/(mt.pts + mt.opts);
    var tpwShow = alignRound(tpw, 1, 1)
    var domratio = alignRound(rpw/spl, 2);
    var holds = mt.games - (mt.chances - mt.saved);
    var hld = holds / mt.games;
    var hldShow = alignRound(hld, 1, 1);
    var breaks = mt.ochances - mt.osaved;
    var brk = breaks / mt.ogames;
    var brkShow = alignRound(brk, 1, 1);
    var statrow = [wl, tbrecord, acerate, firstin, fwin, swin, hldShow, spwShow, brkShow, rpwShow, tpwShow, domratio];
    return statrow;
    }

var matchhead = ["date","tourn","surf","level","wl","rank","seed","entry","round",
                 "score","max","opp","orank","oseed","oentry","ohand","obday",
                 "oht","ocountry","oactive","time","aces","dfs","pts","firsts","fwon",
                 "swon",'games',"saved","chances","oaces","odfs","opts","ofirsts",
                 "ofwon","oswon",'ogames',"osaved","ochances", "obackhand", "chartlink",
                 "pslink","whserver","matchid","wh","roundnum","matchnum"]
                 
var matchhead_dubs = ["date","tourn","surf","level","wl","rank","seed","entry","round",
                 "score","max","partner", "partnerlast", "prank", "phand", "pbday", "pht", "pcountry", "pactive",
              "oseed", "oentry", "opp","olast","orank","ohand","obday","oht","ocountry","oactive",
              "opp2","o2last","o2rank","o2hand","o2bday","o2ht","o2country","o2active",
              "time","aces","dfs","pts","firsts","fwon",
                 "swon",'games',"saved","chances","oaces","odfs","opts","ofirsts",
                 "ofwon","oswon",'ogames',"osaved","ochances", "obackhand", "chartlink",
                 "pslink","whserver","matchid","wh","roundnum","matchnum"]

var totals = {"aces": 0,"pts": 0,"firsts": 0,"fwon": 0, "swon": 0, "oaces": 0,"opts": 0,"ofirsts":0,"ofwon": 0,"oswon": 0,
              "wins":0, "losses":0, "tiebreaks":0, "tbwon":0, "games":0, "ogames":0, "saved":0, "osaved":0, "ochances":0, "chances":0};
//var stats = ["aces","pts","firsts","fwon", "swon", "oaces","opts","ofirsts","ofwon","oswon", "wins","losses", "tiebreaks", "tbwon"];
// extending this for h2h tally purposes
var stats = ["aces","dfs","pts","firsts","fwon", "swon", "saved", "chances", "oaces","opts", "ofirsts","ofwon","oswon", 
             "osaved","ochances","wins","losses", "tiebreaks", "tbwon", "games", "ogames"];

function addYearSplits() {
    if (!$('#tabDubs').hasClass("tablink")) {
        var splits_head = matchhead_dubs;
        var splits_matches = matchmx_dubs;
        }
    else {
        var splits_head = matchhead;
        var splits_matches = matchmx;
        }
    // remove/set aside bottom row?! need id tag for bottom row
    var splitlist = [];
    var splits = {'Career': $.extend(true, {}, totals)};
    for (m=0; m<splits_matches.length; m++) {
        var match = {}
        for (var x=0; x<splits_head.length; x++) {
            if (splits_matches[m].length <= x) {match[splits_head[x]] = '';}
            else {match[splits_head[x]] = splits_matches[m][x];}
            } 
        var msplits = ['Career'];  
        //var match = matches[m];
        if (parseInt(match.date.slice(4)) > 1224) {var year = (parseInt(match.date.slice(0,4)) + 1) + '';}
        else {var year = match.date.slice(0,4);}
        if (year in splits) {}
        else {
            splits[year] = $.extend(true, {}, totals);
            splitlist.push(year);
            }
        msplits.push(year);
        match = getWinLossTiebreak(match);   
        for (u=0; u<stats.length; u++) {
            t = stats[u];
            for (i=0; i<msplits.length; i++) {
                if (match[t] != '') {splits[msplits[i]][t] = splits[msplits[i]][t] + parseInt(match[t]);}
                }
            }
        }
    splitlist.sort();
    splitlist.reverse();
    splitlist.push('Career');
    for (j=0; j<splitlist.length; j++) {
        var idnum = j+1;
        if (j == (splitlist.length-1)) {idnum = 0;}
        var yearid = 'sA' + idnum;
        var $row = $('<tr>').attr('class', 'yearsplits').attr('id', yearid);
        var split = splitlist[j], mt = splits[split];
        var statrow = makeSplitStatRow(mt);
        var $splitspan = $('<span>').text(split + ' ');
        //var $splitclick = $('<span>').text('(+)').attr('class', 'likelink splitclick');
        $row.append($('<td>').append($splitspan)); //.append($splitclick)); 
        var cells = [];
        for (var i=0; i < statrow.length; i++) {           
            $row.append($('<td>').text(statrow[i]).attr('align', 'right'));
            }
        $("#overall").append($row);
        }
    }

var splitIds = {'Last 52': '',
                'Hard': 'B0',
                'Clay': 'B1',
                'Grass': 'B2',
                'Grand Slams': 'C0',
                'vs Top 10': 'I0',
                'vs Righties': 'K0',
                'vs Lefties': 'K1',
                'Best of 3': 'F2',
                'Best of 5': 'F3',
                'Deciding Sets': 'F5'
                }

function applyPrefilters() {
    if (prefilters.length != 0) {
        for (j=0; j<filterlist.length; j++) {
            var filter = filterlist[j];
            if (filter in prefilters) {
                $("." + filter + "choice").removeClass("selected").removeClass(filter + "selected");
                if (filter in alphaFilters) {
                    var applylist = prefilters[filter].split(',');
                    }
                else if (filter == 'stats') {
                    var applylist = [prefilters[filter]]; // will break if ever multiple stat params
                    }
                else {
                    var applylist = prefilters[filter].split('i');
                    }
                for (k=0; k<applylist.length; k++) {
                    // treat spanCustom separately
                    if (applylist[k].slice(0,2) == 'cx' && filter != "stats") {
                        $("#" + filter + 'Customqq').addClass("selected").addClass(filter + "selected");
                        if (filter == 'span') {
                            startdate = applylist[k].slice(2,10);
                            enddate = applylist[k].slice(10,18);
                            }
                        else if (filter == 'rank') {
                            lowrank = parseInt(applylist[k].slice(2,7)) - 10000;
                            highrank = parseInt(applylist[k].slice(7,12)) - 10000;
                            }
                        }
                    else if (applylist[k].slice(0,2) == 'cx' && filter == "stats") {  
                        $("#" + filter + '0').addClass("selected").addClass(filter + "selected");
                        var statparamstring = applylist[k].slice(2,-2);
                        var statparams = statparamstring.split('-');
                        statchoice = statparams[0].replace(/_/g," ");
                        statoperatorchoice = statparams[1];
                        statinput = statparams[2];
                        }                    
                    else {              
                        $("#" + filter + applylist[k]).addClass("selected").addClass(filter + "selected");
                        }
                    if ($("#" + filter + "head").hasClass('closed')) {$("#" + filter + "head").addClass("selected");}
                    }
                }
            }
        }
    if (opponent.length != 0) {
        var opps = opponent.split(',');
        for (i=0; i<opps.length; i++) {
            var player = insertNameSpaces(opps[i]);
            setPlayerFilter(player, 0, 0);
            setOpponentFilter(player, 0, 0);
            }
        for (i=0; i<opps.length; i++) {
            var playerid = '#h2h' + opps[i];
            $(playerid).addClass('selected').addClass('h2hselected');
            var playerid2 = '#opp' + opps[i];
            $(playerid2).addClass('selected').addClass('oppselected');
            }
        $("#h2hhead").addClass("selected");
        $("#opphead").addClass("selected");
        }
    else {
        $(".h2hchoice").removeClass("selected").removeClass("h2hselected");
        $("#h2hdef").addClass("selected").addClass("h2hselected");
        $(".oppchoice").removeClass("selected").removeClass("oppselected");
        $("#oppdef").addClass("selected").addClass("oppselected");
        }
    if (exclude.length != 0) {
        var nots = exclude.split(',');
        for (i=0; i<nots.length; i++) {
            var player = insertNameSpaces(nots[i]);
            setNotPlayerFilter(player, 0);
            }
        for (i=0; i<nots.length; i++) {
            var playerid = '#not' + nots[i];
            $(playerid).addClass('selected').addClass('notselected');
            }
        $("#nothead").addClass("selected");
        }
    else {
        $(".notchoice").removeClass("selected").removeClass("notselected");
        $("#notdef").addClass("selected").addClass("notselected");
        //$(".notchoice").toggle();
        }
    if (partner.length != 0) {
        var partners = partner.split(',');
        for (i=0; i<partners.length; i++) {
            var player = insertNameSpaces(partners[i]);
            setPartnerFilter(player, 0);
            }
        for (i=0; i<partners.length; i++) {
            var playerid = '#partner' + partners[i];
            $(playerid).addClass('selected').addClass('partnerselected');
            }
        $("#partnerhead").addClass("selected");
        }
    else {
        $(".partnerchoice").removeClass("selected").removeClass("partnerselected");
        $("#partnerdef").addClass("selected").addClass("partnerselected");
        }
    if (opp_team.length != 0) {
        var teams = opp_team.split(',');
        for (i=0; i<teams.length; i++) {
            var player = insertNameSpaces(teams[i]);
            setOppteamFilter(player, 0);
            }
        for (i=0; i<teams.length; i++) {
            var playerid = '#oppteam' + teams[i];
            $(playerid).addClass('selected').addClass('oppteamselected');
            }
        $("#oppteamhead").addClass("selected");
        }
    else {
        $(".oppteamchoice").removeClass("selected").removeClass("oppteamselected");
        $("#oppteamdef").addClass("selected").addClass("oppteamselected");
        }
    $(".tabview").addClass('tablink');
    if (view.length != 0) {
        if (view == "h2h") {
            $("#tabHead").removeClass('tablink');
            $(".header").show();
            $("#h2hhead").hide();
            $("#nothead").hide();
            $("#minyearshead").hide(); 
            $(".minyearschoice").hide();
            $("#partnerhead").hide();
            $(".partnerchoice").hide();
            $("#opphead").hide();
            $(".oppchoice").hide();
            $("#oppteamhead").hide();
            $(".oppteamchoice").hide();
            $("#handshead").hide();
            $(".handschoice").hide();    
            $("#prankhead").hide();
            $(".prankchoice").hide();
            $("#phandhead").hide();
            $(".phandchoice").hide();        
            }
        else if (view == "events") {
            $("#tabEvents").removeClass('tablink');
            $(".header").show();
            $("#h2hhead").hide();
            $("#nothead").hide();  
            $("#partnerhead").hide();
            $(".partnerchoice").hide();
            $("#opphead").hide();
            $(".oppchoice").hide();
            $("#oppteamhead").hide();
            $(".oppteamchoice").hide();
            $("#handshead").hide();
            $(".handschoice").hide();   
            $("#prankhead").hide();
            $(".prankchoice").hide();
            $("#phandhead").hide();
            $(".phandchoice").hide();        
            }
        else if (view == "doubles") {
            $("#tabEvents").removeClass('tablink');
            $(".header").show();
            $("#h2hhead").hide();
            $("#nothead").hide(); 
            $("#minimumhead").hide();
            $(".minimumchoice").hide();
            $("#minyearshead").hide();
            $(".minyearschoice").hide();
            $("#crankhead").hide();
            $(".crankchoice").hide();
            $("#handhead").hide();
            $(".handchoice").hide();	
            $("#agehead").hide();
            $(".agechoice").hide();
            $("#heighthead").hide();
            $(".heightchoice").hide();
            $("#countryhead").hide();
            $(".countrychoice").hide();
            }
        }
    else { // if view == '', set to results
	      $("#tabResults").removeClass('tablink');
        $(".header").show();
        $("#minimumhead").hide();
        $(".minimumchoice").hide();
        $("#minyearshead").hide();
        $(".minyearschoice").hide();
        $("#partnerhead").hide();
        $(".partnerchoice").hide();
        $("#opphead").hide();
        $(".oppchoice").hide();
        $("#oppteamhead").hide();
        $(".oppteamchoice").hide();
        $("#handshead").hide();
        $(".handschoice").hide();    
        $("#prankhead").hide();
        $(".prankchoice").hide();
        $("#phandhead").hide();
        $(".phandchoice").hide();    	
       } 
    }

var spelled = {'A': '', 'D': '', 'N': '', 'I': '', 'T': ''};
function newPrefilters(filterstring) {
    //alert(filterstring);
    var io = filterstring.indexOf('&q=');
    if (io == -1) {opponent = '';}
    else {
        opponent = filterstring.slice(io+3);
        filterstring = filterstring.slice(0, io);
        }
    var xo = filterstring.indexOf('&x=');
    if (xo == -1) {exclude = '';}
    else {
        exclude = filterstring.slice(xo+3);
        filterstring = filterstring.slice(0, xo);
        }
    var vo = filterstring.indexOf('&view=');
    if (vo == -1) {view = '';}
    else {
        view = filterstring.slice(vo+6);
        filterstring = filterstring.slice(0, vo);
        }
    //alert(filterstring);
    prefilters = {};
    filterstring += 'Z';
    var start = 0;
    if (filterstring[0] in spelled) {var go = 0;}
    else {var go = 1;}
    for (c=1; c<filterstring.length; c++) {
        if (filterstring[c] == 'q' && filterstring[c-1] == 'q') {
            if ((c+1)<filterstring.length && filterstring[c+1] == ',') {}
            else {go = 1;}
            }
        else if (filterstring[c] in {'0': 1, '1': 1, '2': 1, '3': 1, '4': 1, '5': 1, '6': 1, '7': 1, '8': 1, '9': 1, 'i': 1, ',': 1, '+': 1} && go == 1) {}
        else if (go == 1) {
            var chunk = filterstring.slice(start, c);
            var k = url2filter[chunk[0]];
            var v = chunk.slice(1);
            prefilters[k] = v;
            start = c;
            if (filterstring[0] in spelled) {go = 0;}
            }
        }
    //alert(opponent);
    resetFilters();
    applyPrefilters();
    makeMatchTable({}, 0);
    }

var splits_singles = ["Last 52", 'Hard', 'Clay', 'Grass', "Grand Slams", 'vs Top 10', 'vs Righties', 'vs Lefties',
                  'Best of 3', 'Best of 5']; //, "Deciding Sets"];
var splits_dubs = ["Last 52", 'Hard', 'Clay', 'Grass', "Grand Slams", 'vs Top 10', 'vs RH/RH', 'vs LH/LH',
                  'vs RH/LH', 'Deciding Sets']; //'Best of 3', 'Best of 5'];                   
                     
function makeSplitsTable(doubles=0) {
    $("#wonloss").empty();
    if (doubles == 1) {
        var splitlist = splits_dubs;
        var splits_head = matchhead_dubs;
        var splits_matches = matchmx_dubs;
        var splits_active = active_dubs;
        var splits_lastdate = lastdate_dubs;
        }
    else {
        var splitlist = splits_singles;
        var splits_head = matchhead;
        var splits_matches = matchmx;
        splits_active = active;
        splits_lastdate = lastdate;
        }
    var splits = {'Last 52': $.extend(true, {}, totals), // alternate w/ career 
                  'Hard': $.extend(true, {}, totals),
                  'Clay': $.extend(true, {}, totals),
                  'Grass': $.extend(true, {}, totals),
                  'Grand Slams': $.extend(true, {}, totals),
                  'vs Top 10': $.extend(true, {}, totals),
                  'vs Righties': $.extend(true, {}, totals),
                  'vs Lefties': $.extend(true, {}, totals),
                  'Best of 3': $.extend(true, {}, totals),
                  'Best of 5': $.extend(true, {}, totals),
                  'Deciding Sets': $.extend(true, {}, totals),
                  'vs RH/RH': $.extend(true, {}, totals),
                  'vs LH/LH': $.extend(true, {}, totals),
                  'vs RH/LH': $.extend(true, {}, totals)
                  };
    // $.extend(true, {}, totals) -- deep copy of totals
    for (m=0; m<splits_matches.length; m++) {
        var match = {}
        for (var x=0; x<splits_head.length; x++) {
            if (splits_matches[m].length <= x) {match[splits_head[x]] = '';}
            else {match[splits_head[x]] = splits_matches[m][x];}
            } 
        var msplits = [];  
        //var match = matches[m];
        match = getWinLossTiebreak(match);
        // get splits
        var keyday;
        if (splits_active == 1) {keyday = today;}
        else {keyday = splits_lastdate;}
        if (parseInt(match.date) <= keyday && parseInt(match.date) >= (keyday-10000)) {msplits.push('Last 52');}
        else {continue;} // only counting matches in last 52
        if (match.surf == "Hard") {msplits.push('Hard');}
        if (match.surf == "Clay") {msplits.push('Clay');}
        if (match.surf == "Grass") {msplits.push('Grass');}
        if (match.level == "G") {msplits.push('Grand Slams');}
        if (match.max == "3") {msplits.push('Best of 3');}
        if (match.max == "5") {msplits.push('Best of 5');}
        if (sets.length == match.max) {msplits.push('Deciding Sets');}
        if (doubles == 1) {
            if ((parseInt(match.orank) + parseInt(match.o2rank)) <= 20) {msplits.push('vs Top 10');}
            if (match.ohand == "R" && match.o2hand == "R") {msplits.push('vs RH/RH');}
            if (match.ohand == "L" && match.o2hand == "L") {msplits.push('vs LH/LH');}
            if (match.ohand == "R" && match.o2hand == "L") {msplits.push('vs RH/LH');}
            if (match.ohand == "L" && match.o2hand == "R") {msplits.push('vs RH/LH');}
            }
        else {
            if (parseInt(match.orank) <= 10) {msplits.push('vs Top 10');}
            if (match.ohand == "R") {msplits.push('vs Righties');}
            if (match.ohand == "L") {msplits.push('vs Lefties');}
            }
        for (u=0; u<stats.length; u++) {
            t = stats[u];
            for (i=0; i<msplits.length; i++) {
                //splits['All'][t] = splits['All'][t] + parseInt(match[t]);
                if (match[t] != '') {splits[msplits[i]][t] = splits[msplits[i]][t] + parseInt(match[t]);}
                }
            }
        }
    var headerrow = ['TOTALS', 'Match', 'Tiebreak', 'Ace%', '1stIn', '1st%', '2nd%', 'Hld%', 'SPW', 'Brk%', 'RPW', 'TPW', 'DR'];
    var $splittable = $('<table>').css("padding-top", "0px").css("border-top", "0px");
    var $splitchunk = $('<thead>');
    var $splitrow = $('<tr>');
    for (var i = 0; i < headerrow.length; i++) { 
        if (i == 0) {var halign = 'left';}
        else {var halign = 'right';}
        var $hspan = $('<span>').text(headerrow[i])
        if (headerrow[i] in titleTips) {$hspan.attr('title', titleTips[headerrow[i]]);}
        var $headth = $('<th>').append($hspan).css('align', halign);
        $splitrow.append($headth);
        }
    $splitchunk.append($splitrow);
    $splittable.append($splitchunk);
    var $splitchunk2  = $('<tbody>').attr('id', 'splitsbody');
    for (j=0; j<splitlist.length; j++) {
        var $splitrow = $('<tr>');
        var $splitspan = $('<span>');
        //var $splitclick = $('<span>');
        var split = splitlist[j], mt = splits[split];
        var statrow = makeSplitStatRow(mt);
        if (split == 'Last 52' || split == 'Career') {$splitspan.html(split + ' ');}
        else {$splitspan.html('&nbsp;&nbsp;' + split + ' ');}
        //$splitclick.text('(+)').attr('class', 'likelink splitclick')
        $splitrow.append($('<td>').append($splitspan)); //.append($splitclick));
        for (var i = 0; i < statrow.length; i++) {
            $splitrow.append($('<td>').text(statrow[i]).attr('align', 'right'));
            }
        if (j != 0) {$splitrow.attr('class', 'moresplits');}
        $splitchunk2.append($splitrow.attr('id', 's' + splitIds[split]))
        }
    var $yearspan = $('<span>').attr('class', 'likelink').text('show yearly totals');
    var $togglespan = $('<span>').attr('class', 'likelink').text('show splits');
    var $lastrow = $('<tr>').append($('<td>').attr('class', 'yeartoggle').append($yearspan));
    $lastrow.append($('<td>').attr('class', 'splittoggle').append($togglespan));
    for (j=2; j<headerrow.length; j++) {$lastrow.append($('<td>').text(''));}
    $splitchunk2.append($lastrow);
    $splittable.append($splitchunk2).attr('class', 'tablesorter').attr('id', 'overall');
    $splittable.attr('width', '40%').attr('border', 0).attr('cellspacing', 0).attr('cellpadding', 0);
    $("#wonloss").html($splittable);
    
    if (typeof photog != 'undefined' && photog != '') {
        $(".moresplits").show();
        $(".splittoggle").html('<span class="likelink">hide splits</span>');
        }
    
    $(".splittoggle").click(function () {
        // close years if it's open and splits are opening
        if ($(".splittoggle").text() == 'show more splits' && $(".yeartoggle").text() == 'hide yearly totals') {
            $(".yearsplits").toggle();
            $(".yeartoggle").html('<span class="likelink">show yearly totals</span>');
            }
        $(".moresplits").toggle();
        if ($(".splittoggle").text() == 'show splits') {
            $(".splittoggle").html('<span class="likelink">hide splits</span>');
            }
        else {$(".splittoggle").html('<span class="likelink">show splits</span>');}
        })
    $(".yeartoggle").click(function () {
        // close splits if it's open and years are opening
        if ($(".yeartoggle").text() == 'show yearly totals' && $(".splittoggle").text() == 'hide splits') {
            $(".moresplits").toggle();
            $(".splittoggle").html('<span class="likelink">show splits</span>');
            }
        if ($(".yearsplits").length == 0) {addYearSplits();}
        $(".yearsplits").toggle();
        if ($(".yeartoggle").text() == 'show yearly totals') {
            $(".yeartoggle").html('<span class="likelink">hide yearly totals</span>');
            }
        else {$(".yeartoggle").html('<span class="likelink">show yearly totals</span>');}
        })
    }

function getFilterParams() {
    var params = '';
    for (j=0; j<filterlist.length; j++) {
        var filter = filterlist[j];
        if (filter in alphaFilters) {var splitter = ',';}
        else {var splitter = 'i';}
        var fselected = '.' + filter + 'selected', fdef = filter + 'def';
        var fkey = filter2url[filter]; // e.g. 'span' = 'A'
        var selnum = '';
        if ($(fselected).attr('id') != fdef) {
            $(fselected).each(function (i) {
                var selid = $(this).attr('id'), selname = selid.slice(filter.length);
                if (selid == 'spanCustomqq') {selname = 'cx'+startdate+enddate+'qq';}
                if (selid == 'rankCustomqq') {selname = 'cx'+(10000+lowrank)+(10000+highrank)+'qq';}
                if (selid == 'stats0') {selname = 'cx'+statchoice.replace(/ /g,"_")+'-'+statoperatorchoice+'-'+statinput+'qq';}
                if (selnum.length == 0) {
                    selnum = selname;
                    }
                else {
                    selnum = selnum + splitter + selname;
                    }
                });
            params = params + fkey + selnum;
            }
        }
    return params;
    }

function getPermalinkParams() {
    startwith = getFilterParams();
    var skey, sdown;
    if($("#matchheader").length == 0) {     // no results were generated 
        return startwith;
        }
    if ($('#matchheader').children(".headerSortDown").length == 0) {
        skey = $('#matchheader').children(".headerSortUp")[0].cellIndex;
        sdown = '1';
        }
    else {
        skey = $('#matchheader').children(".headerSortDown")[0].cellIndex;
        sdown = '0';
        }
    if (skey == '0' && sdown == '1') {}
    else {startwith = startwith + 's' + skey + sdown;}
    
    if (!$('#tabDubs').hasClass("tablink")) {var doubles = 1;}
    else {doubles = 0;}
    
    // a (overview) is default for doubles; o (serve stats) is default for singles
    if (!$(".statso").hasClass('likelink') && doubles == 0) {startwith += '';} 
    else if (!$(".statsa").hasClass('likelink') && doubles == 1) {startwith += '';}
    else if (!$(".statso").hasClass('likelink')) {startwith += 'o1';}
    else if (!$(".statsr").hasClass('likelink')) {startwith += 'r1';}
    else if (!$(".statsw").hasClass('likelink')) {startwith += 'w1';}
    // insert opponents, separated by commas, into url
    if ($('#h2hdef').hasClass('selected')) {}
    else {
        var oppstring = '';
        var opps = $('.h2hselected').text().split(fourspaces + fourspaces).slice(1);
        for (var i=0; i<opps.length; i++) {
            //oppstring = oppstring + opps[i].replace('\u00a0', '') + ',';
            oppstring = oppstring + opps[i].replace(/\u00a0/g, '') + ',';  //.replace(/ /g, '')
            }
        startwith = startwith + '&q=' + oppstring.slice(0,-1);
        }
    // insert excludes, separated by commas, into url
    if ($('#notdef').hasClass('selected')) {}
    else {
        var notstring = '';
        var nots = $('.notselected').text().split(fourspaces + fourspaces).slice(1);
        for (var i=0; i<nots.length; i++) {
            //notstring = notstring + nots[i].replace('\u00a0', '') + ',';
            notstring = notstring + nots[i].replace(/\u00a0/g, '') + ',';  //.replace(/ /g, '')
            }
        startwith = startwith + '&x=' + notstring.slice(0,-1);
        }
    if ($('#partnerdef').hasClass('selected')) {}
    else {
        var oppstring = '';
        var opps = $('.partnerselected').text().split(fourspaces + fourspaces).slice(1);
        for (var i=0; i<opps.length; i++) {
            //oppstring = oppstring + opps[i].replace('\u00a0', '') + ',';
            oppstring = oppstring + opps[i].replace(/\u00a0/g, '') + ',';  //.replace(/ /g, '')
            }
        startwith = startwith + '&d=' + oppstring.slice(0,-1);
        }
    if ($('#oppdef').hasClass('selected')) {}
    else {
        var oppstring = '';
        var opps = $('.oppselected').text().split(fourspaces + fourspaces).slice(1);
        for (var i=0; i<opps.length; i++) {
            //oppstring = oppstring + opps[i].replace('\u00a0', '') + ',';
            oppstring = oppstring + opps[i].replace(/\u00a0/g, '') + ',';  //.replace(/ /g, '')
            }
        startwith = startwith + '&q=' + oppstring.slice(0,-1);
        }
    if ($('#oppteamdef').hasClass('selected')) {}
    else {
        var oppstring = '';
        var opps = $('.oppteamselected').text().split(fourspaces + fourspaces).slice(1);
        for (var i=0; i<opps.length; i++) {
            //oppstring = oppstring + opps[i].replace('\u00a0', '') + ',';
            if (i % 2 == 0) {
                oppstring = oppstring + opps[i].replace(/\u00a0/g, ''); 
                }
            else {
                oppstring = oppstring + opps[i].replace(/\u00a0/g, '') + ','; 
                } 
            }
        startwith = startwith + '&t=' + oppstring.slice(0,-1);
        }
    // add &view= 
    if (!$('#tabHead').hasClass("tablink")) {startwith = startwith + "&view=h2h";}
    else if (!$('#tabEvents').hasClass("tablink")) {startwith = startwith + "&view=events";}
    else if (!$('#tabDubs').hasClass("tablink")) {startwith = startwith + "&view=doubles";}
    //else {startwith = startwith + "&view=singles";}
    return startwith;
    }

function insertNameSpaces(opponent) {
    var oppname = opponent[0];
    for (var c=1; c<opponent.length; c++) {
        if (opponent[c] == opponent[c].toUpperCase()) {
            oppname = oppname + ' ' + opponent[c];
            }
        else {oppname += opponent[c];}
        }
    oppname = oppname.replace('/ ', '/');  // for doubles
    oppname = oppname.replace(' /', '/');  // for doubles
    return oppname;
    }

function resetFilters() {
    $(".inmenu").removeClass("selected");
    $(".menudefault").addClass("selected");
    $(".header").removeClass("selected");
    var modFilterlist = filterlist.slice()
    modFilterlist.push('h2h');
    modFilterlist.push('not');
    modFilterlist.push('partner');
    modFilterlist.push('opp');
    modFilterlist.push('oppteam');
    for (i=0; i<modFilterlist.length; i++) {
        var fname = modFilterlist[i];
        var fchoice = '.' + fname + 'selected', fdef = '#' + fname + 'def';
        $(fchoice).removeClass(fchoice.slice(1));
        $(fdef).addClass(fchoice.slice(1));
        }
    }
    
function filterMatch(match, view) {
    if (view == "doubles") {
        if (genfilter('partner', 'Partner', match, match.partner) != 1) {return 0;} 
        if (genfilter('opp', 'Opponent', match, match.opp) != 1) {return 0;}
        if (genfilter('oppteam', 'Opp Team', match, match.opp) != 1) {return 0;}
        if (genfilter('hands', 'vs Hands', match, match.ohand) != 1) {return 0;}
        if (genfilter('prank', 'Partner Rank', match, match.prank) != 1) {return 0;}
        if (genfilter('phand', 'Partner Hand', match, match.phand) != 1) {return 0;}
        }
    else {
        if (genfilter('h2h', 'Head-to-Head', match, match.opp) != 1) {return 0;}     
        if (genfilter('not', 'Exclude Opp', match, match.opp) != 1) {return 0;}
        if (genfilter('crank', 'vs Curr Rk', match, match.opp) != 1) {return 0;}
        if (genfilter('hand', 'vs Hand', match, match.ohand) != 1) {return 0;}
        if (genfilter('country', 'vs Country', match, match.ocountry) != 1) {return 0;}
        if (genfilter('age', 'vs Age', match, match.obday) != 1) {return 0;}
        if (genfilter('height', 'vs Height', match, match.oht) != 1) {return 0;}
        } 
    if (genfilter('span', 'Last 52', match, match.date) != 1) {return 0;}  
    if (genfilter('rank', 'vs Rank', match, match.orank) != 1) {return 0;}
    if (genfilter('asrank', 'as Rank', match, match.rank) != 1) {return 0;}
    if (genfilter('level', 'Level', match, match.level) != 1) {return 0;}
    if (genfilter('round', 'Round', match, match.round) != 1) {return 0;}
    if (genfilter('surface', 'Surface', match, match.surf) != 1) {return 0;} 
    if (genfilter('tourney', 'Event', match, match.tourn) != 1) {return 0;} 
    if (genfilter('entry', 'Entry', match, match.entry) != 1) {return 0;} 
    if (genfilter('oentry', 'vs Entry', match, match.oentry) != 1) {return 0;} 
    if (genfilter('results', 'All', match, match.wl) != 1) {return 0;}
    if (genfilter('sets', 'All', match, match.max) != 1) {return 0;}  
    if (genfilter('scores', 'All', match, match.score) != 1) {return 0;} 
    if (genfilter('stats', 'Stats', match, match.wl) != 1) {return 0;} 
    //if (genfilter('extras', 'Extras', match, match.vidlink) != 1) {return 0;}
    return 1;
    }
    
function confirmSort(slist) {
    if ($(".headerSortDown").length > 0 || $(".headerSortUp").length > 0) {  // not the first rendering of the table; keep previous sort
        var skey, sdown;
        if ($('#matchheader').children(".headerSortDown").length == 0) {
            skey = $('#matchheader').children(".headerSortUp")[0].cellIndex;
            sdown = '1';
            }
        else {
            skey = $('#matchheader').children(".headerSortDown")[0].cellIndex;
            sdown = '0';
            }
        if (skey == '0' && sdown == '1') {}
        else {slist = [[skey, sdown]];}
        }
    else if ('sort' in prefilters) { // first rendering, use sort params from url
        var col, down;
        col = parseInt(prefilters['sort'].slice(0, -1));
        down = parseInt(prefilters['sort'].slice(-1));
        if (col == 0 && down == 1) {slist = [[0,1], [3,1]];}
        else if (col == 6 || col == 7) {slist = [[0,1], [3,1]];} // unsortable columns ... eh
        else {slist = [[col, down]];}
        }
    else {} // first rendering, no specified sort params
    return slist;
    }
    
function showDate(md) {
    var yyyy, mm, dd; // reformat date
    yyyy = md.slice(0, 4);
    mm = md.slice(4, 6);
    dd = md.slice(6);
    // non-breaking dash: &#8209;
    var showdate = parseInt(dd,10) + '\u2011' + months[mm] + '\u2011' + yyyy;
    return showdate;
    }
    
function getFilterTitle(ftitle) {
    var eightspaces = '\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'
    var opdict = {'ge': '>=', 'le': '<=', 'gt': '>', 'lt': '<', 'eq': '='};
    for (j=0; j<filterlist.length; j++) {
        var filter = filterlist[j];
        var fselected = '.' + filter + 'selected', fdef = filter + 'def';
        if ($(fselected).attr('id') != fdef || j == 0) { // j == 0 so that time span (e.g. last 52) is always displayed)
            if (ftitle != '') {ftitle += '; ';}
            if ($(fselected).attr('id') == 'spanCustomqq') {
                var showstart = startdate.slice(6) + '-' + months[startdate.slice(4,6)] + '-' + startdate.slice(0,4);
                var showend = enddate.slice(6) + '-' + months[enddate.slice(4,6)] + '-' + enddate.slice(0,4);
                ftitle = ftitle + filteropts[filter][0] + ': ' + showstart + ' to ' + showend + ' [custom]';
                }
            else if ($(fselected).attr('id') == 'rankCustomqq') {
                ftitle = ftitle + filteropts[filter][0] + ': ' + lowrank + ' to ' + highrank + ' [custom]';
                }   
            else if ($(fselected).attr('id') == 'stats0') {
                if (statchoice in statpercs) {var statdisp = statinput+'%';}
                else if (statchoice == 'Time') {
                    var rem = (statinput % 60);
                    if (rem < 10) {var mindisp = '0'+String(rem);}
                    else {var mindisp = String(rem);}
                    var statdisp = Math.floor(statinput/60) + ':' + mindisp;
                    }
                else {var statdisp = statinput;}
                ftitle = ftitle + filteropts[filter][0] + ': ' + statchoice + ' ' + opdict[statoperatorchoice] + ' ' + statdisp + ' [custom]';
                //add percent sign as necessary?
                }             
            else {ftitle = ftitle + filteropts[filter][0] + ': ' + $.trim($(fselected).text());}
            ftitle = ftitle.replace(/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/g, ', ')
            // add comma if more than one fselected?
            }
        }
    return ftitle;
    }
  
function renderResults(stdscores, showstats, hdrs, defSort) {
    // defSort: 1 = return to defaults; 0 = check if already sorted and keep that
    var currentfilter = $.extend(true, {}, totals);
    // decide now on table sorting
    var slist = [[0,1], [3,1]];
    if (defSort == 0) {slist = confirmSort(slist);}

    var $matchtable = $('<table>');
    var $mthead = $('<thead>');
    var $mtheaderrow = $('<tr>').attr('id', 'matchheader'); 
    var $mtfoot = $('<tfoot>');
    var $mtfooterrow = $('<tr>').attr('id', 'matchfooter').attr('background-color', '#FFF'); // color weirdness?  
    var $mtbody = $('<tbody>');
    var rightaligns = {4: '', 5: '', 9: '', 10: '', 11: '', 12: '', 13: '', 14: '', 15: '', 16: ''};
    for (var s = 0; s < matchmx.length; s++) {   
        if (s == 0) {
            // header row
            var cells = [];
            for (var i = 0; i < hdrs.length; i++) {
                //var $mthcell = $('<th>');
                var $mthspan = $('<span>').text(hdrs[i]);
                if (hdrs[i] in titleTips) {$mthspan.attr('title', titleTips[hdrs[i]]);}
                var $mthcell = $('<th>').append($mthspan);
                if (i in rightaligns) {$mthcell.attr('align', 'right');}
                $mtheaderrow.append($mthcell);
                }
            $mthead.append($mtheaderrow);
            $matchtable.append($mthead);
            // footer row
            var fcells = [];
            for (var i = 0; i < hdrs.length; i++) {
                //var $mftcell = $('<tr>'); // check
                if (i == 1 && !$("#spanCareerqq").hasClass('selected')) { // && career is not selected
                    var $mftspan = $('<span>').text('Show Career').attr('font-style', 'italic');
                    $mftspan.attr('id', 'careerclick').attr('class', 'likelink');
                    }
                else {
                    var $mftspan = $('<span>').text('');
                    }
                var $mftcell = $('<td>').append($mftspan);
                $mtfooterrow.append($mftcell);
                }
            $mtfoot.append($mtfooterrow);
            $matchtable.append($mtfoot);
            }            
            
        // when adding a new column, esp. if just in some players' js files, add the header to 'matchhead' above
        // this fills in the missing cells
        var match = {}
        for (var x=0; x<matchhead.length; x++) {
            if (matchmx[s].length <= x) {match[matchhead[x]] = '';}
            else {match[matchhead[x]] = matchmx[s][x];}
            } 
            
        if (filterMatch(match, 'results') != 1) {continue;}

        var $mtrow = $('<tr>');        
        var showdate = showDate(match.date);
        var yyyy, mm, dd; // reformat date
        yyyy = match.date.slice(0, 4);
        mm = match.date.slice(4, 6);
        dd = match.date.slice(6);
        //if (typeof dob === 'undefined') {}
        //else {
        //    var dobStr = dob+'';
        //    var dobObj  = new Date(dobStr.slice(0,4), dobStr.slice(4,6), dobStr.slice(6));
        //    var tdObj  = new Date(yyyy, mm, dd);
        //    var days = parseInt((tdObj.getTime() - dobObj.getTime())/one_day);
        //    var years = parseInt(days/365);
        //    var plusdays = days % 365;
        //    if (plusdays < 10) {plusdays = '00'+plusdays;}
        //    else if (plusdays < 100) {plusdays = '0'+plusdays;}
        //    $datecell.attr('title', 'Age: '+years+'.'+plusdays);
        //    }
        if (yyyy >= 2085 && yyyy < 1916) {
            var wdate = yyyy+'-'+mm+'-'+dd;
            var wlink = 'https://tennisabstract.herokuapp.com/ATP/Rankings/'+wdate+'/';
            //$datecell.attr('href', wlink);  
            //var $datecell = $('<td>').append($('<a>').text(showdate).attr('href', wlink));
            var $datecell = $('<td>').text(showdate);
            }          
        else {var $datecell = $('<td>').text(showdate).attr('class', 'tdate');}
        $mtrow.append($datecell);
        
        var showtourn = match.tourn;
        if (match.tourn.indexOf('Davis C') != -1) {
            $mtrow.append($('<td>').text(match.tourn));
            }
        else if (match.level == 'S' | match.level == 'E') {
            $mtrow.append($('<td>').text(match.tourn));
            }
        else if (match.tourn.slice(0,3) == 'ATP' && (yyyy == '2022' | yyyy == '2024' || yyyy == '2023')) {
            $mtrow.append($('<td>').text(match.tourn.slice(4)));
            }
        else if (match.tourn.slice(-10) == 'Challenger' && (yyyy == '2022' | yyyy == '2024' || yyyy == '2023')) {
            $mtrow.append($('<td>').text(match.tourn.slice(0,-11)+' CH'));
            }
        else {
            if (match.tourn.slice(-2) == ' Q') {
                var showtourn = match.tourn.slice(0, -2);
                var qtag = '&f=B8';
                }
            else {
                var showtourn = match.tourn;
                var qtag = '';}
            var tlink = 'https://www.tennisabstract.com/cgi-bin/tourney.cgi?t=' + yyyy + showtourn.replace(/ /g, '_').replace(/'/g, 'xx') + qtag;
            $mtrow.append($('<td>').append($('<a>').text(match.tourn).attr('href', tlink)));
            }
        $mtrow.append($('<td>').text(match.surf));
        $mtrow.append($('<td>').text(match.round));
        $mtrow.append($('<td>').text(match.rank).attr('align', 'right'));
        $mtrow.append($('<td>').text(match.orank).attr('align', 'right'));

        var $pentry = $('<span>'), $pname = $('<span>'), $oppentry = $('<span>'), $opplink = $('<span>'), $oppcc = $('<span>')  // player entry
        if (match.seed != '') {$pentry.text('(' + match.seed + ')')}
        else if (match.entry != '') {$pentry.text('(' + match.entry + ')')}
        else {$pentry.text('');}
        $pname.text(lastname).css('font-weight', 'bold'); // player name
        if (match.oseed != '') {$oppentry.text('(' + match.oseed + ')')} // opp entry
        else if (match.oentry != '') {$oppentry.text('(' + match.oentry + ')')}
        else {$oppentry.text('');}
        var nlink = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + match.opp.replace(/ /g, '') // opp link
        var $olk = $('<a>').text(match.opp).attr('href', nlink);
        $opplink.append($olk);
        $oppcc.text(' [' + match.ocountry + ']'); 
        var $onespace = $('<span>').text('\u00a0')
        var $onespace2 = $('<span>').text('\u00a0')
        if (match.score == '' && (yyyy == '2023' | yyyy == '2024')) {var $deflink = $('<span>').text('vs');}
        else {var $deflink = $('<span>').text('d.');}
        if ($('#h2hdef').hasClass('selected')) {$deflink.attr('class', 'likelink h2hclick');}
        var $matchcell = $('<td>').attr('class', match.opp.replace(/ /g, ''));
        if (match.wl == "W" || match.wl == 'U') {
            $matchcell.append($pentry).append($pname).append($onespace).append($deflink).append($onespace2).append($oppentry).append($opplink).append($oppcc);
            }
        else {
            $matchcell.append($oppentry).append($opplink).append($oppcc).append($onespace).append($deflink).append($onespace2).append($pentry).append($pname);
            }
        $mtrow.append($matchcell);
        if (match.score == '' && (yyyy == '2023' | yyyy == '2024')) {
            var $scorecell = $('<a>').text('Live Scores').attr('href', 'https://www.livescore.in/tennis/').attr('target', '_blank');
            }
        else if (stdscores == true || match.score == 'W/O') {
            if (match.whserver != '' && match.whserver == 'magic') { // re-activate when match.py working
                if (match.level == 'S') {var mlev = 'FUT';}
                else if (match.level == 'C') {mlev = 'CHA';}
                else if (match.level == 'Q') {mlev = 'AQU';}
                else if (match.round == 'Q1' || match.round == 'Q2' || match.round == 'Q3') {mlev = 'AQU';}
                else {mlev = 'ATP';}
                var wlink = 'https://tennisabstract.com/cgi-bin/match.py?q=' + match.matchid + '/' + mlev + '/';
                wlink = wlink + showtourn.replace(/ /g, '_') + '/' + match.round + '/';
                if (match.wl == 'W') {
                    wlink = wlink + fullname.replace(/ /g, '_') + '/vs/' + match.opp.replace(/ /g, '_') + '/1'
                    }
                else {
                    wlink = wlink + match.opp.replace(/ /g, '_') + '/vs/' + fullname.replace(/ /g, '_') + '/0'
                    }
                var $scorecell = $('<a>').text(match.score).attr('href', wlink).attr('target', '_blank').attr('title', "Point-by-point stats for this match (new window)");                
                }
            else {
                var $scorecell = $('<span>').text(match.score);
                }
            }
        else if (match.wl == 'L') {
            var sets = match.score.split(' '), newscore = '';
            for (k=0; k<sets.length; k++) {
                var st = sets[k];
                if (st == 'RET') {newscore = newscore + 'RET ';}
                else if (st[2] == '-') {newscore = newscore + st.slice(3) + '-' + st.slice(0, 2) + ' ';}
                else {newscore = newscore + st[2] + st[1] + st[0] + st.slice(3) + ' ';}
                // what about 70-68, 11-9, etc?
                }
            newscore = newscore.slice(0, -1);
            //$mtrow.append($('<td>').text(newscore));
            var $scorecell = $('<span>').text(newscore);
            }
        else {
            //$mtrow.append($('<td>').text(match.score));
            var $scorecell = $('<span>').text(match.score);
            }
        var $scorelinks = $('<td>').append($scorecell);
        $mtrow.append($scorelinks);
        var $matchlinks = $('<td>');
        if (match.chartlink != "") {
            var clink = 'https://www.tennisabstract.com/charting/' + match.chartlink;
            var $chartlink = $('<a>').text("(ch)").attr('href', clink).attr('target', '_blank').attr('title', "Charting-Based Stats (new window)");
            var $onespace3 = $('<span>').text('\u00a0');
            $matchlinks.append($onespace3).append($chartlink);
            }
        if (match.pslink != "") {
            var $onespace4 = $('<span>').text('\u00a0');
            var plink = 'https://www.tennisabstract.com/cgi-bin/slamWinProbability.py?m=' + match.pslink;
            var $pslink = $('<a>').text("(wp)").attr('href', plink).attr('target', '_blank').attr('title', "Point-by-Point Data (new window)");
            $matchlinks.append($onespace4).append($pslink);
            }
        //if (match.vidlink != "") {
        //   var $onespace5 = $('<span>').text('\u00a0');
        //    var $vlink = $('<a>').text("(vid)").attr('href', match.vidlink).attr('target', '_blank').attr('title', "Full Match Video (new window)");
        //    $matchlinks.append($onespace5).append($vlink);
        //    }
        $mtrow.append($matchlinks);
        if (match.score == 'W/O' || match.pts == '') {  // matches with no stats, leave blank
            var statrow = ['', '', '', '', '', '', ''], showtime = '', domratio = '';
            }
        else {
            var rpw = 1 - (parseInt(match.ofwon) + parseInt(match.oswon))/match.opts; // dominance ratio:
            var spl = 1 - ((parseInt(match.fwon) + parseInt(match.swon))/match.pts);
            var num = rpw/spl, dec = 2;
            var domratio = alignRound(rpw/spl, dec);
            var matchtime = match.time;
            if (matchtime == '') {var showtime = '';}
            else {
                var hours = parseInt(matchtime/60);
                var minutes = matchtime % 60;
                if (minutes < 10) {minutes = '0' + minutes;}
                var showtime = hours + ':' + minutes;
                }
            var hours = parseInt(matchtime/60);
            var minutes = matchtime % 60;
            if (minutes < 10) {minutes = '0' + minutes;}
            if (showstats == 'o') {
                var acerate = alignRound((match.aces/match.pts), 1, 1);
                var dfrate = alignRound((match.dfs/match.pts), 1, 1);
                var firstin = alignRound((match.firsts/match.pts), 1, 1);
                var fwin = alignRound((match.fwon/match.firsts), 1, 1);
                var swin = alignRound((match.swon/(match.pts-match.firsts)), 1, 1);
                //var bksaved = alignRound((match.saved/match.chances), 1, 1) + ' (' + match.saved + '/' + match.chances + ')';
                var bksaved = match.saved + '/' + match.chances;
                var statrow = [domratio, acerate, dfrate, firstin, fwin, swin, bksaved];
                }
            else if (showstats == 'r') {
                var pointswon = parseInt(match.fwon) + parseInt(match.swon) + (match.opts - match.ofwon - match.oswon);
                var tpw = alignRound((pointswon/(parseInt(match.pts) + parseInt(match.opts))), 1, 1);
                var rpw = alignRound(1 - ((parseInt(match.ofwon) + parseInt(match.oswon))/match.opts), 1, 1);
                var vace = alignRound((match.oaces/match.opts), 1, 1);
                var r1pw = alignRound(1 - (match.ofwon/match.ofirsts), 1, 1);
                var r2pw = alignRound(1 - (match.oswon/(match.opts-match.ofirsts)), 1, 1);
                //var bkconv = alignRound(1 - (match.osaved/match.ochances), 1, 1) + ' (' + (match.ochances - match.osaved) + '/' + match.ochances + ')';
                var bkconv = (match.ochances - match.osaved) + '/' + match.ochances;
                var statrow = [domratio, tpw, rpw, vace, r1pw, r2pw, bkconv];
                }
            else if (showstats == 'w') {
                var pointswon = parseInt(match.fwon) + parseInt(match.swon) + (match.opts - match.ofwon - match.oswon);
                var tpw = alignRound((pointswon/(parseInt(match.pts) + parseInt(match.opts))), 1, 1);
                var rpw = alignRound(1 - ((parseInt(match.ofwon) + parseInt(match.oswon))/match.opts), 1, 1);
                var vace = alignRound((match.oaces/match.opts), 1, 1);
                var r1pw = alignRound(1 - (match.ofwon/match.ofirsts), 1, 1);
                var r2pw = alignRound(1 - (match.oswon/(match.opts-match.ofirsts)), 1, 1);
                var bkconv = alignRound(1 - (match.osaved/match.ochances), 1, 1) + ' (' + (match.ochances - match.osaved) + '/' + match.ochances + ')';
                var tp = parseInt(match.pts) + parseInt(match.opts)
                var statrow = [tp, match.aces, match.dfs, match.pts, match.firsts, match.pts-match.firsts, match.oaces];
                }                
            }
        //$mtrow.append($('<td>').text(domratio).attr('align', 'right'));;
        for (var i = 0; i < statrow.length; i++) {
            $mtrow.append($('<td>').text(statrow[i]).attr('align', 'right'));
            }
        $mtrow.append($('<td>').text(showtime).attr('align', 'right'));
        $mtbody.append($mtrow);
        var matchnew = getWinLossTiebreak(match);
        for (u=0; u<stats.length; u++) {
            t = stats[u];
            if (matchnew[t] != '') {currentfilter[t] = currentfilter[t] + parseInt(matchnew[t]);}
            }
        }

    // back to match table
    if ($mtbody.children().length == 0) {
        if (!$("#spanCareerqq").hasClass('selected')) { // career is not selected
            //var $mftspan = $('<span>').text('show career').attr('font-style', 'italic');
            //$mftspan.attr('id', 'careerclick').attr('class', 'likelink');
            var mft = '<span id="careerclick" class="likelink">Show career</span>, c';
            }
        else {var mft = 'C';}
        pTable = '<p id="matches">&nbsp;<br/>&nbsp;<br/>Your filters returned no matches. ' + mft + 'hange a filter or two, or press the '
        pTable = pTable + '<span class="menureset2 likelink">reset button</span>.</p>'
        $("#matches").replaceWith(pTable);
        }
    else {
        $matchtable.append($mtbody).attr('id', 'matches').attr('class', 'tablesorter');
        $matchtable.attr('border', 0).attr('cellspacing', 0).attr('cellpadding', 4);
        $("#stats").html($matchtable);
        $("#matches").tablesorter( {sortList: slist,
                                    headers: {0: {sorter:'dates'},
                                    	      1: {sorter:false},	
                                              3: {sorter:'rounds'},
                                              4: {sorter:'ranks'},
                                              5: {sorter:'ranks'},
                                              6: {sorter:false}, // matchup
                                              7: {sorter:false}, // score -- more I can do with this?
                                              8: {sorter:false},
                                              9: {sorter:'descNum'},
                                              10: {sorter:'descNum'},
                                              11: {sorter:'ascNum'},
                                              12: {sorter:'descNum'},
                                              13: {sorter:'descNum'},
                                              14: {sorter:'descNum'},
                                              15: {sorter:false},
                                              16: {sorter:'descNum'}
                                              }
                                   });
        }
    var currentParams = getFilterParams();
    var opplist = [], notlist = [];
    if ($('#h2hdef').hasClass('selected') && $('#notdef').hasClass('selected')) {var opplist = [];} // no h2hs or NOTs
    else if (!$('#notdef').hasClass('selected')) {var notlist = $('.notselected').text().split(fourspaces + fourspaces).slice(1);}
    else {var opplist = $('.h2hselected').text().split(fourspaces + fourspaces).slice(1);}
    var statrow = makeSplitStatRow(currentfilter);
    if ($mtbody.children().length == 0) {}
    else if (currentParams == '' && (opplist.length == 0 && notlist.length == 0)) {}
    else {
        if (opplist.length == 0 && notlist.length == 0) {var rowid = '#f' + currentParams;}
        else if (opplist.length == 0) {
            var nots = $('.notselected').text().replace(/\u00a0/g, '');
            var rowid = '#f' + currentParams + '-' + nots;
            }
        else {
            var opps = $('.h2hselected').text().replace(/\u00a0/g, '');
            var rowid = '#f' + currentParams + '-' + opps;
            }
        if ($(rowid).length > 0) {$(rowid).remove();} // if same filter is already present, delete
        else if ($('.filtersplitrow').length == 5) {$('.filtersplitrow').last().remove();} // if 5 already, delete last

        var $filtrow = $('<tr>').attr('class', 'filtersplitrow')
        $filtrow.attr('id', rowid.slice(1));
        var ftitle = '';
        if (opplist.length == 0) {} // get label
        else {
            for (k=0; k<opplist.length; k++) {
                //var oppname = insertNameSpaces(opplist[k]);
                var ftitle = ftitle + 'Opponent: ' + opplist[k] + '; '; // need to parse this for initials? last name?
                }
            ftitle = ftitle.slice(0, -2); // delete final semi-colon and space
            }
        if (notlist.length == 0) {} // get label
        else {
            for (k=0; k<notlist.length; k++) {
                //var oppname = insertNameSpaces(opplist[k]);
                var ftitle = ftitle + 'Exclude: ' + notlist[k] + '; '; // need to parse this for initials? last name?
                }
            ftitle = ftitle.slice(0, -2); // delete final semi-colon and space
            }  
        ftitle = getFilterTitle(ftitle);      

        var $nameital = ($('<span>').css('font-style', 'italic').attr('class', 'filterlabel'));
        if (ftitle.length > 25) { // too long, replace end with ..., add title, etc.
            $nameital.attr('title', ftitle.replace(/; /g, '\n')).css('cursor', 'pointer').text(' ' + ftitle.slice(0,22) + '... ');
            }
        else {$nameital.text(' ' + ftitle + ' ');}
        
        var $closebutton = ($('<span>').text("[x]").attr('class', 'rowcloser likelink')) // add button to close
        //var $splitclick = $('<span>').text('(+)').attr('class', 'likelink splitclick');
        
        $filtrow.append($('<td>').append($closebutton).append($nameital)); //.append($splitclick));
        for (var i = 0; i < statrow.length; i++) {
            var $fcell = $('<td>').attr('align', 'right').text(statrow[i]);
            $filtrow.append($fcell);
            }
        $("#splitsbody").prepend($filtrow)

        $(".rowcloser").click(function () {// attach handler to .rowcloser
            $(this).parent().parent().remove();
            })
        }
        
    // add title above matches
    if (ftitle == "" || ftitle == undefined) {var ftitle = 'Last 52';}
    else {var tabtitle = 'Matches: '+ftitle;} //.replace(/; /g, ' > ');}
    var wlrec = '(' + statrow[0].slice(0,statrow[0].indexOf('(')-1) + ')';
    $("#tablelabel").html('<b>Matches '+wlrec+' > '+ftitle+'</b>');
        
    // how to count filters applied?
    if (currentParams == '' && (opplist.length == 0 && notlist.length == 0)) {}
    else if ($mtbody.children().length == 0) {} // no matches -- keep this or not?
    else {
        var $bmatches = $('<span>').text('Apply filters to another player: ');
        $bmatches.append($('<input>').attr('id', 'paramsearch'));
        $('#matches').after($bmatches);
        }
    $(".h2hclick").click(function () {
        opponent = $(this).parent().attr('class');
        var withspaces = insertNameSpaces(opponent);
        setPlayerFilter(withspaces, 1, 0);
        if ($("#h2hhead").hasClass("closed")) {
            $("#h2hhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".h2hchoice").toggle();
            }
        })
    $(".menureset2").click(function () {
        resetFilters();
        // close open menus?
        makeMatchTable({}, 1);
        });
    $("#careerclick").click(function () {
        if ($("#spanhead").hasClass("closed")) {
            $("#spanhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".spanchoice").toggle();
            }
        $(".spanchoice").removeClass("selected").removeClass('spanselected');
        $("#spanCareerqq").addClass('selected').addClass('spanselected');
        makeMatchTable({}, 0);
        })
    }
    
function renderDoubles(stdscores, showstats, hdrs, defSort) {
    // defSort: 1 = return to defaults; 0 = check if already sorted and keep that
    var currentfilter = $.extend(true, {}, totals);
    // decide now on table sorting
    var slist = [[0,1], [3,1]];
    if (defSort == 0) {slist = confirmSort(slist);}

    var $matchtable = $('<table>');
    var $mthead = $('<thead>');
    var $mtheaderrow = $('<tr>').attr('id', 'matchheader'); 
    var $mtfoot = $('<tfoot>');
    var $mtfooterrow = $('<tr>').attr('id', 'matchfooter').attr('background-color', '#FFF'); // color weirdness?  
    var $mtbody = $('<tbody>');
    if (showstats == "a") {
        var rightaligns = {4: '', 5: '', 8: '', 9: '', 10: '', 11: '', 12: '', 13: '', 14: '', 15: ''};
        }
    else {
        var rightaligns = {6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: '', 13: '', 14: '', 15: ''};
        }
    for (var s = 0; s < matchmx_dubs.length; s++) {   
        if (s == 0) {
            // header row
            var cells = [];
            for (var i = 0; i < hdrs.length; i++) {
                //var $mthcell = $('<th>');
                var $mthspan = $('<span>').text(hdrs[i]);
                if (hdrs[i] in titleTips) {$mthspan.attr('title', titleTips[hdrs[i]]);}
                var $mthcell = $('<th>').append($mthspan);
                if (i in rightaligns) {$mthcell.attr('align', 'right');}
                $mtheaderrow.append($mthcell);
                }
            $mthead.append($mtheaderrow);
            $matchtable.append($mthead);
            // footer row
            var fcells = [];
            for (var i = 0; i < hdrs.length; i++) {
                //var $mftcell = $('<tr>'); // check
                if (i == 1 && !$("#spanCareerqq").hasClass('selected')) { // && career is not selected
                    var $mftspan = $('<span>').text('Show Career').attr('font-style', 'italic');
                    $mftspan.attr('id', 'careerclick').attr('class', 'likelink');
                    }
                else {
                    var $mftspan = $('<span>').text('');
                    }
                var $mftcell = $('<td>').append($mftspan);
                $mtfooterrow.append($mftcell);
                }
            $mtfoot.append($mtfooterrow);
            $matchtable.append($mtfoot);
            }            
            
        // when adding a new column, esp. if just in some players' js files, add the header to 'matchhead' above
        // this fills in the missing cells
        var match = {}
        for (var x=0; x<matchhead_dubs.length; x++) {
            if (matchmx_dubs[s].length <= x) {match[matchhead_dubs[x]] = '';}
            else {match[matchhead_dubs[x]] = matchmx_dubs[s][x];}
            } 
            
        if (filterMatch(match, 'doubles') != 1) {continue;}

        var $mtrow = $('<tr>');        
        var showdate = showDate(match.date);
        var yyyy, mm, dd; // reformat date
        yyyy = match.date.slice(0, 4);
        mm = match.date.slice(4, 6);
        dd = match.date.slice(6);
        //if (typeof dob === 'undefined') {}
        //else {
        //    var dobStr = dob+'';
        //    var dobObj  = new Date(dobStr.slice(0,4), dobStr.slice(4,6), dobStr.slice(6));
        //    var tdObj  = new Date(yyyy, mm, dd);
        //    var days = parseInt((tdObj.getTime() - dobObj.getTime())/one_day);
        //    var years = parseInt(days/365);
        //    var plusdays = days % 365;
        //    if (plusdays < 10) {plusdays = '00'+plusdays;}
        //    else if (plusdays < 100) {plusdays = '0'+plusdays;}
        //    $datecell.attr('title', 'Age: '+years+'.'+plusdays);
        //    }
        if (yyyy >= 2085 && yyyy < 1916) {
            var wdate = yyyy+'-'+mm+'-'+dd;
            var wlink = 'https://tennisabstract.herokuapp.com/ATP/Rankings/'+wdate+'/';
            //$datecell.attr('href', wlink);  
            var $datecell = $('<td>').append($('<a>').text(showdate).attr('href', wlink));
            }          
        else {var $datecell = $('<td>').text(showdate).attr('class', 'tdate');}
        $mtrow.append($datecell);
        
        var showtourn = match.tourn;
        if (match.tourn.indexOf('Davis C') != -1) {
            $mtrow.append($('<td>').text(match.tourn));
            }
        else if (match.level == 'S' | match.level == 'E') {
            $mtrow.append($('<td>').text(match.tourn));
            }
        else if (match.tourn.slice(0,3) == 'ATP' && (yyyy == '2022' | yyyy == '2024' || yyyy == '2023')) {
            $mtrow.append($('<td>').text(match.tourn.slice(4)));
            }
        else if (match.tourn.slice(-10) == 'Challenger' && (yyyy == '2022' | yyyy == '2024' || yyyy == '2023')) {
            $mtrow.append($('<td>').text(match.tourn.slice(0,-11)+' CH'));
            }
        else {
            if (match.tourn.slice(-2) == ' Q') {
                var showtourn = match.tourn.slice(0, -2);
                var qtag = '&f=B8';
                }
            else {
                var showtourn = match.tourn;
                var qtag = '';}
            var tlink = 'https://www.tennisabstract.com/cgi-bin/tourney.cgi?t=' + yyyy + showtourn.replace(/ /g, '_').replace(/'/g, 'xx') + qtag;
            $mtrow.append($('<td>').append($('<a>').text(match.tourn).attr('href', tlink)));
            }
        $mtrow.append($('<td>').text(match.surf));
        $mtrow.append($('<td>').text(match.round));
        
        if (showstats == "a") {
            $mtrow.append($('<td>').text(match.rank + '/' + match.prank).attr('align', 'right'));
            $mtrow.append($('<td>').text(match.orank + '/' + match.o2rank).attr('align', 'right'));
            var partner_name = match.partner;
            var opp_name = match.opp;
            var opp2_name = match.opp2;
            }
        else {
            partner_name = match.partnerlast;
            opp_name = match.olast;
            opp2_name = match.o2last;
            }

        var $pentry = $('<span>'), $pname = $('<span>'), $oppentry = $('<span>'), $opplink = $('<span>'), $oppcc = $('<span>')  // player entry 
        var $partnerlink = $('<span>'), $opp2link = $('<span>'), $partnercc = $('<span>')
        if (match.seed != '') {$pentry.text('(' + match.seed + ')')}
        else if (match.entry != '') {$pentry.text('(' + match.entry + ')')}
        else {$pentry.text('');}
        
        $pname.text(lastname).css('font-weight', 'bold'); // player name

        var partnerlink = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + match.partner.replace(/ /g, '') 
        var $partnerlk = $('<a>').text(partner_name).attr('href', partnerlink);
        $partnerlink.append($partnerlk);
        $partnercc.text(' [' + match.pcountry + ']');
                
        if (match.oseed != '') {$oppentry.text('(' + match.oseed + ')')} // opp entry
        else if (match.oentry != '') {$oppentry.text('(' + match.oentry + ')')}
        else {$oppentry.text('');}
        
        var nlink = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + match.opp.replace(/ /g, '') // opp link
        var $olk = $('<a>').text(opp_name).attr('href', nlink);
        $opplink.append($olk);
        
        var n2link = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + match.opp2.replace(/ /g, '') 
        var $o2lk = $('<a>').text(opp2_name).attr('href', n2link);
        $opp2link.append($o2lk);
        
        if (match.ocountry == match.o2country) {
            $oppcc.text(' [' + match.ocountry + ']');
            }
        else {
            $oppcc.text(' [' + match.ocountry + '/' + match.o2country + ']'); 
            }
        var $onespace = $('<span>').text('\u00a0')
        var $onespace2 = $('<span>').text('\u00a0')
        var $slash = $('<span>').text('/')
        var $slash2 = $('<span>').text('/')
        if (match.score == '' && (yyyy == '2023' | yyyy == '2024')) {var $deflink = $('<span>').text('vs');}
        else {var $deflink = $('<span>').text('d.');}
        //if ($('#h2hdef').hasClass('selected')) {$deflink.attr('class', 'likelink h2hclick');}
        var $matchcell = $('<td>')  //.attr('class', match.opp.replace(/ /g, ''));
        if (match.wl == "W" || match.wl == 'U') {
            $matchcell.append($pentry).append($pname).append($slash).append($partnerlink).append($partnercc).append($onespace).append($deflink).append($onespace2).append($oppentry).append($opplink).append($slash2).append($opp2link).append($oppcc);
            }
        else {
            $matchcell.append($oppentry).append($opplink).append($slash2).append($opp2link).append($oppcc).append($onespace).append($deflink).append($onespace2).append($pentry).append($pname).append($slash).append($partnerlink).append($partnercc);
            }
        $mtrow.append($matchcell);
        if (match.score == '' && (yyyy == '2023' | yyyy == '2024')) {
            var $scorecell = $('<a>').text('Live Scores').attr('href', 'https://www.livescore.in/tennis/').attr('target', '_blank');
            }
        else {
            //$mtrow.append($('<td>').text(match.score));
            var $scorecell = $('<span>').text(match.score);
            }
        var $scorelinks = $('<td>').append($scorecell);
        $mtrow.append($scorelinks);

        if (match.score == 'W/O' || match.pts == '') {  // matches with no stats, leave blank
            var statrow = ['', '', '', '', '', '', ''], showtime = '', domratio = '';
            if (showstats == "a") {statrow = [''];}
            }
        else {
            var rpw = 1 - (parseInt(match.ofwon) + parseInt(match.oswon))/match.opts; // dominance ratio:
            var spl = 1 - ((parseInt(match.fwon) + parseInt(match.swon))/match.pts);
            var num = rpw/spl, dec = 2;
            var domratio = alignRound(rpw/spl, dec);
            var matchtime = match.time;
            if (matchtime == '') {var showtime = '';}
            else {
                var hours = parseInt(matchtime/60);
                var minutes = matchtime % 60;
                if (minutes < 10) {minutes = '0' + minutes;}
                var showtime = hours + ':' + minutes;
                }
            var hours = parseInt(matchtime/60);
            var minutes = matchtime % 60;
            if (minutes < 10) {minutes = '0' + minutes;}
            if (showstats == 'a') {
                var statrow = [domratio];
                }
            else if (showstats == 'o') {
                var acerate = alignRound((match.aces/match.pts), 1, 1);
                var dfrate = alignRound((match.dfs/match.pts), 1, 1);
                var firstin = alignRound((match.firsts/match.pts), 1, 1);
                var fwin = alignRound((match.fwon/match.firsts), 1, 1);
                var swin = alignRound((match.swon/(match.pts-match.firsts)), 1, 1);
                //var bksaved = alignRound((match.saved/match.chances), 1, 1) + ' (' + match.saved + '/' + match.chances + ')';
                var bksaved = match.saved + '/' + match.chances;
                var statrow = [domratio, acerate, dfrate, firstin, fwin, swin, bksaved];
                }
            else if (showstats == 'r') {
                var pointswon = parseInt(match.fwon) + parseInt(match.swon) + (match.opts - match.ofwon - match.oswon);
                var tpw = alignRound((pointswon/(parseInt(match.pts) + parseInt(match.opts))), 1, 1);
                var rpw = alignRound(1 - ((parseInt(match.ofwon) + parseInt(match.oswon))/match.opts), 1, 1);
                var vace = alignRound((match.oaces/match.opts), 1, 1);
                var r1pw = alignRound(1 - (match.ofwon/match.ofirsts), 1, 1);
                var r2pw = alignRound(1 - (match.oswon/(match.opts-match.ofirsts)), 1, 1);
                //var bkconv = alignRound(1 - (match.osaved/match.ochances), 1, 1) + ' (' + (match.ochances - match.osaved) + '/' + match.ochances + ')';
                var bkconv = (match.ochances - match.osaved) + '/' + match.ochances;
                var statrow = [domratio, tpw, rpw, vace, r1pw, r2pw, bkconv];
                }
            else if (showstats == 'w') {
                var pointswon = parseInt(match.fwon) + parseInt(match.swon) + (match.opts - match.ofwon - match.oswon);
                var tpw = alignRound((pointswon/(parseInt(match.pts) + parseInt(match.opts))), 1, 1);
                var rpw = alignRound(1 - ((parseInt(match.ofwon) + parseInt(match.oswon))/match.opts), 1, 1);
                var vace = alignRound((match.oaces/match.opts), 1, 1);
                var r1pw = alignRound(1 - (match.ofwon/match.ofirsts), 1, 1);
                var r2pw = alignRound(1 - (match.oswon/(match.opts-match.ofirsts)), 1, 1);
                var bkconv = alignRound(1 - (match.osaved/match.ochances), 1, 1) + ' (' + (match.ochances - match.osaved) + '/' + match.ochances + ')';
                var tp = parseInt(match.pts) + parseInt(match.opts)
                var statrow = [tp, match.aces, match.dfs, match.pts, match.firsts, match.pts-match.firsts, match.oaces];
                }                
            }
        //$mtrow.append($('<td>').text(domratio).attr('align', 'right'));;
        for (var i = 0; i < statrow.length; i++) {
            $mtrow.append($('<td>').text(statrow[i]).attr('align', 'right'));
            }
        $mtrow.append($('<td>').text(showtime).attr('align', 'right'));
        $mtbody.append($mtrow);
        var matchnew = getWinLossTiebreak(match);
        for (u=0; u<stats.length; u++) {
            t = stats[u];
            if (matchnew[t] != '') {currentfilter[t] = currentfilter[t] + parseInt(matchnew[t]);}
            }
        }

    // back to match table
    if ($mtbody.children().length == 0) {
        if (!$("#spanCareerqq").hasClass('selected')) { // career is not selected
            //var $mftspan = $('<span>').text('show career').attr('font-style', 'italic');
            //$mftspan.attr('id', 'careerclick').attr('class', 'likelink');
            var mft = '<span id="careerclick" class="likelink">Show career</span>, c';
            }
        else {var mft = 'C';}
        pTable = '<p id="matches">&nbsp;<br/>&nbsp;<br/>Your filters returned no matches. ' + mft + 'hange a filter or two, or press the '
        pTable = pTable + '<span class="menureset2 likelink">reset button</span>.</p>'
        $("#matches").replaceWith(pTable);
        }
    else {
        $matchtable.append($mtbody).attr('id', 'matches').attr('class', 'tablesorter');
        $matchtable.attr('border', 0).attr('cellspacing', 0).attr('cellpadding', 4);
        $("#stats").html($matchtable);
        if (showstats == "a") {
            $("#matches").tablesorter( {sortList: slist,
                                    headers: {0: {sorter:'dates'},
                                    	      1: {sorter:false},	
                                              3: {sorter:'rounds'},
                                              4: {sorter:'ranks'},
                                              5: {sorter:'ranks'},
                                              6: {sorter:false}, // matchup
                                              7: {sorter:false}, // score -- more I can do with this?
                                              8: {sorter:'descNum'},
                                              9: {sorter:'descNum'},
                                              }
                                   });
            }
        else {
            $("#matches").tablesorter( {sortList: slist,
                                    headers: {0: {sorter:'dates'},
                                    	      1: {sorter:false},	
                                              3: {sorter:'rounds'},
                                              //4: {sorter:'ranks'},
                                              //5: {sorter:'ranks'},
                                              4: {sorter:false}, // matchup
                                              5: {sorter:false}, // score -- more I can do with this?
                                              6: {sorter:'descNum'},
                                              7: {sorter:'descNum'},
                                              8: {sorter:'ascNum'},
                                              9: {sorter:'descNum'},
                                              10: {sorter:'descNum'},
                                              11: {sorter:'descNum'},
                                              12: {sorter:false},
                                              13: {sorter:'descNum'}
                                              }
                                   });
            }
        }
    var currentParams = getFilterParams();
    var opplist = [], oppteamlist = [], partnerlist = [];
    if (!$('#oppdef').hasClass('selected')) {var opplist = $('.oppselected').text().split(fourspaces + fourspaces).slice(1);}
    if (!$('#oppteamdef').hasClass('selected')) {var oppteamlist = $('.oppteamselected').text().split(fourspaces + fourspaces).slice(1);}
    if (!$('#partnerdef').hasClass('selected')) {var partnerlist = $('.partnerselected').text().split(fourspaces + fourspaces).slice(1);}
    var statrow = makeSplitStatRow(currentfilter);
    if ($mtbody.children().length == 0) {}
    else if (currentParams == '' && (opplist.length == 0 && oppteamlist.length == 0 && partnerlist.length == 0)) {}
    else {
        var rowid = '#f' + currentParams;
        //if (opplist.length == 0 && oppteamlist.length == 0 && partnerlist.length == 0) {var rowid = '#f' + currentParams;}
        if (opplist.length > 0) {
            var nots = $('.oppselected').text().replace(/\u00a0/g, '');
            rowid = rowid + '-' + nots;
            }
        if (oppteamlist.length > 0) {
            var oppteams = $('.oppteamselected').text().replace(/\u00a0/g, '');
            rowid = rowid + '-' + oppteams;
            }
        if (partnerlist.length > 0) {
            var partners = $('.partnerselected').text().replace(/\u00a0/g, '');
            rowid = rowid + '-' + partners;
            }
        if ($(rowid).length > 0) {$(rowid).remove();} // if same filter is already present, delete
        else if ($('.filtersplitrow').length == 5) {$('.filtersplitrow').last().remove();} // if 5 already, delete last

        var $filtrow = $('<tr>').attr('class', 'filtersplitrow')
        $filtrow.attr('id', rowid.slice(1));
        var ftitle = '';
        if (partnerlist.length == 0) {} // get label
        else {
            for (k=0; k<partnerlist.length; k++) {
                //var oppname = insertNameSpaces(opplist[k]);
                var ftitle = ftitle + 'Partner: ' + partnerlist[k] + '; '; // need to parse this for initials? last name?
                }
            ftitle = ftitle.slice(0, -2); // delete final semi-colon and space
            }
        if (opplist.length == 0) {} // get label
        else {
            for (k=0; k<opplist.length; k++) {
                //var oppname = insertNameSpaces(opplist[k]);
                var ftitle = ftitle + 'Opponent: ' + opplist[k] + '; '; // need to parse this for initials? last name?
                }
            ftitle = ftitle.slice(0, -2); // delete final semi-colon and space
            }
        if (oppteamlist.length == 0) {} // get label
        else {
            var mult_unit = unitePartners(oppteamlist);
            oppteamlist = mult_unit[1];
            for (k=0; k<oppteamlist.length; k++) {
                //var oppname = insertNameSpaces(opplist[k]);
                var ftitle = ftitle + 'Opp Team: ' + oppteamlist[k] + '; '; // need to parse this for initials? last name?
                }
            ftitle = ftitle.slice(0, -2); // delete final semi-colon and space
            }  
        ftitle = getFilterTitle(ftitle);      

        var $nameital = ($('<span>').css('font-style', 'italic').attr('class', 'filterlabel'));
        if (ftitle.length > 25) { // too long, replace end with ..., add title, etc.
            $nameital.attr('title', ftitle.replace(/; /g, '\n')).css('cursor', 'pointer').text(' ' + ftitle.slice(0,22) + '... ');
            }
        else {$nameital.text(' ' + ftitle + ' ');}
        
        var $closebutton = ($('<span>').text("[x]").attr('class', 'rowcloser likelink')) // add button to close
        //var $splitclick = $('<span>').text('(+)').attr('class', 'likelink splitclick');
        
        $filtrow.append($('<td>').append($closebutton).append($nameital)); //.append($splitclick));
        for (var i = 0; i < statrow.length; i++) {
            var $fcell = $('<td>').attr('align', 'right').text(statrow[i]);
            $filtrow.append($fcell);
            }
        $("#splitsbody").prepend($filtrow)

        $(".rowcloser").click(function () {// attach handler to .rowcloser
            $(this).parent().parent().remove();
            })
        }
        
    // add title above matches
    if (ftitle == "" || ftitle == undefined) {var ftitle = 'Last 52';}
    else {var tabtitle = 'Matches: '+ftitle;} //.replace(/; /g, ' > ');}
    var wlrec = '(' + statrow[0].slice(0,statrow[0].indexOf('(')-1) + ')';
    $("#tablelabel").html('<b>Matches '+wlrec+' > '+ftitle+'</b>');
        
    // how to count filters applied?
    if (currentParams == '' && (opplist.length == 0 && oppteamlist.length == 0 && partnerlist.length == 0)) {}
    else if ($mtbody.children().length == 0) {} // no matches -- keep this or not?
    else {
        var $bmatches = $('<span>').text('Apply filters to another player: ');
        $bmatches.append($('<input>').attr('id', 'paramsearch'));
        $('#matches').after($bmatches);
        }
    $(".h2hclick").click(function () {
        opponent = $(this).parent().attr('class');
        var withspaces = insertNameSpaces(opponent);
        setPlayerFilter(withspaces, 1, 0);
        if ($("#h2hhead").hasClass("closed")) {
            $("#h2hhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".h2hchoice").toggle();
            }
        })
    $(".menureset2").click(function () {
        resetFilters();
        // close open menus?
        makeMatchTable({}, 1);
        });
    $("#careerclick").click(function () {
        if ($("#spanhead").hasClass("closed")) {
            $("#spanhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".spanchoice").toggle();
            }
        $(".spanchoice").removeClass("selected").removeClass('spanselected');
        $("#spanCareerqq").addClass('selected').addClass('spanselected');
        makeMatchTable({}, 0);
        })
    }
    
function renderHeadToHeads(defSort) {
   
    var hdrs = hdrsHead;
    var slist = [[0,0]]; // for now, 2nd column, descending
    if (defSort == 0) {slist = confirmSort(slist);}
    
    var hDict = {}

    var $matchtable = $('<table>');
    var $mthead = $('<thead>');
    var $mtheaderrow = $('<tr>').attr('id', 'matchheader'); 
    var $mtfoot = $('<tfoot>');
    var $mtfooterrow = $('<tr>').attr('id', 'matchfooter').attr('background-color', '#FFF'); // color weirdness?  
    var $mtbody = $('<tbody>');
    var rightaligns = {0: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 
                       11: '', 12: '', 13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: ''};
    for (var s = 0; s < matchmx.length; s++) {   
        if (s == 0) {
            // header row
            var cells = [];
            for (var i = 0; i < hdrs.length; i++) {
                var $mthspan = $('<span>').text(hdrs[i]);
                if (hdrs[i] in titleTips) {$mthspan.attr('title', titleTips[hdrs[i]]);}
                var $mthcell = $('<th>').append($mthspan);
                if (i in rightaligns) {$mthcell.attr('align', 'right');}
                $mtheaderrow.append($mthcell);
                }
            $mthead.append($mtheaderrow);
            $matchtable.append($mthead);
            // footer row -- do i want to keep this for head2head view?
            var fcells = [];
            for (var i = 0; i < hdrs.length; i++) {
                if (i == 1 && !$("#spanCareerqq").hasClass('selected')) { // && career is not selected
                    var $mftspan = $('<span>').text('Show Career').attr('font-style', 'italic');
                    $mftspan.attr('id', 'careerclick').attr('class', 'likelink');
                    }
                else {
                    var $mftspan = $('<span>').text('');
                    }
                var $mftcell = $('<td>').append($mftspan);
                $mtfooterrow.append($mftcell);
                }
            $mtfoot.append($mtfooterrow);
            $matchtable.append($mtfoot);
            }            
            
        var match = {} // create dict for each match
        for (var x=0; x<matchhead.length; x++) {
            if (matchmx[s].length <= x) {match[matchhead[x]] = '';}
            else {match[matchhead[x]] = matchmx[s][x];}
            }
            
        if (match.score == "" || match.score.slice(0,1) == 'D') {continue;}
        if (match.score.slice(0,1) == 'W' || match.score.slice(0,1) == 'R') {continue;}
        if (filterMatch(match, 'results') != 1) {continue;}
            
        match = getWinLossTiebreak(match);
                         
        if (!(match.opp in hDict)) {
            hDict[match.opp] = {'m': 0, 'w': 0, 'l': 0, 'occ': match.ocountry, 'ms': 0, 'dates': {}};
            for (u=0; u<stats.length; u++) {
                hDict[match.opp][stats[u]] = 0;
                }
            }
        hDict[match.opp]['m'] += 1
        if (match.wl == 'W') {hDict[match.opp]['w'] += 1;}
        else {hDict[match.opp]['l'] += 1;}
         
        //hDict[match.opp]['tiebreaks'] += match.tiebreaks
        //hDict[match.opp]['tbwon'] += match.tbwon
        
        if (match.oswon != "") {hDict[match.opp]['ms'] += 1;}
        
        for (u=0; u<stats.length; u++) {
            t = stats[u];
            if (match[t] != '') {hDict[match.opp][t] = hDict[match.opp][t] + parseInt(match[t]);}
            }        
        
        var wlfull = {'W': 'WIN', 'L': 'LOSS'};
        var details = wlfull[match.wl] + ': ' + match.matchid.slice(0,4) + ' ' + match.tourn + ' ' + match.round + ' (' + match.surf + '), ' + match.score;
        hDict[match.opp]['dates'][match.date] = details;
        }

    // check against match minimum (abbreviated version of genfilter())
    var multselect = $('.minimumselected').text().split(fourspaces + fourspaces).slice(1);
    var matchmin = multselect[0];
    if (matchmin == 'All') {var mm = 1;}
    else {var mm = parseInt(matchmin);}
        
    for (player in hDict) {
        if (!hDict.hasOwnProperty(player)) {continue;}
	if (hDict[player].m < mm) {continue;}
        
        var $mtrow = $('<tr>');
        
        var $deflink = $('<span>').text(hDict[player].m);
        $deflink.attr('class', 'likelink h2hclick');
        var $matchcell = $('<td>').append($deflink).attr('class', player.replace(/ /g, '')).attr('align', 'right');
        $mtrow.append($matchcell);

	$oppcc = $('<span>')
	$oppcc.text(' [' + hDict[player].occ + ']');
        var nlink = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + player.replace(/ /g, '') // opp link
        var $olk = $('<a>').text(player).attr('href', nlink);
        var $oppcell = $('<td>').append($olk).append($oppcc);     
        $mtrow.append($oppcell);
        
        // get list of h2h match dates
        var mdates = [];
        for (md in hDict[player]['dates']) {
            if (hDict[player]['dates'].hasOwnProperty(md)) {mdates.push(md);}
            }
	mdates.sort()
	
	$firstdate = $('<td>').text(showDate(mdates[0])).attr('align', 'right');
	$firstdate.attr('title', hDict[player]['dates'][mdates[0]]);
	$lastdate = $('<td>').text(showDate(mdates[mdates.length - 1])).attr('align', 'right');
	$lastdate.attr('title', hDict[player]['dates'][mdates[mdates.length - 1]]);     
        
        $mtrow.append($('<td>').text(hDict[player].w).attr('align', 'right'));
        $mtrow.append($('<td>').text(hDict[player].l).attr('align', 'right'));
        var wlperc = alignRound(hDict[player].w/hDict[player].m, 1, 1);
        $mtrow.append($('<td>').text(wlperc).attr('align', 'right'));
        
        $mtrow.append($('<td>').text(hDict[player].tiebreaks).attr('align', 'right'));
        $mtrow.append($('<td>').text(hDict[player].tbwon).attr('align', 'right'));
        $mtrow.append($('<td>').text(hDict[player].tiebreaks - hDict[player].tbwon).attr('align', 'right'));
        var tbperc = alignRound(hDict[player].tbwon/hDict[player].tiebreaks, 1, 1);
        $mtrow.append($('<td>').text(tbperc).attr('align', 'right'));
        
        $mtrow.append($firstdate);
        $mtrow.append($lastdate);
        
        $mtrow.append($('<td>').text(hDict[player].ms).attr('align', 'right')); // stat sample
        
        var rpw = 1 - (parseInt(hDict[player].ofwon) + parseInt(hDict[player].oswon))/hDict[player].opts; // dominance ratio:
        var spw = ((parseInt(hDict[player].fwon) + parseInt(hDict[player].swon))/hDict[player].pts);
        var spl = 1 - spw;
        var num = rpw/spl, dec = 2;
        var domratio = alignRound(rpw/spl, dec);

        var acerate = alignRound((hDict[player].aces/hDict[player].pts), 1, 1);
        var dfrate = alignRound((hDict[player].dfs/hDict[player].pts), 1, 1);
        var firstin = alignRound((hDict[player].firsts/hDict[player].pts), 1, 1);
        var fwin = alignRound((hDict[player].fwon/hDict[player].firsts), 1, 1);
        var swin = alignRound((hDict[player].swon/(hDict[player].pts-hDict[player].firsts)), 1, 1);
        var bksavedRate = alignRound((hDict[player].saved/hDict[player].chances), 1, 1)
        var bksaved = hDict[player].saved + '/' + hDict[player].chances;

        var pointswon = parseInt(hDict[player].fwon) + parseInt(hDict[player].swon) + (hDict[player].opts - hDict[player].ofwon - hDict[player].oswon);
        var tpw = alignRound((pointswon/(parseInt(hDict[player].pts) + parseInt(hDict[player].opts))), 1, 1);
        var rpw = alignRound(1 - ((parseInt(hDict[player].ofwon) + parseInt(hDict[player].oswon))/hDict[player].opts), 1, 1);
        var vace = alignRound((hDict[player].oaces/hDict[player].opts), 1, 1);
        var r1pw = alignRound(1 - (hDict[player].ofwon/hDict[player].ofirsts), 1, 1);
        var r2pw = alignRound(1 - (hDict[player].oswon/(hDict[player].opts-hDict[player].ofirsts)), 1, 1);
        var bkconvRate = alignRound(1 - (hDict[player].osaved/hDict[player].ochances), 1, 1)
        var bkconv = (hDict[player].ochances - hDict[player].osaved) + '/' + hDict[player].ochances;
        
        var statrow = [domratio, acerate, dfrate, firstin, fwin, swin, alignRound(spw, 1, 1), rpw]; 
        for (var i = 0; i < statrow.length; i++) {
            $mtrow.append($('<td>').text(statrow[i]).attr('align', 'right'));
            }        
	$bpsv = $('<td>').text(bksavedRate).attr('align', 'right');
	$bpsv.attr('title', bksaved);
	$bpcv = $('<td>').text(bkconvRate).attr('align', 'right');
	$bpcv.attr('title', bkconv);
        
        $mtrow.append($bpsv);
        $mtrow.append($bpcv);        
               
        $mtbody.append($mtrow);
        }

    // back to match table
    if ($mtbody.children().length == 0) {
        if (!$("#spanCareerqq").hasClass('selected')) { // career is not selected
            //var $mftspan = $('<span>').text('show career').attr('font-style', 'italic');
            //$mftspan.attr('id', 'careerclick').attr('class', 'likelink');
            var mft = '<span id="careerclick" class="likelink">Show career</span>, c';
            }
        else {var mft = 'C';}
        pTable = '<p id="matches">&nbsp;<br/>&nbsp;<br/>Your filters returned no matches. ' + mft + 'hange a filter or two, or press the '
        pTable = pTable + '<span class="menureset2 likelink">reset button</span>.</p>'
        $("#matches").replaceWith(pTable);
        }
    else {
        $matchtable.append($mtbody).attr('id', 'matches').attr('class', 'tablesorter');
        $matchtable.attr('border', 0).attr('cellspacing', 0).attr('cellpadding', 4);
        $("#stats").html($matchtable);
        $("#matches").tablesorter( {sortList: slist,
                                    headers: {1: {sorter:false}, // player
                                              9: {sorter:'dates'},
                                              10: {sorter:'datesDesc'},
                                    	      0: {sorter:'descNum'},	
                                              2: {sorter:'descNum'},
                                              3: {sorter:'descNum'},
                                              4: {sorter:'descNum'},
                                              5: {sorter:'descNum'}, 
                                              6: {sorter:'descNum'},
                                              7: {sorter:'descNum'},
                                              8: {sorter:'descNum'},
                                              11: {sorter:'descNum'},
                                              12: {sorter:'descNum'},
                                              13: {sorter:'descNum'},
                                              14: {sorter:'ascNum'},
                                              15: {sorter:'descNum'},
                                              16: {sorter:'descNum'},
                                              17: {sorter:'descNum'},
                                              18: {sorter:'descNum'},
                                              19: {sorter:'descNum'},
                                              20: {sorter:'descNum'},
                                              21: {sorter:'descNum'}                                             
                                              }
                                   });
        }
    
    var ftitle = getFilterTitle("");
    var pgtitle = '<b>Head-to-Head Records ('+ftitle+')</b>'; // <br/>Just testing blah blah blah.';
    $("#tablelabel").html(pgtitle);
    
    $(".h2hclick").click(function () {
        // switch back to results tab
        $(".tabview").addClass("tablink");
        $("#tabResults").removeClass("tablink");
        // unlike 'tabclick', don't reset any filters
        opponent = $(this).parent().attr('class');
        var withspaces = insertNameSpaces(opponent);
        setPlayerFilter(withspaces, 1, 1); // this includes makeMatchTable
        if ($("#h2hhead").hasClass("closed")) {
            $("#h2hhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".h2hchoice").toggle();
            }
        $(".header").show();
        $("#minimumhead").hide();            
        })
    }
    
function renderEvents(defSort) {
   
    var hdrs = hdrsEvents;
    var slist = [[0,0]]; // for now, 1st column; default is descending
    if (defSort == 0) {slist = confirmSort(slist);}
    
    var hDict = {}

    var $matchtable = $('<table>');
    var $mthead = $('<thead>');
    var $mtheaderrow = $('<tr>').attr('id', 'matchheader'); 
    var $mtfoot = $('<tfoot>');
    var $mtfooterrow = $('<tr>').attr('id', 'matchfooter').attr('background-color', '#FFF'); // color weirdness?  
    var $mtbody = $('<tbody>');
    var rightaligns = {0: '', 3: '', 4: '', 5: '', 6: '', 7: '', 8: '', 9: '', 10: '', 
                       11: '', 12: '', 13: '', 14: '', 15: '', 16: '', 17: '', 18: '', 19: '', 20: '', 21: '', 22: '', 23: '', 24: ''};
    for (var s = 0; s < matchmx.length; s++) {   
        if (s == 0) {
            // header row
            var cells = [];
            for (var i = 0; i < hdrs.length; i++) {
                var $mthspan = $('<span>').text(hdrs[i]);
                if (hdrs[i] in titleTips) {$mthspan.attr('title', titleTips[hdrs[i]]);}
                var $mthcell = $('<th>').append($mthspan);
                if (i in rightaligns) {$mthcell.attr('align', 'right');}
                $mtheaderrow.append($mthcell);
                }
            $mthead.append($mtheaderrow);
            $matchtable.append($mthead);
            // footer row -- do i want to keep this for head2head view?
            var fcells = [];
            for (var i = 0; i < hdrs.length; i++) {
                if (i == 1 && !$("#spanCareerqq").hasClass('selected')) { // && career is not selected
                    var $mftspan = $('<span>').text('Show Career').attr('font-style', 'italic');
                    $mftspan.attr('id', 'careerclick').attr('class', 'likelink');
                    }
                else {
                    var $mftspan = $('<span>').text('');
                    }
                var $mftcell = $('<td>').append($mftspan);
                $mtfooterrow.append($mftcell);
                }
            $mtfoot.append($mtfooterrow);
            $matchtable.append($mtfoot);
            }            
            
        var match = {} // create dict for each match
        for (var x=0; x<matchhead.length; x++) {
            if (matchmx[s].length <= x) {match[matchhead[x]] = '';}
            else {match[matchhead[x]] = matchmx[s][x];}
            }
        
        var tourlevel = {'A': '', 'M': '', 'G': ''};
        if (!(match.level in tourlevel)) {continue;}
        if (match.tourn.slice(0,4) == 'ATP ') {continue;}
        
        if (match.wl == 'W' && match.round != 'F') {  
            if (match.score == "" || match.score.slice(0,1) == 'D') {continue;}
            if (match.score.slice(0,1) == 'W' || match.score.slice(0,1) == 'R') {continue;}
            }
        
        if (filterMatch(match, 'results') != 1) {continue;}
            
        match = getWinLossTiebreak(match);
        
        if (match.tourn.indexOf('Olympics') > -1) {match.tourn = 'Olympics';}
                         
        if (!(match.tourn in hDict)) {
            hDict[match.tourn] = {'m': 0, 'w': 0, 'l': 0, 'occ': match.ocountry, 'ms': 0, 'dates': {}, 'surfs': {}, 'matches': {}};
            for (u=0; u<stats.length; u++) {
                hDict[match.tourn][stats[u]] = 0;
                }
            }
        hDict[match.tourn]['m'] += 1
        if (match.wl == 'W') {hDict[match.tourn]['w'] += 1;}
        else {hDict[match.tourn]['l'] += 1;}
        
        if (match.oswon != "") {hDict[match.tourn]['ms'] += 1;}
        
        for (u=0; u<stats.length; u++) {
            t = stats[u];
            if (match[t] != '') {hDict[match.tourn][t] = hDict[match.tourn][t] + parseInt(match[t]);}
            }        

        var myear;
        if (match.matchid.length > 0) {myear = match.matchid.slice(0,4);}
        else if (parseInt(match.date.slice(4,8)) > 1215) {myear = parseInt(match.date.slice(0,4)) + 1;}
        else {myear = match.date.slice(0,4);}
        
        hDict[match.tourn]['surfs'][myear] = match.surf;
        
        if (match.round == 'F' && match.wl == 'W') {
            hDict[match.tourn]['dates'][myear] = 'W';
            hDict[match.tourn]['matches'][myear] = 'WIN: '+match.round+' vs '+match.opp+', '+match.score;
            }
        else if (!(myear in hDict[match.tourn]['dates']) && match.wl == 'L') {
            hDict[match.tourn]['dates'][myear] = match.round;
            hDict[match.tourn]['matches'][myear] = 'LOSS: '+match.round+' vs '+match.opp+', '+match.score;
            }
        // make sure to get some date in there in case only wins in an incomplete tournament
        else if (!(myear in hDict[match.tourn]['dates']) && match.wl == 'W') {
            hDict[match.tourn]['dates'][myear] = "";
            hDict[match.tourn]['matches'][myear] = "";
            }
        // covers for previous line -- if year already in but only wins, get the loss
        else if ((myear in hDict[match.tourn]['dates'] && hDict[match.tourn]['dates'][myear] == "") && match.wl == 'L') {
            hDict[match.tourn]['dates'][myear] = match.round;
            hDict[match.tourn]['matches'][myear] = 'LOSS: '+match.round+' vs '+match.opp+', '+match.score;
            }
        }

    // check against match minimum (abbreviated version of genfilter())
    var multselect = $('.minimumselected').text().split(fourspaces + fourspaces).slice(1);
    var matchmin = multselect[0];
    if (matchmin == 'All') {var mm = 1;}
    else {var mm = parseInt(matchmin);}
    
    // check against match minimum (abbreviated version of genfilter())
    var multselectYears = $('.minyearsselected').text().split(fourspaces + fourspaces).slice(1);
    var yearsmin = multselectYears[0];
    if (yearsmin == 'All') {var mmy = 1;}
    else {var mmy = parseInt(yearsmin);}    
        
    for (event in hDict) {
        if (!hDict.hasOwnProperty(event)) {continue;}
	if (hDict[event].m < mm) {continue;}
        
        var $mtrow = $('<tr>');
        
        // get list of years
        var mdates = [];
        var allResults = {}
        for (md in hDict[event]['dates']) {
            if (hDict[event]['dates'].hasOwnProperty(md)) {
                mdates.push(md);
                allResults[hDict[event]['dates'][md]] = '';
                }
            }
            
        if (mdates.length < mmy) {continue;} // check against year minimum from filter
            
	mdates.sort();
	var lastyear = mdates[mdates.length-1];
	
	$mtrow.append($('<td>').text(mdates.length).attr('align', 'right'));     

	//$oppcc = $('<span>') // link to same event results?
	//$oppcc.text(' [' + hDict[player].occ + ']');
        //var nlink = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + player.replace(/ /g, '') // opp link
        //var $olk = $('<a>').text(player).attr('href', nlink);
        var $eventname = $('<span>').text(event).attr('class', 'likelink eventclick');
        var $oppcell = $('<td>').append($eventname).attr('class', event.replace(/ /g, '_'));     
        $mtrow.append($oppcell);
        
        $mtrow.append($('<td>').text(hDict[event]['surfs'][lastyear])); 
        
        var $deflink = $('<span>').text(hDict[event].m); // add link to event results? would need event version of h2hclick
        //$deflink.attr('class', 'likelink h2hclick');
        var $matchcell = $('<td>').append($deflink).attr('align', 'right') //.attr('class', player.replace(/ /g, ''))
        $mtrow.append($matchcell);        
	
	$firstdate = $('<td>').text(mdates[0]).attr('align', 'right');
	$firstdate.attr('title', hDict[event]['matches'][mdates[0]]);
	$lastdate = $('<td>').text(lastyear).attr('align', 'right');
	$lastdate.attr('title', hDict[event]['matches'][lastyear]);  
        
        $mtrow.append($('<td>').text(hDict[event].w).attr('align', 'right'));
        $mtrow.append($('<td>').text(hDict[event].l).attr('align', 'right'));
        var wlperc = alignRound(hDict[event].w/hDict[event].m, 1, 1);
        $mtrow.append($('<td>').text(wlperc).attr('align', 'right'));
        
        $mtrow.append($('<td>').text(hDict[event].tiebreaks).attr('align', 'right'));
        $mtrow.append($('<td>').text(hDict[event].tbwon).attr('align', 'right'));
        $mtrow.append($('<td>').text(hDict[event].tiebreaks - hDict[event].tbwon).attr('align', 'right'));
        var tbperc = alignRound(hDict[event].tbwon/hDict[event].tiebreaks, 1, 1);
        $mtrow.append($('<td>').text(tbperc).attr('align', 'right'));
        
        $mtrow.append($firstdate);
        $mtrow.append($lastdate);
        
        // get best result, with title for years achieved
        var rdpref = ['W', 'F', 'SF', 'QF', 'RR', 'R16', 'R32', 'R64', 'R128'];
        var bestResult = '';
        for (var i = 0; i < rdpref.length; i++) {
            if (rdpref[i] in allResults) {
                bestResult = rdpref[i];
                break;
                }
            }
        
        var bestYears = [];
        for (md in hDict[event]['dates']) {
            if (hDict[event]['dates'].hasOwnProperty(md)) {
                if (hDict[event]['dates'][md] == bestResult) {bestYears.push(md);}
                }
            } 
        bestYears.sort();    
        var bestText =  bestYears.join(',');
        
	$bestres = $('<td>').text(bestResult).attr('align', 'right');
	$bestres.attr('title', bestText);        
        $mtrow.append($bestres);       
        
        $mtrow.append($('<td>').text(hDict[event].ms).attr('align', 'right')); // stat sample
        
        var rpw = 1 - (parseInt(hDict[event].ofwon) + parseInt(hDict[event].oswon))/hDict[event].opts; // dominance ratio:
        var spw = ((parseInt(hDict[event].fwon) + parseInt(hDict[event].swon))/hDict[event].pts);
        var spl = 1 - spw;
        var num = rpw/spl, dec = 2;
        var domratio = alignRound(rpw/spl, dec);

        var acerate = alignRound((hDict[event].aces/hDict[event].pts), 1, 1);
        var dfrate = alignRound((hDict[event].dfs/hDict[event].pts), 1, 1);
        var firstin = alignRound((hDict[event].firsts/hDict[event].pts), 1, 1);
        var fwin = alignRound((hDict[event].fwon/hDict[event].firsts), 1, 1);
        var swin = alignRound((hDict[event].swon/(hDict[event].pts-hDict[event].firsts)), 1, 1);
        var bksavedRate = alignRound((hDict[event].saved/hDict[event].chances), 1, 1)
        var bksaved = hDict[event].saved + '/' + hDict[event].chances;

        var pointswon = parseInt(hDict[event].fwon) + parseInt(hDict[event].swon) + (hDict[event].opts - hDict[event].ofwon - hDict[event].oswon);
        var tpw = alignRound((pointswon/(parseInt(hDict[event].pts) + parseInt(hDict[event].opts))), 1, 1);
        var rpw = alignRound(1 - ((parseInt(hDict[event].ofwon) + parseInt(hDict[event].oswon))/hDict[event].opts), 1, 1);
        var vace = alignRound((hDict[event].oaces/hDict[event].opts), 1, 1);
        var r1pw = alignRound(1 - (hDict[event].ofwon/hDict[event].ofirsts), 1, 1);
        var r2pw = alignRound(1 - (hDict[event].oswon/(hDict[event].opts-hDict[event].ofirsts)), 1, 1);
        var bkconvRate = alignRound(1 - (hDict[event].osaved/hDict[event].ochances), 1, 1)
        var bkconv = (hDict[event].ochances - hDict[event].osaved) + '/' + hDict[event].ochances;
        
        var statrow = [domratio, acerate, dfrate, firstin, fwin, swin, alignRound(spw, 1, 1), rpw]; 
        for (var i = 0; i < statrow.length; i++) {
            $mtrow.append($('<td>').text(statrow[i]).attr('align', 'right'));
            }        
	$bpsv = $('<td>').text(bksavedRate).attr('align', 'right');
	$bpsv.attr('title', bksaved);
	$bpcv = $('<td>').text(bkconvRate).attr('align', 'right');
	$bpcv.attr('title', bkconv);
        
        $mtrow.append($bpsv);
        $mtrow.append($bpcv);        
               
        $mtbody.append($mtrow);
        }

    // back to match table
    if ($mtbody.children().length == 0) {
        if (!$("#spanCareerqq").hasClass('selected')) { // career is not selected
            //var $mftspan = $('<span>').text('show career').attr('font-style', 'italic');
            //$mftspan.attr('id', 'careerclick').attr('class', 'likelink');
            var mft = '<span id="careerclick" class="likelink">Show career</span>, c';
            }
        else {var mft = 'C';}
        pTable = '<p id="matches">&nbsp;<br/>&nbsp;<br/>Your filters returned no matches. ' + mft + 'hange a filter or two, or press the '
        pTable = pTable + '<span class="menureset2 likelink">reset button</span>.</p>'
        $("#matches").replaceWith(pTable);
        }
    else {
        $matchtable.append($mtbody).attr('id', 'matches').attr('class', 'tablesorter');
        $matchtable.attr('border', 0).attr('cellspacing', 0).attr('cellpadding', 4);
        $("#stats").html($matchtable);
        $("#matches").tablesorter( {sortList: slist,
                                    headers: {11: {sorter:'ascNum'},
                                              12: {sorter:'descNum'},
                                              13: {sorter:'roundsDesc'},
                                    	      0: {sorter:'descNum'},	
                                              24: {sorter:'descNum'},
                                              3: {sorter:'descNum'},
                                              4: {sorter:'descNum'},
                                              5: {sorter:'descNum'}, 
                                              6: {sorter:'descNum'},
                                              7: {sorter:'descNum'},
                                              8: {sorter:'descNum'},
                                              9: {sorter:'descNum'},
                                              22: {sorter:'descNum'},
                                              23: {sorter:'descNum'},
                                              10: {sorter:'descNum'},
                                              17: {sorter:'ascNum'},
                                              15: {sorter:'descNum'},
                                              16: {sorter:'descNum'},
                                              14: {sorter:'descNum'},
                                              18: {sorter:'descNum'},
                                              19: {sorter:'descNum'},
                                              20: {sorter:'descNum'},
                                              21: {sorter:'descNum'}                                             
                                              }
                                   });
        }
    
    var ftitle = getFilterTitle("");
    var pgtitle = '<b>Tour-Level Event Records ('+ftitle+')</b>'; // <br/>Just testing blah blah blah.';
    $("#tablelabel").html(pgtitle);
    
    $(".eventclick").click(function () {
        // switch back to results tab
        $(".tabview").addClass("tablink");
        $("#tabResults").removeClass("tablink");
        // unlike 'tabclick', don't reset any filters
        var ename = $(this).parent().attr('class');
        //var withspaces = insertNameSpaces(opponent);
        //setPlayerFilter(withspaces, 1, 1); // this includes makeMatchTable
        if ($("#tourneyhead").hasClass("closed")) {
            $("#tourneyhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".tourneychoice").show();
            }
        var eclass = '#tourney'+ename+'qq';
	$(".tourneychoice").removeClass("selected").removeClass("tourneyselected"); 
	$(eclass).addClass("selected").addClass("tourneyselected");       
        $(".header").show();
        $("#minimumhead").hide();
        $(".minimumchoice").hide();
        $("#minyearshead").hide();
        $(".minyearschoice").hide();
        makeMatchTable({}, 1);            
        })
    }

function makeMatchTable(options, defSort) {
    var servestats, stdscores;
    var rows = [], chunks = [];
    var stx = $.trim($(".spanselected").text());
    // checking to see whether we need to add more matches

    if (keep_loading == 1) {   
        if (view == "doubles") {
            if ((matchmx_dubs.length <= shortlist && stx != 'Last 52') && (stx != '2023' && stx != '2024')) {
                if (careerjs_dubs == 1) {matchmx_dubs = matchmx_dubs.concat(morematchmx_dubs);}   // some way to force this to load, even if waiting
                };
            }
        else {    
            if ((matchmx.length <= shortlist && stx != 'Last 52') && (stx != '2023' && stx != '2024')) {
                if (careerjs == 1) {matchmx = matchmx.concat(morematchmx);}   // some way to force this to load, even if waiting
                };
            }
        }
        
    if (view != "") { // url specifies view other than results
        $(".tabview").addClass('tablink');
        if (view == "h2h") {$("#tabHead").removeClass('tablink');}
        else if (view == "events") {$("#tabEvents").removeClass('tablink');}
        else if (view == "doubles") {$("#tabDubs").removeClass('tablink');}
        view = '';
        } 
     
    if (!$('#tabResults').hasClass("tablink")) {var tabview = "results";}
    else if (!$('#tabHead').hasClass("tablink")) {var tabview = "head";}
    else if (!$('#tabEvents').hasClass("tablink")) {var tabview = "events";}
    else if (!$('#tabDubs').hasClass("tablink")) {var tabview = "doubles";}
    
    if (tabview == "results" || tabview == "doubles") {
        $("#abovestats").show();
        
        if ('overall' in prefilters) {
            $(".stattab").addClass('likelink');
            $(".statso").removeClass('likelink');
            delete prefilters['overall'];
            }
        else if ('return' in prefilters) {
            $(".stattab").addClass('likelink');
            $(".statsr").removeClass('likelink');
            delete prefilters['return'];
            }
        else if ('raw' in prefilters) {
            $(".stattab").addClass('likelink');
            $(".statsw").removeClass('likelink');
            delete prefilters['raw'];
            }
        else if ('overview' in prefilters) {
            $(".stattab").addClass('likelink');
            $(".statsa").removeClass('likelink');
            delete prefilters['overview'];
            }

        var hdrs; 
        var showstats = ''        
        if (tabview == "doubles") {
            $(".revscore").hide();
            $(".statsa").show();
            $(".statspacer").show();
            if (!$(".statso").hasClass('likelink')) {
                showstats = 'o';
                hdrs = hdrsDoublesServe;
                }
            else if (!$(".statsr").hasClass('likelink')) {
                showstats = 'r';
                hdrs = hdrsDoublesReturn;
                }
            else if (!$(".statsw").hasClass('likelink')) {
                showstats = 'w';
                hdrs = hdrsDoublesRaw;
                }
            else if (!$(".statsa").hasClass('likelink')) {
                showstats = 'a';
                hdrs = hdrsDoubles;
                }
            }
        else {
            $(".revscore").show();
            $(".statsa").hide();
            $(".statspacer").hide();
            if ($(".revscore").text() == 'Reverse Loss Scores') {stdscores = true;}
            else if ($(".revscore").text() == 'Standard Scores') {stdscores = false;}
            else if ('reverse' in prefilters) {
                $(".revscore").html('Standard Scores');
                stdscores = false;
                }
            else {
                $(".revscore").html('Reverse Loss Scores');
                stdscores = true;
                }
            if (!$(".statso").hasClass('likelink')) {
                showstats = 'o';
                hdrs = hdrsServe;
                }
            else if (!$(".statsr").hasClass('likelink')) {
                showstats = 'r';
                hdrs = hdrsReturn;
                }
            else if (!$(".statsw").hasClass('likelink')) {
                showstats = 'w';
                hdrs = hdrsRaw;
                }
            else if (!$(".statsa").hasClass('likelink')) {
                $(".stattab").addClass('likelink');
                $(".statso").removeClass('likelink');
                showstats = 'o';
                hdrs = hdrsServe;
                }
            }
        }
    else {$("#abovestats").hide();}

    if (tabview == "results") {
        renderResults(stdscores, showstats, hdrs, defSort);
        }
    if (tabview == "head") {
        renderHeadToHeads(defSort);
        }  
    if (tabview == "events") {
        renderEvents(defSort);
        }     
    if (tabview == "doubles") {
        renderDoubles(stdscores, showstats, hdrs, defSort);
        }      

    $("#titleclick").click(function () {
        // reset all other filters?
        if ($("#spanhead").hasClass("closed")) {
            $("#spanhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".spanchoice").toggle();
            }
        $(".spanchoice").removeClass("selected").removeClass('spanselected');
        $("#spanCareerqq").addClass('selected').addClass('spanselected');
        if ($("#roundhead").hasClass("closed")) {
            $("#roundhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".roundchoice").toggle();
            }
        $(".roundchoice").removeClass("selected").removeClass('roundselected');
        $("#round0").addClass('selected').addClass('roundselected');
        makeMatchTable({}, 0);
        })
    var paramsearchbox = "Find player";		
    $("#paramsearch").val(paramsearchbox);
    $("#paramsearch").focus(function() {
        if ($(this).val() == paramsearchbox) {$(this).val("");}
        var urlparams = getPermalinkParams();
        $( "#paramsearch" ).autocomplete({
                source: playerlist,
                minLength: 2,
                select: function(e, ui) {
                    var playerselect = ui.item.value;
                    var player = playerselect.slice(4);
                    var mw = playerselect.slice(1,2);
                    if (mw == 'M') {
                        var playerurl = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + player.replace(/ /g, '') + '&f=' + urlparams;
                        }
                    else {
                        var playerurl = 'https://www.tennisabstract.com/cgi-bin/wplayer.cgi?p=' + player.replace(/ /g, '') + '&f=' + urlparams;
                        }                        
                    window.open(playerurl, "_self");
                    }
            });
        });
        
    var pparams = getPermalinkParams();
    var new_path = 'https://www.tennisabstract.com/cgi-bin/player-classic.cgi?p=' + fullname.replace(/ /g, '') 
    if (pparams != '') {new_path = new_path + '&f=' + pparams;}
    history.pushState( {
        new_text: pparams,
        slug: new_path  
        }, null, new_path);
    //    }
    }

function makeMenus() {
    $('#footer').empty();
    if (!$('#tabDubs').hasClass("tablink") || view == "doubles") {
        var doubles = 1;
        }
    else {doubles = 0;}
    var $str = $('<table>').attr('class', 'menus');
    // partner first
    $str.append(
                $('<tr>').attr('id', 'partnerhead').attr('class', 'header closed') 
                        .append($('<th>').text(fourspaces + '\u00a0\u00a0' + 'Partner')
                        )
                )
    $spanspaces = $('<span>').text(fourspaces + fourspaces);
    $spaninput = $('<span>').append($('<input>').attr('id', 'partnersearch').css('width', '80'));
    $str.append(
                $('<tr>').attr('id', 'partnersearchrow').attr('class', 'partnerchoice inmenu') 
                        .append($('<td>').append($spanspaces).append($spaninput)
                        )
                )
    $str.append(
                $('<tr>').attr('id', 'partnerdef').attr('class', 'partnerselected partnerchoice selected inmenu menudefault')
                        .append($('<td>').text(fourspaces + fourspaces + 'All')
                                         )
                )
    // opponent
    $str.append(
                $('<tr>').attr('id', 'opphead').attr('class', 'header closed') 
                        .append($('<th>').text(fourspaces + '\u00a0\u00a0' + 'Opponent')
                        )
                )
    $spanspaces = $('<span>').text(fourspaces + fourspaces);
    $spaninput = $('<span>').append($('<input>').attr('id', 'oppsearch').css('width', '80'));
    $str.append(
                $('<tr>').attr('id', 'oppsearchrow').attr('class', 'oppchoice inmenu') 
                        .append($('<td>').append($spanspaces).append($spaninput)
                        )
                )
    $str.append(
                $('<tr>').attr('id', 'oppdef').attr('class', 'oppselected oppchoice selected inmenu menudefault')
                        .append($('<td>').text(fourspaces + fourspaces + 'All')
                                         )
                )
    // opp team 
    $str.append(
                $('<tr>').attr('id', 'oppteamhead').attr('class', 'header closed') 
                        .append($('<th>').text(fourspaces + '\u00a0\u00a0' + 'Opp Team')
                        )
                )
    $spanspaces = $('<span>').text(fourspaces + fourspaces);
    $spaninput = $('<span>').append($('<input>').attr('id', 'oppteamsearch').css('width', '80'));
    $str.append(
                $('<tr>').attr('id', 'oppteamsearchrow').attr('class', 'oppteamchoice inmenu') 
                        .append($('<td>').append($spanspaces).append($spaninput)
                        )
                )
    $str.append(
                $('<tr>').attr('id', 'oppteamdef').attr('class', 'oppteamselected oppteamchoice selected inmenu menudefault')
                        .append($('<td>').text(fourspaces + fourspaces + 'All')
                                         )
                )
    // beginning of h2h menu
    $str.append(
                $('<tr>').attr('id', 'h2hhead').attr('class', 'header closed') 
                        .append($('<th>').text(fourspaces + '\u00a0\u00a0' + 'Head-to-Head')
                        )
                )
    $spanspaces = $('<span>').text(fourspaces + fourspaces);
    $spaninput = $('<span>').append($('<input>').attr('id', 'h2hsearch').css('width', '80'));
    $str.append(
                $('<tr>').attr('id', 'h2hsearchrow').attr('class', 'h2hchoice inmenu') 
                        .append($('<td>').append($spanspaces).append($spaninput)
                        )
                )
    $str.append(
                $('<tr>').attr('id', 'h2hdef').attr('class', 'h2hselected h2hchoice selected inmenu menudefault')
                        .append($('<td>').text(fourspaces + fourspaces + 'All')
                                         )
                )
    // beginning of 'not' menu
    $str.append(
                $('<tr>').attr('id', 'nothead').attr('class', 'header closed') 
                        .append($('<th>').text(fourspaces + '\u00a0\u00a0' + 'Exclude Opp')
                        )
                )
    $spanspaces = $('<span>').text(fourspaces + fourspaces);
    $spaninput = $('<span>').append($('<input>').attr('id', 'notsearch').css('width', '80'));
    $str.append(
                $('<tr>').attr('id', 'notsearchrow').attr('class', 'notchoice inmenu') 
                        .append($('<td>').append($spanspaces).append($spaninput)
                        )
                )
    $str.append(
                $('<tr>').attr('id', 'notdef').attr('class', 'notselected notchoice selected inmenu menudefault')
                        .append($('<td>').text(fourspaces + fourspaces + 'None')
                                         )
                )
    for (j=0; j<filterlist.length; j++) {
        var filter = filterlist[j];
        var ftitle = filteropts[filter][0];
        var fhead = filter + 'head', fchoice = filter + 'choice', fselected = filter + 'selected';
        $str.append(
                    $('<tr>').attr('id', fhead).attr('class', 'header closed') 
                            .append($('<th>').text(fourspaces + '\u00a0\u00a0' + ftitle)
                            )
                    )
        $str.append(
                    $('<tr>').attr('id', filter + 'def').attr('class', fselected + ' ' + fchoice + ' selected inmenu menudefault')
                            .append($('<td>').text(fourspaces + fourspaces + filteropts[filter][1])
                                             )
                    )
        var flist = filteropts[filter].slice(2);
        for (i=0; i<flist.length; i++) {
            var $ent = $('<tr>').attr('class', 'inmenu ' + fchoice)
                                .append($('<td>').text(fourspaces + fourspaces + flist[i].replace(/ /g, '\u00a0'))
                                                 );
            if (filter in alphaFilters) {
                var adjtext = flist[i].replace(/ /g, '_');
                adjtext = adjtext.replace("'", 'xx');
                adjtext = adjtext.replace("+", 'xpx');
                $ent.attr('id', filter+adjtext+'qq');
                }
            else {$ent.attr('id', filter + i);}
            $str.append($ent);
            }
        //attempt at custom date ranges
        if (filter == 'span' || filter == 'rank') {
            if (filter == 'span' && (typeof tdates === 'undefined')) {}
            else if (filter == 'rank' && (typeof vranks === 'undefined')) {}
            else {
                var $ent = $('<tr>').attr('class', 'inmenu '+filter+'choice')
                                .append($('<td>').text(fourspaces + fourspaces + 'Custom')
                                                 );
                $ent.attr('id', filter+'Customqq');
                $str.append($ent);  
                }        
            }
        }
    $str.append($('<tr>').append($('<th>').append($('<span>').attr('class', 'menureset likelink').text('Reset'))))
    $str.append($('<tr>').append($('<td>').append($('<span>').html('&nbsp;'))))
    var filternote = '<i>Tip: Ctrl-Click to select multiple choices from the same menu.</i>'
    $str.append($('<tr>').append($('<td>').append($('<span>').html(filternote))))
    $('#footer').append($str);
    
    $("#h2hhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".h2hchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        if (choiceid != 'h2hsearchrow') {choiceClick(choiceid, 'h2h', ctrl);}
        });
    $("#nothead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".notchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        if (choiceid != 'notsearchrow') {choiceClick(choiceid, 'not', ctrl);}
        });
    $("#partnerhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".partnerchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        if (choiceid != 'partnersearchrow') {choiceClick(choiceid, 'partner', ctrl);}
        });
    $("#opphead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".oppchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        if (choiceid != 'oppsearchrow') {choiceClick(choiceid, 'opp', ctrl);}
        });
    $("#oppteamhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".oppteamchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        if (choiceid != 'oppteamsearchrow') {choiceClick(choiceid, 'oppteam', ctrl);}
        });
    $("#spanhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });       
    $(".spanchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'span', ctrl);
        });
    
    $("#surfacehead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".surfacechoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'surface', ctrl);
        });
    $("#levelhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".levelchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'level', ctrl);
        });
    $("#tourneyhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".tourneychoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'tourney', ctrl);
        });
    $("#roundhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".roundchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'round', ctrl);
        });
    $("#entryhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".entrychoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'entry', ctrl);
        });
    $("#rankhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".rankchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'rank', ctrl);
        });
    $("#oentryhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".oentrychoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'oentry', ctrl);
        });
    $("#handhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".handchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'hand', ctrl);
        });
    $("#handshead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".handschoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'hands', ctrl);
        });
    $("#agehead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".agechoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'age', ctrl);
        });
    $("#heighthead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".heightchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'height', ctrl);
        });
    $("#countryhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".countrychoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'country', ctrl);
        });
    $("#resultshead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".resultschoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'results', ctrl);
        });
    $("#setshead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".setschoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'sets', ctrl);
        });
    $("#scoreshead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".scoreschoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'scores', ctrl);
        });
    $("#asrankhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".asrankchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'asrank', ctrl);
        });
    $("#statshead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $("#statsdef").click(function (event) { // if creating custom stat filters to later click again, need to change this to match other filters: .statschoice
        if (event.ctrlKey) {var ctrl=1;} // probably disable
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'stats', ctrl);
        });
    $("#extrashead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".extraschoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'extras', ctrl);
        });
    $("#minimumhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".minimumchoice").click(function (event) {
        //if (event.ctrlKey) {var ctrl=1;}
        //else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'minimum', 0); // only allow one selection
        }); 
    $("#minyearshead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".minyearschoice").click(function (event) {
        //if (event.ctrlKey) {var ctrl=1;}
        //else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'minyears', 0); // only allow one selection
        });         
    $("#crankhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".crankchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'crank', ctrl); // only allow one selection
        });  
    $("#prankhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".prankchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'prank', ctrl); // only allow one selection
        }); 
    $("#phandhead").click(function () {
        var choiceid = $(this).attr('id');
        fHeaderClick(choiceid);
        });
    $(".phandchoice").click(function (event) {
        if (event.ctrlKey) {var ctrl=1;}
        else {var ctrl=0;}
        var choiceid = $(this).attr('id')
        choiceClick(choiceid, 'phand', ctrl); // only allow one selection
        });               
    $("#spanCustomqq").click(function (event) {
        $("#spanstartrow").remove();
        // smarter way -- check if it exists, then build if not?
        var $s = $('<select />').attr('id', 'spanstart');
        $('<option />', {value: 'default', text: 'Start'}).appendTo($s);
        for (i=0; i<tdates.length; i++) {
            var showdate = tdates[i].slice(6) + '-' + months[tdates[i].slice(4,6)] + '-' + tdates[i].slice(0,4);
            $('<option />', {value: tdates[i], text: showdate}).appendTo($s);
            }
        $sspan = $('<span>').text(fourspaces + fourspaces);
        $std = $('<td>').append($sspan).append($s)
        $startrow = $('<tr>').attr('class', 'inmenu spanchoice').attr('id', 'spanstartrow').append($std);                                                     
        $("#spanCustomqq").after($startrow);
        $startrow.toggle();
        $('#spanstart').change(function() {
            $("#spanendrow").remove();
            startdate = $("#spanstart option:selected").val();
            var $t = $('<select />').attr('id', 'spanend');
            $('<option />', {value: 'default', text: 'End'}).appendTo($t);
            for (i=0; i<tdates.length; i++) {
                if (tdates[i] < startdate) {}
                else {
                    var showdate = tdates[i].slice(6) + '-' + months[tdates[i].slice(4,6)] + '-' + tdates[i].slice(0,4);
                    $('<option />', {value: tdates[i], text: showdate}).appendTo($t);
                    }
                }
            $espan = $('<span>').text(fourspaces + fourspaces);
            $etd = $('<td>').append($espan).append($t)    
            $endrow = $('<tr>').attr('class', 'inmenu spanchoice').attr('id', 'spanendrow').append($etd);
            $("#spanstartrow").after($endrow);
            $endrow.toggle();  
            $('#spanend').change(function() {
                //alert('end is changed');
                enddate = $("#spanend option:selected").val();
                makeMatchTable({}, 0);
                });      
            });
        });
    $("#rankCustomqq").click(function (event) {
        $("#rankstartrow").remove();
        // smarter way -- check if it exists, then build if not?
        var $s = $('<select />').attr('id', 'rankstart');
        $('<option />', {value: 'default', text: 'Max'}).appendTo($s);
        for (i=0; i<vranks.length; i++) {
            $('<option />', {value: vranks[i], text: vranks[i]}).appendTo($s);
            }
        $srank = $('<rank>').text(fourspaces + fourspaces);
        $srd = $('<td>').append($srank).append($s)
        $lowrow = $('<tr>').attr('class', 'inmenu rankchoice').attr('id', 'rankstartrow').append($srd);                                                     
        $("#rankCustomqq").after($lowrow);
        $lowrow.toggle();
        $('#rankstart').change(function() {
            $("#rankendrow").remove();
            lowrank = parseInt($("#rankstart option:selected").val());
            var $t = $('<select />').attr('id', 'rankend');
            $('<option />', {value: 'default', text: 'Min'}).appendTo($t);
            for (i=0; i<vranks.length; i++) {
                if (parseInt(vranks[i]) < lowrank) {}
                else {
                    $('<option />', {value: vranks[i], text: vranks[i]}).appendTo($t);
                    }
                }
            $erank = $('<rank>').text(fourspaces + fourspaces);
            $erd = $('<td>').append($erank).append($t)    
            $highrow = $('<tr>').attr('class', 'inmenu rankchoice').attr('id', 'rankendrow').append($erd);
            $("#rankstartrow").after($highrow);
            $highrow.toggle();  
            $('#rankend').change(function() {
                //alert('end is changed');
                highrank = parseInt($("#rankend option:selected").val());
                makeMatchTable({}, 0);
                });      
            });
        });
    $(".menureset").click(function () {
        resetFilters();
        // close open menus?
        makeMatchTable({}, 1);
        });
        
    var h2hsearchbox = "Add H2H";		
    $("#h2hsearch").val(h2hsearchbox);
    $("#h2hsearch").focus(function() {
        if ($(this).val() != '') {$(this).val("");}
        $( "#h2hsearch" ).autocomplete({
                source: ochoices,
                minLength: 2,
                select: function(e, ui) {setPlayerFilter(ui.item.value, 1, 0);}
            }) 
        });
    var notsearchbox = "Add NOT";		
    $("#notsearch").val(notsearchbox);
    $("#notsearch").focus(function() {
        if ($(this).val() != '') {$(this).val("");}
        $( "#notsearch" ).autocomplete({
                source: ochoices,
                minLength: 2,
                select: function(e, ui) {setNotPlayerFilter(ui.item.value, 1);}
            }) 
        });
    var partnersearchbox = "Add Partner";		
    $("#partnersearch").val(partnersearchbox);
    $("#partnersearch").focus(function() {
        if ($(this).val() != '') {$(this).val("");}
        $( "#partnersearch" ).autocomplete({
                source: pchoices,
                minLength: 2,
                select: function(e, ui) {setPartnerFilter(ui.item.value, 1, 0);}
            }) 
        });
    var oppsearchbox = "Add Opponent";		
    $("#oppsearch").val(oppsearchbox);
    $("#oppsearch").focus(function() {
        if ($(this).val() != '') {$(this).val("");}
        $( "#oppsearch" ).autocomplete({
                source: ochoices_dubs,
                minLength: 2,
                select: function(e, ui) {setOpponentFilter(ui.item.value, 1, 0);}
            }) 
        });
    var oppteamsearchbox = "Add Opp Team";		
    $("#oppteamsearch").val(oppteamsearchbox);
    $("#oppteamsearch").focus(function() {
        if ($(this).val() != '') {$(this).val("");}
        $( "#oppteamsearch" ).autocomplete({
                source: otchoices,
                minLength: 2,
                select: function(e, ui) {setOppteamFilter(ui.item.value, 1, 0);}
            }) 
        });
        
    var $s = $('<select />').attr('id', 'statcustomname');
    $('<option />', {value: 'default', text: 'Stat'}).appendTo($s);
    for (i=0; i<statlist.length; i++) {
        $('<option />', {value: statlist[i], text: statlist[i]}).appendTo($s);
        }
    $sspan = $('<span>').text(fourspaces + fourspaces);
    $std = $('<td>').append($sspan).append($s)
    $startrow = $('<tr>').attr('class', 'inmenu statschoice').attr('id', 'stats0').append($std);                                                     
    $('#statsdef').after($startrow);
    $('#statcustomname').change(function() {
        $("#stats0").addClass("selected").addClass("statsselected");
        $("#statsdef").removeClass("selected").removeClass("statsselected");        
        $("#statoperatorrow").remove();
        $("#statinputrow").remove();
        $("#statbuttonrow").remove(); 
        statchoice = $("#statcustomname option:selected").val();
        var $t = $('<select />').attr('id', 'statoperator');
        $('<option />', {value: 'default', text: 'Operator'}).appendTo($t);
        $('<option />', {value: 'ge', text: '>= at least'}).appendTo($t);
        $('<option />', {value: 'le', text: '<= up to'}).appendTo($t);
        $('<option />', {value: 'gt', text: '> more than'}).appendTo($t);
        $('<option />', {value: 'lt', text: '< less than'}).appendTo($t);
        $('<option />', {value: 'eq', text: '= equal to'}).appendTo($t);
        $espan = $('<span>').text(fourspaces + fourspaces);
        $etd = $('<td>').append($espan).append($t)    
        $endrow = $('<tr>').attr('class', 'inmenu statschoice').attr('id', 'statoperatorrow').append($etd);
        $("#stats0").after($endrow);
        $endrow.toggle();  
        $('#statoperatorrow').change(function() {
            $("#statinputrow").remove();
            $("#statbuttonrow").remove();
            statoperatorchoice = $("#statoperator option:selected").val();
            // text box for manual entry
            var $v = $('<input />').attr('type', 'text').attr('id', 'statinputbox').attr('value', '').attr('style', "width:50px;"); 
            $ispan = $('<span>').text(fourspaces + fourspaces);
            if (statchoice in statpercs) {
                $perc = $('<span>').text(' %');
                $itd = $('<td>').append($ispan).append($v).append($perc);
                }
            else if (statchoice == 'Time') {
                $timeEx = $('<span>').text(' (h:mm)');
                $itd = $('<td>').append($ispan).append($v).append($timeEx);
                }           
            else {$itd = $('<td>').append($ispan).append($v);}
            $inputrow = $('<tr>').attr('class', 'inmenu statschoice').attr('id', 'statinputrow').append($itd);
            $("#statoperatorrow").after($inputrow);
            $inputrow.toggle();                     
            // button 'apply'
            var $w = $('<input />').attr('type', 'submit').attr('value', 'Apply').attr('style', "width:50px;").attr('id', 'statapply');
            $bspan = $('<span>').text(fourspaces + fourspaces);
            $btd = $('<td>').append($bspan).append($w);
            $buttonrow = $('<tr>').attr('class', 'inmenu statschoice').attr('id', 'statbuttonrow').append($btd);
            $("#statinputrow").after($buttonrow);
            $buttonrow.toggle(); 
            $("#statapply").click(function (event) {
                statinput = $("#statinputbox").val();
                if (statchoice == 'Time') {
                    var hm = statinput.split(':');
                    // probably need some error handling for user input, esp e.g. :50 without hour number
                    statinput = parseInt(hm[0])*60 + parseInt(hm[1]);
                    }  
                makeMatchTable({}, 0);             
                });
            });
        });
    }

var alphaFilters = {'country': '', 'tourney': '', 'span': '', 'rank': ''};
//var alphaFilters = {};

var bhdict = {'1': 'one', '2': 'two'};

function insertPictureBio() {
    var plname = '<span style="fontsize:24px"><b>' + fullname + ' [' + country + ']</b></span>';
    if (typeof dob === 'undefined') {var birthdate = '';}
    else {
        var bd = dob.toString();
        var birthdate = 'Date of birth: ' + bd.slice(6) + '-' + months[bd.slice(4, 6)] + '-' + bd.slice(0, 4);
        }

    var pic_src = 'https://www.tennisabstract.com/photos/' + fullname.toLowerCase().replace(/ /g, "_") + '-' + photog + '.jpg'
    // background-color:d3d3d3; 
    var biotable = '<p id="biog"><table style="border-spacing:0"><tr><td><img src="' + pic_src + '" height="225" width="150"></td>'
    biotable = biotable + '<td>&nbsp;&nbsp;</td><td style="vertical-align:top">'
    biotable = biotable + '<table cellpadding=2 cellspacing=1><tr><td>' + plname + fourspaces + fourspaces + '</td></tr>';  

    if (typeof twitter != 'undefined' && twitter != "") {
        var tline = '<a href="https://twitter.com/' + twitter + '" target="_blank">@' + twitter + '</a>';
        biotable = biotable + '<tr><td>' + tline + '</td></tr>';
        }
    else {
        biotable = biotable + '<tr><td>&nbsp;</td></tr>'; 
        }

    biotable = biotable + '<tr><td>' + birthdate + '</td></tr>';
    var handed;
    if (hand == 'R') {handed = 'Plays: Right-handed';}
    else if (hand == 'L') {handed = 'Plays: Left-handed';}
    else {handed = '';}
    if (typeof backhand != 'undefined' && backhand != '') {handed = handed.slice(0,-7) + ' (' + bhdict[backhand] + '-handed backhand)';}
    if (handed != '') {
        biotable = biotable + '<tr><td>' + handed + '</td></tr>'; 
        }

    if (currentrank == '') {var crank = '';}
    else {var crank = 'Current rank: <b>'+currentrank.toString()+'</b>'}; 
    //if (typeof liverank != 'undefined' && liverank != '') {var lrank = '&nbsp;&nbsp;&nbsp;<a target="_blank" href="https://live-tennis.eu/"><i>Live: ' + liverank.toString() + '</i></a>';}
    //else {var lrank = '';} 
    var lrank = '';
    if (crank != '') {
        biotable = biotable + '<tr><td>' + crank + lrank + '</td></tr>'; 
        }  

    if (peakrank != 'UNR') {var prank = 'Peak rank: <b>' + peakrank.toString()+'</b>';}
    else {var prank = '';}
    if (peakfirst != '') {
    	var pf = peakfirst.toString();
    	prank = prank + ' (' + pf.slice(6) + '-' + months[pf.slice(4, 6)] + '-' + pf.slice(0, 4) + ')';
    	}
    if (prank != '') {
        biotable = biotable + '<tr><td>' + prank + '</td></tr>'; 
        } 
        
    // if (typeof current_dubs === 'undefined' || current_dubs == "" || current_dubs == "UNR") {
    //     if (!(typeof peak_dubs === 'undefined' || peak_dubs == "")) {
    //         var drank = "Doubles peak: <b>" + peak_dubs.toString() + '</b>'
    //         var pfd = peakfirst_dubs.toString();
    //         drank = drank + ' (' + pfd.slice(6) + '-' + months[pfd.slice(4, 6)] + '-' + pfd.slice(0, 4) + ')';
    //         }
    //     else {drank = "&nbsp;";}
    //     }
    // else {
    //     var drank = "Doubles rank: <b>" + current_dubs.toString() + '</b>&nbsp;|&nbsp;';
    //     drank = drank + 'Peak: <b>' + peak_dubs.toString() + '</b>'
    //     }
    var drank = "&nbsp;";
    biotable = biotable + '<tr><td>' + drank + '</td></tr>'; 
        
    var profiles = '';
    // if (typeof atp_id != 'undefined' && atp_id != "") {
    //     var atp_stem = "https://www.atpworldtour.com/en/players/";
    //     profiles = profiles + '<a href="' + atp_stem + atp_id + '/overview" target="_blank" title="Profile at atpworldtour.com">ATP</a> | ';
    //     }   
    // if (typeof itf_id != 'undefined' && itf_id != "") {
    //     var itf_stem = "https://www.itftennis.com/procircuit/players/player/profile.aspx?playerid=";
    //     profiles = profiles + '<a href="' + itf_stem + itf_id + '" target="_blank" title="Profile at the ITF website">ITF</a> | ';
    //     }
    // if (typeof dc_id != 'undefined' && dc_id != "") {
    //     var dc_stem = "https://www.daviscup.com/en/players/player.aspx?id=";
    //     profiles = profiles + '<a href="' + dc_stem + dc_id + '" target="_blank" title="Profile at Davis Cup website">DC</a> | ';
    //     }
    if (typeof wiki_id != 'undefined' && wiki_id != "") {
        var wiki_stem = "https://en.wikipedia.org/wiki/";
        profiles = profiles + '<a href="' + wiki_stem + wiki_id + '" target="_blank" title="Profile at Wikipedia">Wikipedia</a> | '  ;
        }
        
    if (profiles != '') {
        biotable = biotable + '<tr><td>Profile: ' + profiles.slice(0,-3) + '</td><td>&nbsp;</td></tr>';
        } 
    else {
        biotable = biotable + '<tr><td>&nbsp;</td></tr>'; 
        } 

    // if picture (and maybe in general) need to move ranking history link and titles/finals out of this box
    //var rhlink = '<a href="https://tennisabstract.herokuapp.com/ATP/RankHistory/' + fullname.replace(/ /g, "_") + '/YearEndDate/Points/">Ranking history and highlights</a>';
    var titlelink = '<span id="titleclick" class="likelink">Titles/Finals</span>';
    //biotable = biotable + '<tr><td>' + rhlink + '</td></tr><tr><td>' + titlelink + '</td></tr>';
    biotable = biotable + '<tr><td>' + titlelink + '</td></tr>';

    biotable = biotable + '<tr><td>' + '<i>Photo: <a target="_blank" href="' + photog_link + '">' + photog_credit + '</a></i></td></tr>';

    $("#bio").html(biotable + '</table></td><td>&nbsp;&nbsp;</td></tr></table></p>');
    }

function insertBio() {
    var plname = '<span style="fontsize:24px"><b>' + fullname + ' [' + country + ']</b></span>';
    if (typeof dob === 'undefined') {var birthdate = '';}
    else {
        var bd = dob.toString();
        var birthdate = 'Date of birth: ' + bd.slice(6) + '-' + months[bd.slice(4, 6)] + '-' + bd.slice(0, 4);
        }
    var handed;
    if (hand == 'R') {handed = 'Plays: Right-handed';}
    else if (hand == 'L') {handed = 'Plays: Left-handed';}
    else {handed = '';}
    if (typeof backhand != 'undefined' && backhand != '') {handed = handed.slice(0,-7) + ' (' + bhdict[backhand] + '-handed backhand)';}
    if (currentrank == '') {var crank = '';}
    else {var crank = 'Current rank: <b>'+currentrank.toString()+'</b>'}; 
    // if (typeof liverank != 'undefined' && liverank != '') {var lrank = '&nbsp;&nbsp;&nbsp;<a target="_blank" href="https://live-tennis.eu/"><i>Live: ' + liverank.toString() + '</i></a>';}
    // else {var lrank = '';}
    var lrank = '';
    if (peakrank != 'UNR') {var prank = 'Peak rank: <b>' + peakrank.toString()+'</b>';}
    else {var prank = '';}
    if (peakfirst != '') {
    	var pf = peakfirst.toString();
    	prank = prank + ' (' + pf.slice(6) + '-' + months[pf.slice(4, 6)] + '-' + pf.slice(0, 4) + ')';
    	}
    //if (typeof twitter != 'undefined' && twitter != "") {var tline = 'Twitter: <a href="https://twitter.com/' + twitter + '" target="_blank">@' + twitter + '</a>';}
    if (typeof twitter != 'undefined' && twitter != "") {var tline = '<a href="https://twitter.com/' + twitter + '" target="_blank">@' + twitter + '</a>';}
    else {var tline = '';}
    var biotable = '<p id="biog"><table cellpadding=1 cellspacing=1><tr><td>' + plname + fourspaces + fourspaces + '</td><td>' + tline + '</td></tr>';
    if (birthdate != '') {var rowtwo = '<tr><td>' + birthdate + fourspaces + fourspaces + '</td><td>' + handed + '</td></tr>';}
    else {var rowtwo = '<tr><td>' + handed + '</td><td>&nbsp;</td></tr>';}
    if (crank != '') {var rowthree = '<tr><td>' + crank + lrank + '</td><td>' + prank + '</td></tr>';}
    else {var rowthree = '<tr><td>' + prank + '</td><td>&nbsp;</td></tr>';}
    
    var profiles = '';
    // if (typeof atp_id != 'undefined' && atp_id != "") {
    //     var atp_stem = "https://www.atpworldtour.com/en/players/";
    //     profiles = profiles + '<a href="' + atp_stem + atp_id + '/overview" target="_blank" title="Profile at atpworldtour.com">ATP</a> | ';
    //     }   
    // if (typeof itf_id != 'undefined' && itf_id != "") {
    //     var itf_stem = "https://www.itftennis.com/procircuit/players/player/profile.aspx?playerid=";
    //     profiles = profiles + '<a href="' + itf_stem + itf_id + '" target="_blank" title="Profile at the ITF website">ITF</a> | ';
    //     }
    // if (typeof dc_id != 'undefined' && dc_id != "") {
    //     var dc_stem = "https://www.daviscup.com/en/players/player.aspx?id=";
    //     profiles = profiles + '<a href="' + dc_stem + dc_id + '" target="_blank" title="Profile at Davis Cup website">DC</a> | ';
    //     }
    if (typeof wiki_id != 'undefined' && wiki_id != "") {
        var wiki_stem = "https://en.wikipedia.org/wiki/";
        profiles = profiles + '<a href="' + wiki_stem + wiki_id + '" target="_blank" title="Profile at Wikipedia">Wikipedia</a> | '  ;
        }
        
    if (profiles != '') {
        var profile_row = '<tr><td>Profile: ' + profiles.slice(0,-3) + '</td><td>&nbsp;</td></tr>';
        } 
    else {var profile_row = '';}      

    var rhlink = '&nbsp;' // '<a href="https://tennisabstract.herokuapp.com/ATP/RankHistory/' + fullname.replace(/ /g, "_") + '/YearEndDate/Points/">Ranking history and highlights</a>';
    var titlelink = '<span id="titleclick" class="likelink">Titles/Finals</span>'
    var rowfour =  '<tr><td>' + titlelink + '</td><td>' + rhlink + '</td></tr>'; 
    $("#bio").html(biotable + rowtwo + rowthree + profile_row + rowfour + '</table></p>');
    }

function choiceClick(choiceid, filt, ctrl) {
    //var menudef = 0;
    // if click is on default -- shift doesn't matter, presets don't matter; select default and deselect others
    // (possible exception of 'span' menu?
    if (choiceid.slice(-3) == 'def') {
        $("." + filt + "choice").removeClass("selected").removeClass(filt + "selected");
        $('#' + choiceid).addClass("selected").addClass(filt + "selected");
        }
    // if click on choice that is already selected [shift doesn't matter]
    else if ($('#' + choiceid).hasClass('selected')) {
        // - if it's the only one, go back to default
        if ($('.' + filt + 'selected').length == 1) {
            $('#' + filt + 'def').addClass("selected").addClass(filt + "selected");
            }
        $('#' + choiceid).removeClass("selected").removeClass(filt + "selected");
        }
    // if choice not already selected, and shift, then select new choice
    else if (ctrl == 1) {
        $('#' + choiceid).addClass("selected").addClass(filt + "selected");
        }
    // choice not already selected, not shift: take away all, make this selection
    else {
        $("." + filt + "choice").removeClass("selected").removeClass(filt + "selected");
        $('#' + choiceid).addClass("selected").addClass(filt + "selected");
        }
    if (choiceid.slice(-8) == 'Customqq') {return;}
    makeMatchTable({}, 0);
    }

function setPlayerFilter(player, make, defSort) {
    $('.h2hchoice').removeClass('selected').removeClass('h2hselected');
    var playerid = '#' + 'h2h' + player.replace(/ /g, '');
    if ($(playerid).length == 0) { // new player to the list
        $newcell = $('<td>').text(fourspaces + fourspaces + player.replace(/ /g, '\u00a0'));
        $newrow = $('<tr>').attr('class', 'h2hselected h2hchoice selected inmenu').attr('id', playerid.slice(1));
        $newrow.append($newcell);
        $('#nothead').before($newrow);
        if ($('#h2hhead').hasClass('open')) {$newrow.toggle();}
        $(playerid).click(function () {
            //var choiceid = $(this).attr('id')
            if (event.ctrlKey) {var ctrl=1;}
            else {var ctrl=0;}
            choiceClick(playerid.slice(1), 'h2h', ctrl);
            });
        }
    else {$(playerid).addClass('selected').addClass('h2hselected');}
    //set time span to career
    if (make==1) {makeMatchTable({}, defSort);}
    }
    
function setPartnerFilter(player, make, defSort) {
    $('.partnerchoice').removeClass('selected').removeClass('partnerselected');
    var playerid = '#' + 'partner' + player.replace(/ /g, '');
    if ($(playerid).length == 0) { // new player to the list
        $newcell = $('<td>').text(fourspaces + fourspaces + player.replace(/ /g, '\u00a0'));
        $newrow = $('<tr>').attr('class', 'partnerselected partnerchoice selected inmenu').attr('id', playerid.slice(1));
        $newrow.append($newcell);
        $('#opphead').before($newrow);
        if ($('#partnerhead').hasClass('open')) {$newrow.toggle();}
        $(playerid).click(function () {
            //var choiceid = $(this).attr('id')
            if (event.ctrlKey) {var ctrl=1;}
            else {var ctrl=0;}
            choiceClick(playerid.slice(1), 'partner', ctrl);
            });
        }
    else {$(playerid).addClass('selected').addClass('partnerselected');}
    //set time span to career
    if (make==1) {makeMatchTable({}, defSort);}
    }
    
function setOpponentFilter(player, make, defSort) {
    $('.oppchoice').removeClass('selected').removeClass('oppselected');
    var playerid = '#' + 'opp' + player.replace(/ /g, '');
    if ($(playerid).length == 0) { // new player to the list
        $newcell = $('<td>').text(fourspaces + fourspaces + player.replace(/ /g, '\u00a0'));
        $newrow = $('<tr>').attr('class', 'oppselected oppchoice selected inmenu').attr('id', playerid.slice(1));
        $newrow.append($newcell);
        $('#oppteamhead').before($newrow);
        if ($('#opphead').hasClass('open')) {$newrow.toggle();}
        $(playerid).click(function () {
            //var choiceid = $(this).attr('id')
            if (event.ctrlKey) {var ctrl=1;}
            else {var ctrl=0;}
            choiceClick(playerid.slice(1), 'opp', ctrl);
            });
        }
    else {$(playerid).addClass('selected').addClass('oppselected');}
    //set time span to career
    if (make==1) {makeMatchTable({}, defSort);}
    }
    
function setOppteamFilter(player, make, defSort) {
    $('.oppteamchoice').removeClass('selected').removeClass('oppteamselected');
    var playerid = '#' + 'oppteam' + player.replace(/ /g, '');
    if ($(playerid).length == 0) { // new player to the list
        var slash_replace = '/<br/>' + fourspaces + "&nbsp;" + fourspaces
        $newcell = $('<td>').html(fourspaces + fourspaces + player.replace(/ /g, '\u00a0').replace('/', slash_replace));
        $newrow = $('<tr>').attr('class', 'oppteamselected oppteamchoice selected inmenu').attr('id', playerid.slice(1));
        $newrow.append($newcell);
        $('#spanhead').before($newrow);
        if ($('#oppteamhead').hasClass('open')) {$newrow.toggle();}
        $(playerid).click(function () {
            //var choiceid = $(this).attr('id')
            if (event.ctrlKey) {var ctrl=1;}
            else {var ctrl=0;}
            choiceClick(playerid.slice(1), 'oppteam', ctrl);
            });
        }
    else {$(playerid).addClass('selected').addClass('oppteamselected');}
    //set time span to career
    if (make==1) {makeMatchTable({}, defSort);}
    }

function setNotPlayerFilter(player, make) {
    $('.notchoice').removeClass('selected').removeClass('notselected');
    var playerid = '#' + 'not' + player.replace(/ /g, '');
    if ($(playerid).length == 0) { // new player to the list
        $newcell = $('<td>').text(fourspaces + fourspaces + player.replace(/ /g, '\u00a0'));
        $newrow = $('<tr>').attr('class', 'notselected notchoice selected inmenu').attr('id', playerid.slice(1));
        $newrow.append($newcell);
        $('#spanhead').before($newrow);
        if ($('#nothead').hasClass('open')) {$newrow.toggle();}
        $(playerid).click(function () {
            //var choiceid = $(this).attr('id')
            if (event.ctrlKey) {var ctrl=1;}
            else {var ctrl=0;}
            choiceClick(playerid.slice(1), 'not', ctrl);
            });
        }
    else {$(playerid).addClass('selected').addClass('notselected');}
    //set time span to career
    if (make==1) {makeMatchTable({}, 0);}
    }

function fHeaderClick(choiceid) {
    var filt = choiceid.slice(0, -4);
    $("." + filt + "choice").toggle();
    if ($("#" + filt + "head").hasClass("closed")) {$("#" + filt + "head").removeClass("closed").addClass("open");}
    else {$("#" + filt + "head").removeClass("open").addClass("closed");}
    if ($("." + filt + "choice").is(':visible') == false && $("#" + filt + "def").hasClass("selected") == false) {
        // check if default is selected
        $("#" + filt + "head").addClass("selected");
        }
    else {$("#" + filt + "head").removeClass("selected");}
    }
    
var defParams = ''    
window.onpopstate = function (event) {
    if (event.state == null) {
        var prefs = 0;
        for (pf in prefilters) {prefs += 1;}
        if (prefs == 0) {newPrefilters(defParams);}
        }
    else if (event.state.new_text.indexOf('.cgi') != -1) {
        newPrefilters(defParams);
        }
    else {
        //alert('event state '+event.state.slug);
        newPrefilters(event.state.new_text);
        new_text = event.state.new_text;
        }
    };
    
var startdate = '', enddate = '';
var lowrank = '', highrank = '';
var statchoice = '', statoperatorchoice = '', statinput = '';
var statlist = ['Dom Ratio', 'Ace Perc', 'DF Perc', '1st In', '1st WPc', '2nd WPc', 'BP Svd Pc', 'BP Saved', 'BPC Faced',
                    'Time', 'TPW', 'RPW', 'vAce Pc', 'v1st WPc', 'v2nd WPc', 'BP Cnv Pc', 'BP Conv', 'BP Chncs', 'Tot Pts',
                    'Aces', 'DFs', 'Sv Pts', '1Sv Pts', '2Sv Pts', 'vAces'];
var statpercs = {'Ace Perc': 1, 'DF Perc': 1, '1st In': 1, '1st WPc': 1, '2nd WPc': 1, 'BP Svd Pc': 1, 
                     'TPW': 1, 'RPW': 1, 'vAce Pc': 1, 'v1st WPc': 1, 'v2nd WPc': 1, 'BP Cnv Pc': 1}

$(document).ready(function() { 

    if (typeof navbar !== 'undefined') {
        $("#navbar").html(navbar);
        } 

    //var pparams = getPermalinkParams();
    var thisurl = window.location.href
    if (thisurl.indexOf('&') == -1) {var pparams = '';}
    else {var pparams = thisurl.slice(thisurl.indexOf('&')).replace("&f=", "");}
    //else {var pparams = '';}
    if (typeof(history.replaceState) !== "undefined") {
        history.replaceState({
           //old_text: old_text.val(),
           new_text: pparams,
           slug: location.pathname.replace("/", "")
        }, null, null);
    }

    if (typeof photog == 'undefined' || photog == '') {
        insertBio();
        }
    else {
        insertPictureBio();
        }

    // add chart agg link to span id="shotsHere"
    if (typeof chartagg != 'undefined' && chartagg == 1) {
        $ca_span = $('<span />').addClass('tablink').addClass('tabview');
        $ca_span.css('background-color', '#e6EEEE').css('position', 'relative').css('top', '5px');
        var ca_link = 'https://www.tennisabstract.com/charting/' + fullname.replace(/ /g, '') + '.html'
        var ihtml = '&nbsp;<b><a href="' + ca_link + '" target="_blank" style="text-decoration:none">Shot-by-Shot Stats</a></b>&nbsp;';
        $ca_span.html(ihtml);
        $("#shotsHere").append($ca_span);
        // $('<br />').insertBefore($ca_span);
        }
   
    // if (typeof playernews === 'undefined') {var pnewsrows = '';} //|| playernews == ''
    // else if (playernews == '') {var pnewsrows = '';}
    // else {
    //     var pnewsrows = '';
    //     for (j=0; j<playernews.length; j++) {
    //         pnewsrows = pnewsrows + '<br/>' + playernews[j];
    //         }
    //     if (playernews.length > 0) {pnewsrows = pnewsrows + '<br/>&nbsp;';}
    //     }

    // if (typeof upcoming === 'undefined') {var upcomingrow = '';}
    // else if (upcoming == '') {var upcomingrow = '';}
    // else {
    //     if (month < 10) {var udate = day + ' ' + months['0'+month+''];}
    //     else {var udate = day + ' ' + months[month+''];}
    //     var upcomingrow = '<br/><b>' + udate + '</b> Upcoming Tournaments: ' + upcoming;} // add date dynamically
    //     //if (pnewsrows == '') {pnewsrows = '<br/>&nbsp;';}
    // if (pnewsrows == '' && upcomingrow == '') {} //  && upcomingrow == ''
    // else {
    //     var newsanalysis = '<span style="background-color:#e6EEEE;"><b>News and Analysis</b></span>'
    //     var yourlinkhere = '<i><a href="https://tennisabstract.com/main/sitesubmit.html">your link here?</a></i>'
    //     var pnews = '&nbsp;<br/>' + newsanalysis + fourspaces + yourlinkhere + upcomingrow + pnewsrows; // upcomingrow + pnewsrows;
    //     $("#playernews").html(pnews);
    //     }
    
    if (typeof careerjs_dubs === 'undefined') {  
        // in case doubles data didn't load / doesn't exist  
        $("#tabDubs").hide();
        $("#tabDubsSpacer").hide();
        careerjs_dubs = 0;
        view = "";
        }        
    else if (view == "") {  // check ranks / peak ranks to see if should default to dubs view
        if (typeof currentrank === 'undefined' || currentrank == "" || currentrank == "UNR") {currentrank = 3000;}
        if (typeof peakrank === 'undefined' || peakrank == "") {peakrank = 3000;}
        if (typeof current_dubs === 'undefined' || current_dubs == "" || current_dubs == "UNR") {current_dubs = 3000;}
        if (typeof peak_dubs === 'undefined' || peak_dubs == "") {peak_dubs = 3000;}
        if (currentrank <= 50 || peakrank <= 10) {}
        else if (currentrank > (current_dubs * 5)) {view = "doubles";}
        else if (currentrank == "" && peakrank > (peak_dubs * 5)) {view = "doubles";}
        else if (currentrank == 3000 && peakrank > (peak_dubs * 5)) {view = "doubles";}
        // can do this server-side...
        }
    
    if (view == "doubles") {
        makeSplitsTable(doubles=1);
        prefilters['overview'] = 1; // default, show ranks and full names
        filteropts['span'] = ychoices_dubs;
        filteropts['tourney'] = tchoices_dubs;
        filteropts['asrank'] = rchoices_dubs;     
        }
    else {
        makeSplitsTable()
        }
    
//    if (typeof photog != 'undefined' && photog != '') {
//        $(".moresplits").toggle();
//        }
        
    makeMenus();

    applyPrefilters();
    $("#tabHead").click(function () {
        // if switching from doubles, change menus:
        if (!$('#tabDubs').hasClass("tablink")) {
            makeSplitsTable();
            //if (typeof photog != 'undefined' && photog != '') {
            //    $(".moresplits").toggle();
            //    }
            filteropts['span'] = ychoices;
            filteropts['tourney'] = tchoices;
            filteropts['asrank'] = rchoices;
            makeMenus();
            }
        $(".tabview").addClass("tablink");
        $("#tabHead").removeClass("tablink");
        resetFilters();
        if ($("#spanhead").hasClass("closed")) {
            $("#spanhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".spanchoice").toggle();
            }
        $(".spanchoice").removeClass("selected").removeClass('spanselected');
        $("#spanCareerqq").addClass('selected').addClass('spanselected'); 
        // show all filters (heads + choices), then hide minimum
        $(".header").show();
        $("#h2hhead").hide();
        $(".h2hchoice").hide();
        $("#nothead").hide();
        $(".notchoice").hide();
        $("#minyearshead").hide(); 
        $(".minyearschoice").hide();
        $("#partnerhead").hide();
        $(".partnerchoice").hide();
        $("#opphead").hide();
        $(".oppchoice").hide();
        $("#oppteamhead").hide();
        $(".oppteamchoice").hide();
        $("#handshead").hide();
        $(".handschoice").hide(); 
        $("#prankhead").hide();
        $(".prankchoice").hide();
        $("#phandhead").hide();
        $(".phandchoice").hide();
        makeMatchTable({}, 1);
        })
    $("#tabEvents").click(function () {
        // if switching from doubles, change menus:
        if (!$('#tabDubs').hasClass("tablink")) {
            makeSplitsTable();
            filteropts['span'] = ychoices;
            filteropts['tourney'] = tchoices;
            filteropts['asrank'] = rchoices;
            makeMenus();
            }
        $(".tabview").addClass("tablink");
        $("#tabEvents").removeClass("tablink");
        resetFilters();
        if ($("#spanhead").hasClass("closed")) {
            $("#spanhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".spanchoice").toggle();
            }
        $(".spanchoice").removeClass("selected").removeClass('spanselected');
        $("#spanCareerqq").addClass('selected').addClass('spanselected'); 
        // show all filters (heads + choices), then hide minimum
        $(".header").show();
        $("#h2hhead").hide();
        $(".h2hchoice").hide();
        $("#nothead").hide();
        $(".notchoice").hide();
        $("#partnerhead").hide();
        $(".partnerchoice").hide();
        $("#opphead").hide();
        $(".oppchoice").hide();
        $("#oppteamhead").hide();
        $(".oppteamchoice").hide();
        $("#handshead").hide();
        $(".handschoice").hide(); 
        $("#prankhead").hide();
        $(".prankchoice").hide();
        $("#phandhead").hide();
        $(".phandchoice").hide();
        makeMatchTable({}, 1);
        })        
    $("#tabResults").click(function () {
        // if switching from doubles, change menus:
        if (!$('#tabDubs').hasClass("tablink")) {
            makeSplitsTable();
            prefilters['overall'] = 1; // default, show serving stats
            filteropts['span'] = ychoices;
            filteropts['tourney'] = tchoices;
            filteropts['asrank'] = rchoices;
            makeMenus();
            }
        $(".tabview").addClass("tablink");
        $("#tabResults").removeClass("tablink");
        resetFilters();
        if ($("#spanhead").hasClass("closed")) {
            $("#spanhead").removeClass("closed").addClass("open") //.addClass("selected");
            $(".spanchoice").toggle();
            }
        $(".spanchoice").removeClass("selected").removeClass('spanselected');
        $("#spandef").addClass('selected').addClass('spanselected'); 
        // show all filters (heads + choices), then hide h2h, not ... more?
        $(".header").show();
        $("#minimumhead").hide(); 
        $(".minimumchoice").hide(); 
        $("#minyearshead").hide(); 
        $(".minyearschoice").hide();  
        $("#partnerhead").hide();
        $(".partnerchoice").hide();
        $("#opphead").hide();
        $(".oppchoice").hide();
        $("#oppteamhead").hide();
        $(".oppteamchoice").hide();
        $("#handshead").hide();
        $(".handschoice").hide();   
        $("#prankhead").hide();
        $(".prankchoice").hide();
        $("#phandhead").hide();
        $(".phandchoice").hide();  
        makeMatchTable({}, 1);
        })          
    $("#tabDubs").click(function () {
        prefilters['overview'] = 1; // default, show ranks and full names
        // switching from singles, so change menus:
        makeSplitsTable(doubles=1);
        filteropts['span'] = ychoices_dubs;
        filteropts['tourney'] = tchoices_dubs;
        filteropts['asrank'] = rchoices_dubs;
        makeMenus();
        $(".tabview").addClass("tablink");
        $("#tabDubs").removeClass("tablink");
        $(".header").show();
        $("#h2hhead").hide();
        $("#nothead").hide(); 
        $("#minimumhead").hide();
        $(".minimumchoice").hide();
        $("#minyearshead").hide();
        $(".minyearschoice").hide();
        $("#crankhead").hide();
        $(".crankchoice").hide();
        $("#handhead").hide();
        $(".handchoice").hide();	
        $("#agehead").hide();
        $(".agechoice").hide();
        $("#heighthead").hide();
        $(".heightchoice").hide();
        $("#countryhead").hide();
        $(".countrychoice").hide();      
        makeMatchTable({}, 1);
        })       
    $(".stattab").click(function () {
        $(".stattab").addClass("likelink");
        $(this).removeClass("likelink");
        makeMatchTable({}, 1);
        })
    $(".revscore").click(function () {
        hidePermalink();
        if ($(".revscore").text() == 'Reverse Loss Scores') {
            $(".revscore").html('Standard Scores');
            makeMatchTable({}, 0);
            }
        else {
            $(".revscore").html('Reverse Loss Scores');
            makeMatchTable({}, 0);
            }
        })
    if (careerjs == 1 && keep_loading == 1) {
        if (view != "doubles" && 'span' in prefilters && (prefilters['span'] != '1' && prefilters['span'] != '2')) {matchmx = matchmx.concat(morematchmx);}  
        else {
            var careerurl = 'https://www.minorleaguesplits.com/tennisabstract/cgi-bin/jsmatches/' + nameparam + 'Career.js';
            $.getScript(careerurl, function() {
                matchmx = matchmx.concat(morematchmx);
                })
            }
        }
    if (careerjs_dubs == 1 && keep_loading == 1) {
        if (view == "doubles" && 'span' in prefilters && (prefilters['span'] != '1' && prefilters['span'] != '2')) {matchmx_dubs = matchmx_dubs.concat(morematchmx_dubs);}  
        else {
            var careerurl = 'https://www.minorleaguesplits.com/tennisabstract/cgi-bin/jsdoubles/' + nameparam + 'Career.js';
            $.getScript(careerurl, function() {
                matchmx_dubs = matchmx_dubs.concat(morematchmx_dubs);
                })
            }
        }
    makeMatchTable({}, 0);
    $.getScript("https://www.tennisabstract.com/jquery.ui.core.js", function() {});
    $.getScript("https://www.tennisabstract.com/jquery.ui.position.js", function() {});
    $.getScript("https://www.tennisabstract.com/jquery.ui.widget.js", function() {});
    $.getScript("https://www.tennisabstract.com/mwplayerlist.js", function() {}); 
    $.getScript("https://www.tennisabstract.com/jquery.ui.autocomplete.js", function() {});    
    $('#playersearch').append($('<input>').attr('id', 'tags'));

    var searchbox = "Player Search";		
    $("#tags").val(searchbox);
    $("#tags").focus(function() {
        if ($(this).val() == searchbox) {$(this).val("");}
        $( "#tags" ).autocomplete({
                source: playerlist,
                minLength: 2,
                select: function(e, ui) {
                    var playerselect = ui.item.value;
                    var player = playerselect.slice(4);
                    var mw = playerselect.slice(1,2);
                    if (mw == 'M') {
                        var playerurl = 'https://www.tennisabstract.com/cgi-bin/player.cgi?p=' + player.replace(/ /g, '');
                        }
                    else {
                        var playerurl = 'https://www.tennisabstract.com/cgi-bin/wplayer.cgi?p=' + player.replace(/ /g, '');
                        }                        
                    window.open(playerurl, "_self");
                    }
            });
        }); 
    })

</script>
</head>
<body>

<div id="header">

<div id="navbar">
</div>

<table width=1240px>
<tr><td>&nbsp;</td><td>&nbsp;</td>
</tr>

<tr>
<td align="left" style="vertical-align:top"><span id="bio">&nbsp;</span>

<span id="tabResults" style="background-color:#e6EEEE;" class="tabview">&nbsp;<b>Singles Results</b>&nbsp;</span>&nbsp;
<span id="tabHead" style="background-color:#e6EEEE;" class="tablink tabview">&nbsp;<b>Head-to-Heads</b>&nbsp;</span>&nbsp;
<span id="tabEvents" style="background-color:#e6EEEE;" class="tablink tabview">&nbsp;<b>Event Records</b>&nbsp;</span>
<br/><span id="tabDubs" style="background-color:#e6EEEE; position:relative; top:5px" class="tablink tabview">&nbsp;<b>Doubles Results</b>&nbsp;</span><span id="tabDubsSpacer">&nbsp;&nbsp;</span>
<span id="shotsHere">
</span>
</td>
<td id="wonloss" align="right" style="vertical-align:top">&nbsp;</td>
</tr>
<tr>
<td id="tabmenu" align="left" style="vertical-align:top">
&nbsp;
</td>
<td>&nbsp;</td>
</tr>
<tr>
<td colspan=2 id="playernews">&nbsp;</td>
</tr>
</tr></table>
</div>

<div id="main">

<table width="1240px" id="maintable">
<tr id="tabletoggles">
<td>&nbsp;</td>
<td id="tablelabel">&nbsp;</td>
<td id="abovestats" class="abovestats" align="right">
&nbsp;&nbsp;&nbsp;<span class="revscore likelink"></span>
&nbsp;&nbsp;&nbsp;<b>Stats:</b>&nbsp;
<span class="statsa stattab">Overview</span><span class="statspacer">&nbsp;|&nbsp;</span><span class="statso stattab">Serve</span>&nbsp;|&nbsp;<span class="statsr stattab likelink">Return</span>&nbsp;|&nbsp;<span class="statsw stattab likelink">Raw</span>
</td></tr>
<tr>
<td id="footer" class="footer">&nbsp;</td>
<td colspan="2" id="stats" class="stats"><table id="matches"></table></td>
</tr>
<tr>
<td id="belowmenus">&nbsp;<br/>&nbsp;<br/>&nbsp;<br/>&nbsp;<br/>&nbsp;</td>
<td colspan="2" id="belowmatches">&nbsp;</td>
</tr>
</table></div>
</div>

</body>

