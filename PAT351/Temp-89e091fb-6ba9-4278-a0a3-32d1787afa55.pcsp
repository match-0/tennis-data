//       *****
// 	    Player1: Right Handed
// de_ct  ad_ct
// -----+-----
// |    |    |
// | 1  |  2 |
// |    |    |
// |=========|
// |    |    |
// | 3  |  4 |
// |    |    |
// -----+----+
// ad_ct  de_ct
// 	    Player2: Right Handed
//       *****

enum{f_ad_ct, f_de_ct, n_ad_ct, n_de_ct}; //serve position: ad court or deuce court
enum{player1, player2, na};

var turn = f_de_ct; //serve turn;
var fscore = 0;
var nscore = 0;
var won = na;
var ball = 9;



TieBreakGame = WhoServe1st; (Player1Serve [] Player2Serve);

WhoServe1st = []i:{f_de_ct,n_de_ct}@ TossCoin{turn = i} -> Skip;
Player1Serve = [won == na && turn == f_de_ct ]FedReady_DeCt -> De_Ply1Serve [] [won == na && turn == f_ad_ct] FedReady_AdCt -> Ad_Ply1Serve;

De_Ply1Serve = pcase {                             // all probability is based on percent %, 30 means 30%
			57: Ace{fscore++; if (fscore == 7) {won = player1} else { turn = (turn+1)%4 }} -> NextPt
			96: ServeT_in{ball= 4} -> Ply2_BackHandR  // T will have opponent response by serve T
			128: ServeT_err{ball=9} -> De_Ply1Serve_2nd
			71: ServeWide_in{ball =4} -> Ply2_ForeHandR 
			29: ServeWide_err{ball=9} -> De_Ply1Serve_2nd
			13: ServeBody_in{ball=4} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			5: ServeBody_err{ball=9} -> De_Ply1Serve_2nd}; 

De_Ply1Serve_2nd = pcase {                 //1st serve is out
			27: Ace{fscore++; if (fscore == 7) {won = player1} else { turn = (turn+1)%4 }} -> NextPt
			7: ServeT_in{ball= 4} -> Ply2_BackHandR  
			55: ServeT_err{ball=9} -> Fdoublefault{nscore++; if (nscore == 7) {won = player2} else { turn = (turn+1)%4 }} -> NextPt
			12: ServeWide_in{ball =4} -> Ply2_ForeHandR 
			71: ServeWide_err{ball=9} -> Fdoublefault{nscore++; if (nscore == 7) {won = player2} else { turn = (turn+1)%4 }} -> NextPt  		 
			9: ServeBody_in{ball=4} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			7: ServeBody_err{ball=9} -> Fdoublefault{nscore++; if (nscore == 7) {won = player2} else { turn = (turn+1)%4 }} -> NextPt
      		 
     		 };
Ad_Ply1Serve = pcase {
			85: Ace{fscore++; if (fscore == 7) {won = player1} else { turn = (turn+1)%4 }} -> NextPt
			73: ServeT_in{ball= 3} -> Ply2_ForeHandR  
			56: ServeT_err{ball=9} -> Ad_Ply1Serve_2nd
			103: ServeWide_in{ball = 3} -> Ply2_BackHandR
			21: ServeWide_err{ball=9} -> Ad_Ply1Serve_2nd
			17: ServeBody_in{ball= 3} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			5: ServeBody_err{ball=9} -> Ad_Ply1Serve_2nd}; 

Ad_Ply1Serve_2nd = pcase {                 //1st serve is out
			19: Ace{fscore++; if (fscore == 7) {won = player1} else { turn = (turn+1)%4 }} -> NextPt
			4: ServeT_in{ball= 3} -> Ply2_ForeHandR  
			83: ServeT_err{ball=9} -> Fdoublefault{nscore++; if (nscore == 7) {won = player2} else { turn = (turn+1)%4 }} -> NextPt
			9: ServeWide_in{ball =3} -> Ply2_BackHandR
			76: ServeWide_err{ball=9} -> Fdoublefault{nscore++; if (nscore == 7) {won = player2} else { turn = (turn+1)%4 }} -> NextPt
			7: ServeBody_in{ball=3} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			0: ServeBody_err{ball=9} -> Fdoublefault{nscore++; if (nscore == 7) {won = player2} else { turn = (turn+1)%4 }} -> NextPt
     		 };    

NextPt = Player1Serve [] Player2Serve [] ([won != na] GameOver -> Skip);

// deuce stroke is when player2 hit position is 5
Ply2_de_stroke = pcase { // if already 
			1068: FH_Crosscourt { ball = 1;} -> Ply1_de_stroke
			511: FH_Downline { ball = 2} -> Ply1_ad_stroke
			374: BH_InsideIn {ball = 2} -> Ply1_ad_stroke
			106: BH_InsideOut { ball = 1} -> Ply1_de_stroke
			1: FH_Error { ball = 9} -> {fscore++; if (fscore == 7) {won = player1} else { turn = (turn+1)%4 }} -> NextPt
			2: BH_Error { ball = 9} -> {fscore++; if (fscore == 7) {won = player1} else { turn = (turn+1)%4 }} -> NextPt   		                                                            
	};

// ad stroke is when player 2 hit position is 4
Ply2_ad_stroke = pcase{
			1696: BH_Crosscourt { ball = 2} -> Ply1_ad_stroke
			419: BH_Downline { ball = 1} -> Ply1_de_stroke
			314: FH_InsideOut { ball = 2} -> Ply1_ad_stroke
			572: FH_InsideIn { ball = 1} -> Ply1_de_stroke
			52: FH_Error { ball = 9} -> {fscore++; if (fscore == 7) {won = player1} else { turn = (turn+1)%4 }} -> NextPt
			24: BH_Error { ball = 9} -> {fscore++; if (fscore == 7) {won = player1} else { turn = (turn+1)%4 }} -> NextPt
	};    		                                                            


Player2Serve = [won == na && turn == n_de_ct]NadReady_DeCt -> De_Ply2Serve [] [ won == na && turn == n_ad_ct] NadReady_AdCt -> Ad_Ply2Serve;

De_Ply2Serve = pcase {
			174: Ace{nscore++; if (nscore == 7) {won = player2} else { turn = (turn+1)%4 }} -> NextPt
			163: ServeT_in{ball= 1} -> Ply1_BackHandR
			235: ServeT_err{ball=9} -> De_Ply2Serve_2nd
			141: ServeWide_in{ball =1} -> Ply1_ForeHandR
			121: ServeWide_err{ball=9} -> De_Ply2Serve_2nd
			64: ServeBody_in{ball=1} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			3: ServeBody_err{ball=9} -> De_Ply2Serve_2nd}; 

De_Ply2Serve_2nd = pcase {                 //1st serve is out
			108: Ace{nscore++; if (nscore == 7) {won = player2} else { turn = (turn+1)%4 }} -> NextPt
			15: ServeT_in{ball= 1} -> Ply1_BackHandR
			41: ServeT_err{ball=9} -> Fdoublefault{fscore++; if (fscore == 7) {won = player1} else { turn = (turn+1)%4 }} -> NextPt
			9: ServeWide_in{ball =1} -> Ply1_ForeHandR
			183: ServeWide_err{ball=9} -> Fdoublefault{fscore++; if (fscore == 7) {won = player1} 
      		                                                     else  { turn = (turn+1)%4 }} -> NextPt
      		10: ServeBody_in{ball=1} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			20 : ServeBody_err{ball=9} -> Fdoublefault{fscore++; if (fscore == 7) {won = player1} 
      		                                                     else  { turn = (turn+1)%4 }} -> NextPt
     		 };
     		 
Ad_Ply2Serve = pcase {
			176: Ace{nscore++; if (nscore == 7) {won = player2} 
      		                                                     else  { turn = (turn+1)%4 }} -> NextPt
			139: ServeT_in{ball= 2} -> Ply1_ForeHandR
			163: ServeT_err{ball=9} -> Ad_Ply2Serve_2nd
			162: ServeWide_in{ball =2} -> Ply1_BackHandR
			120: ServeWide_err{ball=9} -> Ad_Ply2Serve_2nd
			71: ServeBody_in{ball=2} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			10: ServeBody_err{ball=9} -> Ad_Ply2Serve_2nd}; 

Ad_Ply2Serve_2nd = pcase {                 //1st serve is out
			50: Ace{nscore++; if (nscore == 7) {won = player2} 
      		                                                     else  { turn = (turn+1)%4 }} -> NextPt
			15: ServeT_in{ball= 2} -> Ply1_ForeHandR
			139: ServeT_err{ball=9} -> Fdoublefault{fscore++; if (fscore == 7) {won = player1} 
      		                                                     else  { turn = (turn+1)%4 }} -> NextPt
			6: ServeWide_in{ball =2} -> Ply1_BackHandR
			149: ServeWide_err{ball=9} -> Fdoublefault{fscore++; if (fscore == 7) {won = player1} 
      		                                                     else  { turn = (turn+1)%4 }} -> NextPt
			14: ServeBody_in{ball=2} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			0: ServeBody_err{ball=9} -> Fdoublefault{fscore++; if (fscore == 7) {won = player1} 
      		                                                     else  { turn = (turn+1)%4 }} -> NextPt
     		 };
 	     
// deuce stroke is when player1 hit position is 1
Ply1_de_stroke = pcase{
			421: FH_Crosscourt { ball = 4} -> Ply2_de_stroke
			184: FH_Downline { ball = 3} -> Ply2_ad_stroke
			117: BH_InsideIn {ball = 3} -> Ply2_ad_stroke
			56: BH_InsideOut { ball = 4} -> Ply2_de_stroke
			2: FH_Error { ball = 9} -> {nscore++; if (nscore == 7) {won = player2}
      		                                                     else  { turn = (turn+1)%4 }} -> NextPt
			0: BH_Error { ball = 9} -> {nscore++; if (nscore == 7) {won = player2}
      		                                                     else  { turn = (turn+1)%4 }} -> NextPt     		                                                            
	};


// ad stroke is when player1 hit position is 2
Ply1_ad_stroke = pcase{
			583: BH_Crosscourt { ball = 3} -> Ply2_ad_stroke
			150: BH_Downline { ball = 4} -> Ply2_de_stroke
			125: FH_InsideOut { ball = 3} -> Ply2_ad_stroke
			222: FH_InsideIn { ball = 4} -> Ply2_de_stroke
			12: FH_Error { ball = 9} -> {nscore++; if (nscore == 7) {won = player2}
      		                                                     else  { turn = (turn+1)%4 }} -> NextPt
			15: BH_Error { ball = 9} -> {nscore++; if (nscore == 7) {won = player2}
      		                                                     else  { turn = (turn+1)%4 }} -> NextPt
	};

Ply2_BackHandR = ifa (turn == f_de_ct) {    // Player2 backhand return to Player1 serve from the deuce court side
		  pcase {
			386: BH_InsideIn {ball = 2} -> Ply1_ad_stroke
			131: BH_InsideOut { ball = 1} -> Ply1_de_stroke
			68: BH_Error1 { ball = 9} -> {fscore++; if (fscore == 7) {won = player1} 
      		                                                     else  { turn = (turn+1)%4 }} -> NextPt
      		 }}
      		 else {
      		pcase {
			97: BH_CrossCourt { ball = 2} -> Ply1_ad_stroke
			48: BH_DownLine { ball = 1} -> Ply1_de_stroke
			18: BH_Error2{ball=9} -> {fscore++; if (fscore == 7) {won = player1} 
      		                                                     else  { turn = (turn+1)%4 }} -> NextPt
      		 }};
      		 
Ply2_ForeHandR = ifa (turn == f_de_ct) {    // Player2 forehand return to Player1 serve from the deuce court side
			pcase {
			266: FH_CrossCourt { ball = 1;} -> Ply1_de_stroke
			141: FH_DownLine { ball = 2} -> Ply1_ad_stroke
			71: FH_Error1 { ball = 9} -> {fscore++; if (fscore == 7) {won = player1} 
      		                                                     else  { turn = (turn+1)%4 }} -> NextPt
      		 }}
      		 else {
      		pcase {
			82: FH_InsideOut { ball = 2} -> Ply1_ad_stroke
			7: FH_InsideIn { ball = 1} -> Ply1_de_stroke
			18: FH_Error2 { ball = 9} -> {fscore++; if (fscore == 7) {won = player1} 
      		                                                     else  { turn = (turn+1)%4 }} -> NextPt		
      		 }};
      		 
Ply1_BackHandR = ifa (turn == n_de_ct) {    // Player2 backhand return to Player1 serve from the deuce court side
		 pcase {
			141: BH_InsideIn {ball = 3} -> Ply2_ad_stroke
			46: BH_InsideOut { ball = 4} -> Ply2_de_stroke
			12: BH_Error1 { ball = 9} -> {nscore++; if (nscore == 7) {won = player2}
      		                                                     else  { turn = (turn+1)%4 }} -> NextPt
      		 }}
      		 else {
      		pcase {
			36: BH_CrossCourt { ball = 3} -> Ply2_ad_stroke
			4: BH_DownLine { ball = 4} -> Ply2_de_stroke
			7: BH_Error2{ball=9} -> {nscore++; if (nscore == 7) {won = player2}
      		                                                     else  { turn = (turn+1)%4 }} -> NextPt
      		 }};

Ply1_ForeHandR = ifa (turn == n_de_ct) {    // Player2 forehand return to Player1 serve from the deuce court side
		 pcase {
			105: FH_Crosscourt { ball = 4} -> Ply2_de_stroke
			57: FH_Downline { ball = 3} -> Ply2_ad_stroke
			26: FH_Error1 { ball = 9} -> {nscore++; if (nscore == 7) {won = player2}
      		                                                     else  { turn = (turn+1)%4 }} -> NextPt
      		 }}
      		 else {
      		pcase {
			33: FH_InsideOut { ball = 3} -> Ply2_ad_stroke
			4: FH_InsideIn { ball = 4} -> Ply2_de_stroke
			7: FH_Error2 { ball = 9} -> {nscore++; if (nscore == 7) {won = player2}
      		                                                     else  { turn = (turn+1)%4 }} -> NextPt
      		 }};


#define player1Win won == player1;
#define player2Win won == player2;
#define player2Win1stPoint nscore == 1 && fscore ==0;
#define player1Win1stPoint fscore == 1 && nscore ==0;


#assert TieBreakGame reaches player1Win with prob;

