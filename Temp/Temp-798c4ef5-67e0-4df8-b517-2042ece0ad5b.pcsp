// MatchName
//       *****
// 	    Player1: Right Handed, Roger_Federer
// de_ct  mid  ad_ct
// -----+-----+-----
// |    |     |    |
// | 1  |  2  | 3  |
// |    |     |    |
// |===============|
// |    |     |    |
// | 4  |  5  | 6  |
// |    |     |    |
// -----+-----+-----
// ad_ct  mid  de_ct
// 	    Player2: Right Handed, Dominic_Thiem
//       *****

enum{f_ad_ct, f_de_ct, n_ad_ct, n_de_ct}; //serve position: ad court or deuce court
enum{player1, player2, na};

var turn = na; //serve turn;
var fscore = 0;
var nscore = 0;
var won = na;
var ball = 9;

TieBreakGame = WhoServe1st; (Player1Serve [] Player2Serve);

WhoServe1st = []i:{f_de_ct,n_de_ct}@ TossCoin{turn = i} -> Skip;
Player1Serve = [won == na && turn == f_de_ct ]FedReady_DeCt -> De_Ply1Serve [] [won == na && turn == f_ad_ct] FedReady_AdCt -> Ad_Ply1Serve;

De_Ply1Serve = pcase {                             
			15: ServeT_in{ball= 5} -> Ply2_BackHandR  
			19: ServeWide_in{ball =6} -> Ply2_ForeHandR 
			3: ServeBody_in{ball=6} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			21: Serve_err{ball=9} -> De_Ply1Serve_2nd}; 

De_Ply1Serve_2nd = pcase {                 //1st serve is out
			4: ServeT_in{ball= 5} -> Ply2_BackHandR  
			3: ServeWide_in{ball =6} -> Ply2_ForeHandR 
			13: ServeBody_in{ball=6} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			1: Serve_err{ball=9} -> Fdoublefault{nscore++; if (nscore == 7) {won = player2} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
     		 };

Ad_Ply1Serve = pcase {
			11: ServeT_in{ball= 5} -> Ply2_ForeHandR  
			16: ServeWide_in{ball =4} -> Ply2_BackHandR
			0: ServeBody_in{ball=4} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			25: Serve_err{ball=9} -> Ad_Ply1Serve_2nd}; 

Ad_Ply1Serve_2nd = pcase {                 //1st serve is out
			6: ServeT_in{ball= 5} -> Ply2_ForeHandR  
			7: ServeWide_in{ball =4} -> Ply2_BackHandR
			12: ServeBody_in{ball=4} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			0: Serve_err{ball=9} -> Fdoublefault{nscore++; if (nscore == 7) {won = player2} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
     		 };    

NextPt = Player1Serve [] Player2Serve [] ([won != na] GameOver -> Skip);

// deuce stroke is when player2 hit position is 6
Ply2_de_stroke = pcase { // if already 
			41: FH_Crosscourt { ball = 1;} -> Ply1_de_stroke
			20: FH_Downline { ball = 3} -> Ply1_ad_stroke
			19: FH_DownMid { ball = 2} -> Ply1_mid_stroke
			0: BH_InsideIn {ball = 3} -> Ply1_ad_stroke
			0: BH_InsideOut { ball = 1} -> Ply1_de_stroke
			0: BH_DownMid { ball = 2} -> Ply1_mid_stroke
			30: Error { ball = 9} -> {fscore++; if (fscore == 7) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt      		                                                            
	};

// mid stroke is when player2 hit position is 5
Ply2_mid_stroke = noMove -> pcase{
			39: FH_Crosscourt{ball = 1} -> Ply1_de_stroke
			39: FH_InsideOut { ball = 3} -> Ply1_ad_stroke
			19: FH_DownMid { ball = 2 } -> Ply1_mid_stroke
			22: BH_Crosscourt { ball = 3} -> Ply1_ad_stroke
			16: BH_DownMid { ball = 2} -> Ply1_mid_stroke
			15: BH_InsideOut { ball = 1} -> Ply1_de_stroke
			30: Error { ball = 9} -> {fscore++; if (fscore == 7) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt   
	};
	

// ad stroke is when player 2 hit position is 4
Ply2_ad_stroke = pcase{
			46: BH_Crosscourt { ball = 3} -> Ply1_ad_stroke
			22: BH_Downline { ball = 1} -> Ply1_de_stroke
			26: BH_DownMid { ball = 2 } -> Ply1_mid_stroke
			2: FH_InsideOut { ball = 3} -> Ply1_ad_stroke
			2: FH_InsideIn { ball = 1} -> Ply1_de_stroke
			0: FH_DownMid { ball = 2} -> Ply1_mid_stroke
			27: Error { ball = 9} -> {fscore++; if (fscore == 7) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt   	
	};    		                                                            


Player2Serve = [won == na && turn == n_de_ct]NadReady_DeCt -> De_Ply2Serve [] [ won == na && turn == n_ad_ct] NadReady_AdCt -> Ad_Ply2Serve;

De_Ply2Serve = pcase {
			22 : ServeT_in{ball= 2} -> Ply1_BackHandR
			18 : ServeWide_in{ball =1} -> Ply1_ForeHandR
			2: ServeBody_in{ball=1} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			20: Serve_err{ball=9} -> De_Ply2Serve_2nd}; 

De_Ply2Serve_2nd = pcase {                 //1st serve is out
			9 : ServeT_in{ball= 2} -> Ply1_BackHandR
			6 : ServeWide_in{ball =1} -> Ply1_ForeHandR
			2: ServeBody_in{ball=1} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			3 : Serve_err{ball=9} -> Ndoublefault{fscore++; if (fscore == 7) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
     		 };
     		 
Ad_Ply2Serve = pcase {
			19: ServeT_in{ball= 2} -> Ply1_ForeHandR
			14 : ServeWide_in{ball =3} -> Ply1_BackHandR
			3: ServeBody_in{ball=3} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			18: Serve_err{ball=9} -> Ad_Ply2Serve_2nd}; 

Ad_Ply2Serve_2nd = pcase {                 //1st serve is out
			7: ServeT_in{ball= 2} -> Ply1_ForeHandR
			5 : ServeWide_in{ball =3} -> Ply1_BackHandR
			5: ServeBody_in{ball=3} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			1: Serve_err{ball=9} -> Ndoublefault{fscore++; if (fscore == 7) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
     		 };
 	     
// deuce stroke is when player1 hit position is 1
Ply1_de_stroke = pcase{
			48: FH_Crosscourt { ball = 6} -> Ply2_de_stroke
			17: FH_Downline { ball = 4} -> Ply2_ad_stroke
			33: FH_DownMid { ball = 5} -> Ply2_mid_stroke
			0: BH_InsideIn {ball = 4} -> Ply2_ad_stroke
			0: BH_InsideOut { ball = 6} -> Ply2_de_stroke
			0: BH_DownMid { ball = 5} -> Ply2_mid_stroke
			31: Error { ball = 9} -> {nscore++; if (nscore == 7) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt      		                                                            
	};

// mid stroke is when player1 hit position is 2
Ply1_mid_stroke = pcase{
			26: FH_InsideOut{ball = 4} -> Ply2_ad_stroke
			25: FH_Crosscourt { ball = 6} -> Ply2_de_stroke
			21: FH_DownMid { ball = 5 } -> Ply2_mid_stroke
			4: BH_InsideOut { ball = 6} -> Ply2_de_stroke
			17: BH_DownMid { ball = 5} -> Ply2_mid_stroke
			13: BH_Crosscourt { ball = 4} -> Ply2_ad_stroke
			13: Error { ball = 9} -> {nscore++; if (nscore == 7) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt   
	};

// ad stroke is when player1 hit position is 3
Ply1_ad_stroke = pcase{
			35: BH_Crosscourt { ball = 4} -> Ply2_ad_stroke
			21: BH_Downline { ball = 6} -> Ply2_de_stroke
			56: BH_DownMid { ball = 5 } -> Ply2_mid_stroke
			9: FH_InsideOut { ball = 4} -> Ply2_ad_stroke
			1: FH_InsideIn { ball = 6} -> Ply2_de_stroke
			1: FH_DownMid { ball = 5} -> Ply2_mid_stroke
			29: Error { ball = 9} -> {nscore++; if (nscore == 7) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt 	
	};

Ply2_ForeHandR = ifa (turn == f_de_ct) {    // Player2 backhand return to Player1 serve from the deuce court side
		  pcase {
			3: FH_CrossCourt_DE {ball = 1} -> Ply1_de_stroke
			1: FH_DownLine { ball = 3} -> Ply1_ad_stroke
			9: FH_DownMid_DE { ball = 2} -> Ply1_mid_stroke
			11: FH_Error_DE { ball = 9} -> {fscore++; if (fscore == 7) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			1: FH_InsideIn {ball = 1} -> Ply1_de_stroke
			1: FH_CrossCourt_AD {ball = 1} -> Ply1_de_stroke
			5: FH_InsideOut { ball = 3} -> Ply1_ad_stroke
			8: FH_DownMid_AD { ball = 2} -> Ply1_mid_stroke
			5: FH_Error_AD { ball = 9} -> {fscore++; if (fscore == 7) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};
      		 
Ply2_BackHandR = ifa (turn == f_de_ct) {    // Player2 forehand return to Player1 serve from the deuce court side
			pcase {
			5: BH_InsideOut { ball = 1} -> Ply1_de_stroke
			1: BH_CrossCourt_DE { ball = 3} -> Ply1_ad_stroke
			1: BH_InsideIn {ball = 3} -> Ply1_ad_stroke
			16: BH_DownMid_DE { ball = 2} -> Ply1_mid_stroke
			10: BH_Error_DE { ball = 9} -> {fscore++; if (fscore == 7) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			15: BH_CrossCourt_AD { ball = 3} -> Ply1_ad_stroke
			0: BH_DownLine { ball = 1} -> Ply1_de_stroke
			6: BH_DownMid_AD { ball = 2} -> Ply1_mid_stroke
			11: BH_Error_AD { ball = 9} -> {fscore++; if (fscore == 7) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt			
      		 }};
      		 
Ply1_BackHandR = ifa (turn == n_de_ct) {    // Player2 backhand return to Player1 serve from the deuce court side
		 pcase {
			4: BH_CrossCourt_DE {ball = 4} -> Ply2_ad_stroke
			3: BH_InsideIn {ball = 4} -> Ply2_ad_stroke
			3: BH_InsideOut { ball = 6} -> Ply2_de_stroke
			14: BH_DownMid_DE { ball = 5} -> Ply2_mid_stroke
			11: BH_Error_DE { ball = 9} -> {nscore++; if (nscore == 7) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			9: BH_CrossCourt_AD { ball = 4} -> Ply2_ad_stroke
			0: BH_DownLine { ball = 6} -> Ply2_de_stroke
			9: BH_DownMid_AD { ball = 5 } -> Ply2_mid_stroke
			5: BH_Error_AD{ball=9} -> {nscore++; if (nscore == 7) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};

Ply1_ForeHandR = ifa (turn == n_de_ct) {    // Player2 forehand return to Player1 serve from the deuce court side
		 pcase {
			6: FH_CrossCourt_DE { ball = 6;} -> Ply2_de_stroke
			3: FH_DownLine { ball = 4} -> Ply2_ad_stroke
			11: FH_DownMid_DE { ball = 5} -> Ply2_mid_stroke
			4: FH_Error_DE { ball = 9} -> {nscore++; if (nscore == 7) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			6: FH_InsideOut { ball = 4} -> Ply2_ad_stroke
			2: FH_CrossCourt_AD {ball = 6} -> Ply2_de_stroke
			0: FH_InsideIn { ball = 6} -> Ply2_de_stroke
			18: FH_DownMid_AD { ball = 5} -> Ply2_mid_stroke
			4: FH_Error_AD { ball = 9} -> {nscore++; if (nscore == 7) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};


#define player1Win won == player1;
#assert TieBreakGame reaches player1Win with prob;